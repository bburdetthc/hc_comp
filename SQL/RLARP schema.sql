
  
CREATE VIEW RLARP.PAYROLL_ENTRY (
	TB, 
	FLAG, 
	ACCT, 
	GL_DESCR, 
	DEBIT, 
	CREDIT) 
	AS 
	SELECT  
		TB, 
		CASE JRNLT WHEN 'HEADER' THEN 'HDR' ELSE 'DTL' END FLAG, 
		CASE JRNLT WHEN 'HEADER' THEN TB ELSE CAST(SUBSTR(CASE JRNLT WHEN 'PRIMAR' THEN A.ACCT ELSE COALESCE(TB,'00')||'0000101002' END,3,10) AS BIGINT) END ACCT,  
		CASE JRNLT WHEN 'HEADER' THEN ADP_COMP||' '||SUBSTR(PAY_DATE,3,4)||' '||PMNT ELSE PAY_DATE||'-'||ADP_COMP||'-'||CASE JRNLT WHEN 'PRIMAR' THEN R.DESCR ELSE PMNT END END GL_DESCR, 
		CASE WHEN SUM(A.AMOUNT*CASE JRNLT WHEN 'PRIMAR' THEN -1 ELSE 1 END) >= 0 THEN SUM(A.AMOUNT*CASE JRNLT WHEN 'PRIMAR' THEN -1 ELSE 1 END) ELSE 0 END DEBIT, 
		CASE WHEN SUM(A.AMOUNT*CASE JRNLT WHEN 'PRIMAR' THEN -1 ELSE 1 END) < 0 THEN -SUM(A.AMOUNT*CASE JRNLT WHEN 'PRIMAR' THEN -1 ELSE 1 END) ELSE 0 END CREDIT 
	FROM  
		RLARP.FFPRRP R, 
		RLARP.FFPRCD C, 
		TABLE(VALUES 
			(ACCT, 'PRIMAR', AMOUNT), 
			(ACCT, 'OFFSET', AMOUNT), 
			(ACCT, 'HEADER', AMOUNT) 
		) AS A(ACCT, JRNLT, AMOUNT) 
	WHERE 
		R.DESCR = C.CODE AND 
		R.PO = C.PO AND 
		SUBSTR(PAY_DATE,1,4) = '1606' AND 
		PMNT IN ('ADP_TAX','PRINCIPAL_401K','ADP_GARNISHMENTS') 
	GROUP BY 
		TB, 
		CASE JRNLT WHEN 'HEADER' THEN 'HDR' ELSE 'DTL' END, 
		CASE JRNLT WHEN 'HEADER' THEN TB ELSE CAST(SUBSTR(CASE JRNLT WHEN 'PRIMAR' THEN A.ACCT ELSE COALESCE(TB,'00')||'0000101002' END,3,10) AS BIGINT) END,  
		CASE JRNLT WHEN 'HEADER' THEN ADP_COMP||' '||SUBSTR(PAY_DATE,3,4)||' '||PMNT ELSE PAY_DATE||'-'||ADP_COMP||'-'||CASE JRNLT WHEN 'PRIMAR' THEN R.DESCR ELSE PMNT END END ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.PAYROLL_ENTRY TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.PAYROLL_ENTRY TO PUBLIC ; 
  
CREATE VIEW RLARP.TAX_DATA (
	GROUP_CODE, 
	GROUP_DESCR FOR COLUMN GROUP00001, 
	RATE_CODE, 
	RATE_DESCR, 
	TYPE_CODE, 
	TYPE_DESCR, 
	COMP, 
	ACCOUNT, 
	DEBIT_CREDIT FOR COLUMN DEBIT00001, 
	REVNUE_UNITS FOR COLUMN REVNU00001, 
	RECOVERABLE FOR COLUMN RECOV00001, 
	CASH_BASED, 
	"SEQUENCE", 
	REV_DATE, 
	TAX_RATE, 
	TAX_AMOUNT, 
	GROSS_NET, 
	TAX_ON_INVOICE_TOTAL FOR COLUMN TAX_O00001, 
	CASH_DISCOUNT FOR COLUMN CASH_00001) 
	AS 
	SELECT 
		D.NMGRP GROUP_CODE, 
		G.NKDES GROUP_DESCR, 
		D.NMRTC RATE_CODE, 
		R.NIDES RATE_DESCR, 
		D.NMTYP TYPE_CODE, 
		T.NJDES TYPE_DESCR, 
		L.DN7COMN COMP, 
		L.DN7COMN||DIGITS(L.DN7GLA) ACCOUNT, 
		T.NJDOC DEBIT_CREDIT, 
		T.NJROU REVNUE_UNITS, 
		T.NJRCV RECOVERABLE, 
		T.NJCSHB CASH_BASED, 
		D.NMSEQ "SEQUENCE", 
		D.NMDAT REV_DATE, 
		D.NMRAT TAX_RATE, 
		D.NMAMT TAX_AMOUNT, 
		D.NMGON GROSS_NET, 
		D.NMTOIT TAX_ON_INVOICE_TOTAL, 
		D.NMSTCD CASH_DISCOUNT 
	FROM 
		(
		SELECT  
			NMGRP, NMRTC, NMTYP, NMSEQ, MAX(NMDAT) NMDAT  
		FROM  
			LGDAT.TXRTD  
		GROUP BY  
			NMGRP, NMRTC, NMTYP, NMSEQ 
		) X 
		INNER JOIN LGDAT.TXRTD D ON 
			D.NMGRP = X.NMGRP AND 
			D.NMRTC = X.NMRTC AND 
			D.NMTYP = X.NMTYP AND 
			D.NMSEQ = X.NMSEQ AND 
			D.NMDAT = X.NMDAT 
		LEFT OUTER JOIN LGDAT.TXGP G ON 
			G.NKGRP = D.NMGRP 
		LEFT OUTER JOIN LGDAT.TXTP T ON 
			T.NJTYP = D.NMTYP 
		LEFT OUTER JOIN LGDAT.TXRT R ON 
			R.NIGRP = D.NMGRP AND 
			R.NIRTC = D.NMRTC 
		LEFT OUTER JOIN LGDAT.TXTPGL L ON 
			L.DN7TYP = D.NMTYP ; 
  
LABEL ON COLUMN RLARP.TAX_DATA 
(GROUP_CODE IS 'Group               Code', 
	GROUP_DESCR IS 'Group               Description', 
	RATE_CODE IS 'Rate                Code', 
	RATE_DESCR IS 'Rate                Description', 
	TYPE_CODE IS 'Tax Type            Code', 
	TYPE_DESCR IS 'Tax Type            Description', 
	COMP IS 'Company             Number', 
	DEBIT_CREDIT IS 'Debit/Credit        D/C', 
	REVNUE_UNITS IS 'Revenue/Units       R/U', 
	RECOVERABLE IS 'Recoverable         Y/N', 
	CASH_BASED IS 'Cash Based          Tax', 
	"SEQUENCE" IS 'Application         Seq', 
	REV_DATE IS 'Eff. Date', 
	TAX_RATE IS 'Tax                 Rate', 
	TAX_AMOUNT IS 'Tax                 Amount', 
	GROSS_NET IS 'Gross/Net           G/N', 
	TAX_ON_INVOICE_TOTAL IS 'Tax On              Inv Tot', 
	CASH_DISCOUNT IS 'Subject to          Cash Discount') ; 
  
LABEL ON COLUMN RLARP.TAX_DATA 
(GROUP_CODE TEXT IS 'Group Code', 
	GROUP_DESCR TEXT IS 'Group Description', 
	RATE_CODE TEXT IS 'Rate Code', 
	RATE_DESCR TEXT IS 'Rate Description', 
	TYPE_CODE TEXT IS 'Tax Type Code', 
	TYPE_DESCR TEXT IS 'Tax Type Description', 
	COMP TEXT IS 'Company Number', 
	DEBIT_CREDIT TEXT IS 'Debit/Credit D/C', 
	REVNUE_UNITS TEXT IS 'Revenue/Units R/U', 
	RECOVERABLE TEXT IS 'Recoverable Y/N', 
	CASH_BASED TEXT IS 'Cash Based Tax', 
	"SEQUENCE" TEXT IS 'Application Seq', 
	REV_DATE TEXT IS 'Eff. Date', 
	TAX_RATE TEXT IS 'Tax Rate', 
	TAX_AMOUNT TEXT IS 'Tax Amount', 
	GROSS_NET TEXT IS 'Gross/Net G/N', 
	TAX_ON_INVOICE_TOTAL TEXT IS 'Tax On Inv Tot', 
	CASH_DISCOUNT TEXT IS 'Subject to Cash Discount') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.TAX_DATA TO PTROWBRIDG WITH GRANT OPTION ; 
  
CREATE VIEW RLARP.TAX_RATES (
	GROUP_CODE, 
	GROUP_DESCR FOR COLUMN GROUP00001, 
	RATE_CODE, 
	RATE_DESCR, 
	TYPE_CODE, 
	TYPE_DESCR, 
	DEBIT_CREDIT FOR COLUMN DEBIT00001, 
	REVNUE_UNITS FOR COLUMN REVNU00001, 
	RECOVERABLE FOR COLUMN RECOV00001, 
	CASH_BASED, 
	"SEQUENCE", 
	REV_DATE, 
	TAX_RATE, 
	TAX_AMOUNT, 
	GROSS_NET, 
	TAX_ON_INVOICE_TOTAL FOR COLUMN TAX_O00001, 
	CASH_DISCOUNT FOR COLUMN CASH_00001) 
	AS 
	SELECT  
			D.NMGRP GROUP_CODE,  
			G.NKDES GROUP_DESCR,  
			D.NMRTC RATE_CODE,  
			R.NIDES RATE_DESCR,  
			D.NMTYP TYPE_CODE,  
			T.NJDES TYPE_DESCR,  
			T.NJDOC DEBIT_CREDIT,  
			T.NJROU REVNUE_UNITS,  
			T.NJRCV RECOVERABLE,  
			T.NJCSHB CASH_BASED,  
			D.NMSEQ "SEQUENCE",  
			D.NMDAT REV_DATE,  
			D.NMRAT TAX_RATE,  
			D.NMAMT TAX_AMOUNT,  
			D.NMGON GROSS_NET,  
			D.NMTOIT TAX_ON_INVOICE_TOTAL,  
			D.NMSTCD CASH_DISCOUNT  
		FROM  
			( 
			SELECT  
				NMGRP, NMRTC, NMTYP, NMSEQ, MAX(NMDAT) NMDAT  
			FROM  
				LGDAT.TXRTD  
			GROUP BY  
				NMGRP, NMRTC, NMTYP, NMSEQ  
			) X  
			INNER JOIN LGDAT.TXRTD D ON  
				D.NMGRP = X.NMGRP AND  
				D.NMRTC = X.NMRTC AND  
				D.NMTYP = X.NMTYP AND  
				D.NMSEQ = X.NMSEQ AND  
				D.NMDAT = X.NMDAT  
			LEFT OUTER JOIN LGDAT.TXGP G ON  
				G.NKGRP = D.NMGRP  
			LEFT OUTER JOIN LGDAT.TXTP T ON  
				T.NJTYP = D.NMTYP  
			LEFT OUTER JOIN LGDAT.TXRT R ON  
				R.NIGRP = D.NMGRP AND  
				R.NIRTC = D.NMRTC  
		WHERE 
			D.NMRAT <> 0 ; 
  
LABEL ON COLUMN RLARP.TAX_RATES 
(GROUP_CODE IS 'Group               Code', 
	GROUP_DESCR IS 'Group               Description', 
	RATE_CODE IS 'Rate                Code', 
	RATE_DESCR IS 'Rate                Description', 
	TYPE_CODE IS 'Tax Type            Code', 
	TYPE_DESCR IS 'Tax Type            Description', 
	DEBIT_CREDIT IS 'Debit/Credit        D/C', 
	REVNUE_UNITS IS 'Revenue/Units       R/U', 
	RECOVERABLE IS 'Recoverable         Y/N', 
	CASH_BASED IS 'Cash Based          Tax', 
	"SEQUENCE" IS 'Application         Seq', 
	REV_DATE IS 'Eff. Date', 
	TAX_RATE IS 'Tax                 Rate', 
	TAX_AMOUNT IS 'Tax                 Amount', 
	GROSS_NET IS 'Gross/Net           G/N', 
	TAX_ON_INVOICE_TOTAL IS 'Tax On              Inv Tot', 
	CASH_DISCOUNT IS 'Subject to          Cash Discount') ; 
  
LABEL ON COLUMN RLARP.TAX_RATES 
(GROUP_CODE TEXT IS 'Group Code', 
	GROUP_DESCR TEXT IS 'Group Description', 
	RATE_CODE TEXT IS 'Rate Code', 
	RATE_DESCR TEXT IS 'Rate Description', 
	TYPE_CODE TEXT IS 'Tax Type Code', 
	TYPE_DESCR TEXT IS 'Tax Type Description', 
	DEBIT_CREDIT TEXT IS 'Debit/Credit D/C', 
	REVNUE_UNITS TEXT IS 'Revenue/Units R/U', 
	RECOVERABLE TEXT IS 'Recoverable Y/N', 
	CASH_BASED TEXT IS 'Cash Based Tax', 
	"SEQUENCE" TEXT IS 'Application Seq', 
	REV_DATE TEXT IS 'Eff. Date', 
	TAX_RATE TEXT IS 'Tax Rate', 
	TAX_AMOUNT TEXT IS 'Tax Amount', 
	GROSS_NET TEXT IS 'Gross/Net G/N', 
	TAX_ON_INVOICE_TOTAL TEXT IS 'Tax On Inv Tot', 
	CASH_DISCOUNT TEXT IS 'Subject to Cash Discount') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.TAX_RATES TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.TAX_RATES TO PUBLIC ; 
  
CREATE VIEW RLARP.V_FGRP (
	FGRP, 
	FSTMT, 
	FLVL0, 
	FLVL1, 
	FLVL2, 
	FLVL3) 
	AS 
	SELECT 
		FG.BQ1GRP FGRP, 
		CASE WHEN SUBSTR(FG.BQ1GRP,1,1)<= '3' THEN 'BALANCE SHEET' ELSE 'INCOME STATEMENT' END FSTMT, 
		SUBSTR(FG.BQ1GRP,1,1)||' - '||RTRIM(SUBSTR(A249,1,30)) FLVL0, 
		CASE WHEN LENGTH(TRIM(FG.BQ1GRP)) >= 3 THEN SUBSTR(FG.BQ1GRP,2,2)||' - '||L1.BQ1TITL ELSE '-------->' END FLVL1, 
		CASE WHEN LENGTH(TRIM(FG.BQ1GRP)) >= 5 THEN SUBSTR(FG.BQ1GRP,4,2)||' - '||L2.BQ1TITL ELSE '-------->' END FLVL2, 
		CASE WHEN LENGTH(TRIM(FG.BQ1GRP)) >= 7 THEN SUBSTR(FG.BQ1GRP,6,2)||' - '||L3.BQ1TITL ELSE '-------->' END FLVL3 
	FROM 
		LGDAT.FGRP FG 
		LEFT OUTER JOIN LGDAT.NAME N ON  
			SUBSTR(N.A7,7,1) = SUBSTR(FG.BQ1GRP,1,1) AND  
			SUBSTR(N.A7,1,1) = 'A'  
		INNER JOIN LGDAT.FGRP L1 ON 
			L1.BQ1GRP = SUBSTR(FG.BQ1GRP,1,3) 
		LEFT OUTER JOIN LGDAT.FGRP L2 ON 
			L2.BQ1GRP = SUBSTR(FG.BQ1GRP,1,5) 
		LEFT OUTER JOIN LGDAT.FGRP L3 ON 
			L3.BQ1GRP = SUBSTR(FG.BQ1GRP,1,7) ; 
  
LABEL ON COLUMN RLARP.V_FGRP 
(FGRP IS 'Group               Code') ; 
  
LABEL ON COLUMN RLARP.V_FGRP 
(FGRP TEXT IS 'Group Code') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_FGRP TO PTROWBRIDG WITH GRANT OPTION ; 
  
CREATE VIEW RLARP.V_GRANTALL (
	TEXT) 
	AS 
	SELECT  
		'GRANT ALL ON TABLE RLARP.'||TABLE_NAME||' TO PUBLIC;'  
	FROM  
		QSYS2.SYSTABLES  
	WHERE  
		TABLE_SCHEMA = 'RLARP' 
		 
	UNION ALL 
	  
	SELECT 
		'GRANT ALL ON FUNCTION RLARP.'||ROUTINE_NAME||' TO PUBLIC;' 
	FROM  
		QSYS2.SYSFUNCS 
	WHERE 
		ROUTINE_SCHEMA = 'RLARP' 
	  
	UNION ALL 
	  
	SELECT 
		'GRANT ALL ON PROCEDURE RLARP.'||ROUTINE_NAME||' TO PUBLIC;' 
	FROM  
		QSYS2.SYSPROCS 
	WHERE 
		ROUTINE_SCHEMA = 'RLARP' ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_GRANTALL TO PTROWBRIDG WITH GRANT OPTION ; 
  
CREATE VIEW RLARP.V_INVSS (
	ACCT, 
	FSPR, 
	PLNT, 
	"PART", 
	ILOC, 
	MAJG, 
	MING, 
	MAJS, 
	MINS, 
	V6STAT, 
	V6RPLN, 
	QTYOH, 
	EXT_COST, 
	EXT_COST_USD FOR COLUMN EXT_C00001) 
	AS 
	SELECT 
		YACOMP||Y1INVA ACCT, 
		 --SUBSTR(ACCT,7,4) PRIME, 
		B.PERD FSPR,  
		PLNT,  
		PART,  
		STOK||' - '||RTRIM(AXLOCN) ILOC,  
		MAJG,  
		MING,  
		MAJS, 
		MINS, 
		V6STAT,  
		V6RPLN, 
		QTYOH, 
		QTYOH*COST_EFF EXT_COST, 
		QTYOH*COST_EFF*RATE EXT_COST_USD  
	FROM 
		RLARP.FFSTKBP B 
		LEFT OUTER JOIN LGDAT.STKR R ON 
			AXSTKL = STOK 
		LEFT OUTER JOIN RLARP.VW_FFITEMM I ON 
			I.ITEM = B.PART 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = B.PLNT AND 
			Y1GLEC = SUBSTR(GLEC,1,3) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = B.PLNT 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = B.PART AND 
			V6PLNT = B.PLNT 
		LEFT OUTER JOIN LGDAT.MAST ON 
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = YACOMP||Y1INVA  
		LEFT OUTER JOIN RLARP.FFCRET X ON 
			FCUR = AZFUT2 AND 
			TCUR = 'US' AND 
			RTYP = 'ME' AND 
			X.PERD = B.PERD ; 
  
LABEL ON COLUMN RLARP.V_INVSS 
(V6STAT IS 'Inventory           Item                Status', 
	V6RPLN IS 'Replenishment       Type') ; 
  
LABEL ON COLUMN RLARP.V_INVSS 
(V6STAT TEXT IS 'Inventory Item Status', 
	V6RPLN TEXT IS 'Replenishment Type') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_INVSS TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_INVSS TO PUBLIC ; 
  
CREATE VIEW RLARP.V_POCKPRIC (
	DCODAT, 
	ORD_FSPR, 
	DDQDAT, 
	DCMDAT, 
	DCPO, 
	DCPROM, 
	DDORD#, 
	DCPPCL, 
	DDITM#, 
	DCSTAT, 
	DDITST, 
	CALC_STATUS FOR COLUMN CALC_00001, 
	DDQTOI, 
	DDQTSI, 
	V6UNTI, 
	DDSDAT, 
	DCCURR, 
	DDSTKL, 
	DCPLNT, 
	DDPART, 
	MOLD, 
	DDGLC, 
	GLDC, 
	GLEC, 
	MAJG, 
	MING, 
	MAJS, 
	MINS, 
	BILL_REMIT_TO FOR COLUMN BILL_00001, 
	BILL_CUST_CLASS FOR COLUMN BILL_00002, 
	BILL_CUST, 
	SHIP_CUST_CLASS FOR COLUMN SHIP_00001, 
	SHIP_CUST, 
	GEO, 
	CHAN, 
	ORIG_CTRY, 
	ORIG_PROV, 
	ORIG_LANE, 
	ORIG_POST, 
	DEST_CTRY, 
	DEST_PROV, 
	DEST_LANE, 
	DEST_POST, 
	ACCT, 
	FGRP, 
	ORD_AMT, 
	ORD_AMT_USD FOR COLUMN ORD_A00001, 
	ORD_COST, 
	ORD_COST_USD FOR COLUMN ORD_C00001, 
	ORD_TERMS, 
	PAYDATE, 
	PAYDAYS, 
	DISCP, 
	DISCDAYS, 
	TERMS_USD, 
	PCS_PLT, 
	PALLETS, 
	MILES, 
	CPM_L, 
	CPM_P, 
	FREIGHT, 
	CGRP, 
	CREDR, 
	REBTR, 
	CRED, 
	REBT) 
	AS 
	SELECT  
		 ---------------------Order Info----------------------------------------- 
		DCODAT, 										 
		PD.FSPR ORD_FSPR,  
		DDQDAT,  
		DCMDAT,  
		RTRIM(DCPO) DCPO,  
		RTRIM(DCPROM) DCPROM,  
		DDORD#,  
		DCPPCL,  
		DDITM#,  
		DCSTAT,  
		DDITST,  
		CASE DDITST WHEN 'C' THEN  
			CASE DDQTSI WHEN 0 THEN 'CANCELED' ELSE 'CLOSED' END  
			ELSE CASE WHEN DDQTSI >0 THEN 'BACKORDER' ELSE 'OPEN' END  
		END CALC_STATUS,  
		DDQTOI,  
		DDQTSI,  
		A.V6UNTI, 
		DDSDAT,  
		DCCURR,  
		SUBSTR(DDSTKL,1,3) DDSTKL, 
		DCPLNT,  
		DDPART,  
		SUBSTR(DDPART,1,8) MOLD, 
		DDGLC,  
	 	GLDC,  
	 	GLEC,  
	 	MAJG, 	MING, 	MAJS, 	MINS, 
	  
		 -------------------CUSTOMER INFO--------------------- 
	 	BC.BVCOMP BILL_REMIT_TO, 
	 	BC.BVCLAS BILL_CUST_CLASS,  
	 	BC.BVCUST||' - '||RTRIM(BC.BVNAME) BILL_CUST,  
		SC.BVCLAS SHIP_CUST_CLASS,  
		SC.BVCUST||' - '||RTRIM(SC.BVNAME) SHIP_CUST,  
		COALESCE(GEO,'UNDEFINED') GEO, COALESCE(CHAN,'UNDEFINED') CHAN, 

		 -------------------Shipping Info---------------------- 
		QZCRYC ORIG_CTRY, 
		QZPROV ORIG_PROV, 
		SUBSTR(QZPOST,1,3) ORIG_LANE, 
		QZPOST ORIG_POST, 
		SC.BVCTRY DEST_CTRY, 
		SC.BVPRCD DEST_PROV, 
		SUBSTR(SC.BVPOST,1,3) DEST_LANE, 
		SC.BVPOST DEST_POST, 
	  
	  
		 --------------------------Accounting----------------------------------- 
		DIGITS(ZWSAL#) ACCT,  
		AZGROP||' - '||RTRIM(BQ1TITL) FGRP,  

		---------------------Valuation-------------------------------------------- 

		CASE DDQTOI WHEN 0 THEN 0 ELSE DDTOTI END ORD_AMT,  
		CASE DDQTOI WHEN 0 THEN 0 ELSE DDTOTI END*XO.RATE ORD_AMT_USD,  
		DDQTOI*(MATERIAL+LABOR) ORD_COST, 
		DDQTOI*(MATERIAL+LABOR)*XC.RATE ORD_COST_USD, 

		---------------------Terms-------------------------------- 

		DCTRCD||' - '||RTRIM(TC.DESCR) ORD_TERMS,  
		PAYDATE,  
		PAYDAYS,  
		DISCP,  
		DISCDAYS, 
		-MIN(
		FLOAT((30.0-CASE PAYDATE WHEN '' THEN PAYDAYS ELSE DAYS(PAYDATE) - DAYS(DCMDAT) END)/30.0)*.01, 
		FLOAT(30.0 - DISCDAYS)/30.0*.01-COALESCE(DISCP,0.0) 
		)*CASE DDQTOI WHEN 0 THEN 0 ELSE DDTOTI END*XO.RATE TERMS_USD, 


		--------------------Freight--------------------------------------------- 


		V6MPCK PCS_PLT, 
		CASE WHEN COALESCE(V6MPCK,0) <= 0 THEN 0 ELSE DDQTOI/V6MPCK END PALLETS, 
		FP.HMILES MILES, 
		FL.HCPM CPM_L, 
		FS.HCPM CPM_P, 
		ROUND(FLOAT(COALESCE(FP.HMILES,FL.HMILES)*COALESCE(FP.HCPM,FL.HCPM,FS.HCPM)/24)*FLOAT(CASE WHEN COALESCE(V6MPCK,0) <= 0 THEN 0 ELSE DDQTOI/V6MPCK END),2)* CASE WHEN DCPPCL = 'P' THEN 1 ELSE 0 END FREIGHT, 

		 --------------------Returns & Allowances--------------------------------------------- 
		CG.CGRP, 
		ROUND(CR.CRED,5) CREDR, 
		ROUND(CR.REBT,5) REBTR, 
		ROUND(CRED*CASE DDQTOI WHEN 0 THEN 0 ELSE DDTOTI END*XO.RATE,2) CRED, 
		ROUND(REBT*CASE DDQTOI WHEN 0 THEN 0 ELSE DDTOTI END*XO.RATE,2) REBT 
		 
	FROM  
	  
		 -----------------------Order file lines---------------------------------------- 
	 	LGDAT.OCRI  
	 	INNER JOIN LGDAT.OCRH ON  
	 	 	DCORD# = DDORD#  
	  
		 -----------------------Plant/Part Master--------------------------------------- 
		LEFT OUTER JOIN LGDAT.STKA A ON 
			A.V6PART = DDPART AND 
			A.V6PLNT = SUBSTR(DDSTKL,1,3) 
	  
		 -----------------------Plant Info---------------------------------------------- 
		LEFT OUTER JOIN RLARP.VW_FFPLPR PL ON 
			PL.YAPLNT = SUBSTRING(DDSTKL,1,3) 
		LEFT OUTER JOIN LGDAT.PLNT P ON 
			P.YAPLNT = SUBSTR(DDSTKL,1,3) 
		LEFT OUTER JOIN LGDAT.ADRS ON 
			QZADR = YAADR# 
	  
	  
		 -----------------------Company Fiscal Periods---------------------------------- 
		LEFT OUTER JOIN RLARP.VW_FFGLPD PD ON 
			PL.COMP = PD.COMP AND 
			SDAT <= DCODAT AND 
			EDAT >= DCODAT 
	  
		 -----------------------Order Currency Conversion------------------------------- 
	 	LEFT OUTER JOIN RLARP.FFCRET XO ON  
	 	 	XO.FCUR = DCCURR AND  
	 	 	XO.TCUR = 'US' AND  
			XO.RTYP = 'MA' AND  
			XO.PERD = PD.FSPR 
	  
		 -----------------------Inventory Currency Conversion--------------------------- 
		LEFT OUTER JOIN RLARP.FFCRET XC ON  
	 	 	XC.FCUR = PL.CURR AND  
	 	 	XC.TCUR = 'US' AND  
			XC.RTYP = 'MA' AND  
			XC.PERD = PD.FSPR 
		 
		 -----------------------Customer Masters (Bill & Ship)-------------------------- 
		LEFT OUTER JOIN LGDAT.CUST BC ON  
			BC.BVCUST = DCBCUS  
		LEFT OUTER JOIN LGDAT.CUST SC ON  
			SC.BVCUST = DCSCUS  
	  
		 -----------------------Accounting---------------------------------------------- 
		LEFT OUTER JOIN LGDAT.ARMASC ON  
			ZWCOMP = BC.BVCOMP AND  
			ZWKEY1 = BC.BVARCD AND  
			ZWKEY2 = DDGLC AND  
			ZWPLNT = CASE SUBSTR(BC.BVCOMP,1,1) WHEN '3' THEN '0'||BC.BVCOMP ELSE SUBSTR(DDSTKL,1,3) END  
		LEFT OUTER JOIN LGDAT.MAST ON  
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = DIGITS(ZWSAL#)  
		LEFT OUTER JOIN LGDAT.FGRP ON  
			BQ1GRP = AZGROP  
	  
		 -----------------------Item Attributes----------------------------------------- 
		LEFT OUTER JOIN RLARP.VW_FFITEMM I ON  
			ITEM = DDPART  
		LEFT OUTER JOIN RLARP.VW_FFTMCD TC ON  
			TERM = DCTRCD 
		 
		 -----------------------Inventory Cost------------------------------------------ 
		LEFT OUTER JOIN RLARP.VW_FFICSTX X ON 
			X.V6PART = DDPART AND 
			X.V6PLNT = SUBSTRING(DDSTKL,1,3) 
	  
		 -----------------------Pricing Project Files------------------------------------------- 
		LEFT OUTER JOIN RLARP.FFTERR T ON 
			PROV = SC.BVPRCD AND 
			CTRY = SC.BVCTRY AND 
			T.VERS = 'INI' 
		LEFT OUTER JOIN RLARP.FFCHNL C ON 
			BILL = BC.BVCLAS AND 
			SHIP = SC.BVCLAS AND 
			C.VERS = 'INI' 
		LEFT OUTER JOIN RLARP.FFCUST CG ON		 
			CG.CUSTN = DCBCUS 
		LEFT OUTER JOIN RLARP.FFCRED CR ON 
			CR.CUSTG = COALESCE(CG.CGRP,BC.BVCUST||' - '||RTRIM(BC.BVNAME)) 
		LEFT OUTER JOIN RLARP.FR8M8 FP ON	 
			FP.ORIG = QZPOST AND	 
			FP.DEST = SC.BVPOST 
		LEFT OUTER JOIN RLARP.FR8M8 FL ON	 
			FL.ORIG = SUBSTR(QZPOST,1,3) AND	 
			FL.DEST = SUBSTR(SC.BVPOST,1,3) 
		LEFT OUTER JOIN RLARP.FR8M8 FS ON	 
			FS.ORIG = QZPROV AND	 
			FS.DEST = SC.BVPRCD ; 

		LABEL ON TABLE RLARP.V_POCKPRIC 
		IS 'Sales - Pocket price on booked orders' ; 
  
LABEL ON COLUMN RLARP.V_POCKPRIC 
(DCODAT IS 'Date                Entered', 
	DDQDAT IS 'Request             Date', 
	DCMDAT IS 'Promise             Date', 
	DDORD# IS 'Order               Number', 
	DCPPCL IS 'Prepaid             Collect', 
	DDITM# IS 'Item                Number', 
	DCSTAT IS 'Order               Status', 
	DDITST IS 'Item                Status', 
	DDQTOI IS 'Quantity            Ordered IU', 
	DDQTSI IS 'Quantity            Shipped IU', 
	V6UNTI IS 'Unit                Of                  Issue', 
	DDSDAT IS 'Ship                Date', 
	DCCURR IS 'Currency', 
	DCPLNT IS 'Plant               Code', 
	DDPART IS 'Part                Number', 
	DDGLC IS 'G/L                 Code', 
	BILL_REMIT_TO IS 'Company             Number', 
	BILL_CUST_CLASS IS 'Customer            Class', 
	SHIP_CUST_CLASS IS 'Customer            Class', 
	ORIG_CTRY IS 'Country             Code', 
	ORIG_PROV IS 'Province/           State', 
	ORIG_POST IS 'Postal/             Zip', 
	DEST_CTRY IS 'Country', 
	DEST_PROV IS 'Province            Code', 
	DEST_POST IS 'Postal              Code', 
	PCS_PLT IS 'Pallet              Pack                Size') ; 
  
LABEL ON COLUMN RLARP.V_POCKPRIC 
(DCODAT TEXT IS 'Date Entered', 
	DDQDAT TEXT IS 'Request Date', 
	DCMDAT TEXT IS 'Promise Date', 
	DDORD# TEXT IS 'Order Number', 
	DCPPCL TEXT IS 'Prepaid Collect', 
	DDITM# TEXT IS 'Item Number', 
	DCSTAT TEXT IS 'Status New, A, B/o, Comp', 
	DDITST TEXT IS 'Status Open, B/o, Compl.', 
	DDQTOI TEXT IS 'Quantity Ordered IU', 
	DDQTSI TEXT IS 'Quantity Shipped IU', 
	V6UNTI TEXT IS 'Unit Of Issue', 
	DDSDAT TEXT IS 'Ship Date', 
	DCCURR TEXT IS 'Currency', 
	DCPLNT TEXT IS 'Plant Code', 
	DDPART TEXT IS 'Part Number', 
	DDGLC TEXT IS 'G/L Code', 
	BILL_REMIT_TO TEXT IS 'Company Number', 
	BILL_CUST_CLASS TEXT IS 'Customer Class', 
	SHIP_CUST_CLASS TEXT IS 'Customer Class', 
	ORIG_CTRY TEXT IS 'Country Code', 
	ORIG_PROV TEXT IS 'Province/ State', 
	ORIG_POST TEXT IS 'Postal/ Zip', 
	DEST_CTRY TEXT IS 'Country', 
	DEST_PROV TEXT IS 'Province Code', 
	DEST_POST TEXT IS 'Postal Code', 
	PCS_PLT TEXT IS 'Pallet Pack Size') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_POCKPRIC TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_POCKPRIC TO PUBLIC ; 
  
CREATE VIEW RLARP.V_PSXD_PTPL (
	MAST, 
	MPLT, 
	TLVL, 
	TPART, 
	DESCR, 
	RQBY, 
	"PART", 
	SCRAP_RATE, 
	ERQTY, 
	UNITCOST, 
	MATERIAL, 
	DEP, 
	RESC, 
	"RUNTIME(SEC)" FOR COLUMN RUNTI00001, 
	"SETUP(MINS)" FOR COLUMN SETUP00001, 
	RUNSIZE, 
	BURDEN, 
	SCRAP, 
	STDCOST) 
	AS 
	SELECT 
		MAST, MPLT, TLVL, TPART, DESCR, 
		RQBY, PART, 1-XREFF SCRAP_RATE, ROUND(ERQTY,5) ERQTY,  
		COALESCE(BASE,0)+COALESCE(FRT,0)+COALESCE(DUTY,0)+COALESCE(MISC1,0)+COALESCE(MISC2,0)+COALESCE(X.CURR,0)+COALESCE("S&H",0)+COALESCE("FRT-TO",0)+COALESCE("FRT-FROM",0)+COALESCE(SUBC,0) UNITCOST, 
		ROUND(COALESCE(BASEX,0)+COALESCE(FRTX,0)+COALESCE(CURRX,0)+COALESCE(OTHMX,0)+COALESCE(SUBCX,0),5) MATERIAL, 
		DEP, RESC, 
		CASE COALESCE(RUNTIME,0) WHEN 0 THEN NULL ELSE ROUND(3600/RUNTIME,5) END AS "RUNTIME(SEC)",  
		SETTIME*60 AS "SETUP(MINS)",  
		CASE COALESCE(SETTIME,0) WHEN 0 THEN NULL ELSE RUNSIZE END RUNSIZE, 
		ROUND(COALESCE(LABRX,0)+COALESCE(FIXRX,0)+COALESCE(VARRX,0)+COALESCE(LABSX,0)+COALESCE(FIXSX,0)+COALESCE(VARSX,0),5) BURDEN, 
		ROUND(COALESCE(BASEXS,0)+COALESCE(FRTXS,0)+COALESCE(CURRXS,0)+COALESCE(OTHMXS,0)+COALESCE(SUBCXS,0)+COALESCE(LABRXS,0)+COALESCE(FIXRXS,0)+COALESCE(VARRXS,0)+COALESCE(LABSXS,0)+COALESCE(FIXSXS,0)+COALESCE(VARSXS,0),5) SCRAP, 
		STDCOST 
	FROM  
		TABLE(RLARP.F_PSXD_PTPL()) X 
		LEFT OUTER JOIN RLARP.VW_FFICSTX ON 
			V6PART = PART AND 
			V6PLNT = CPLNT ; 
  
LABEL ON TABLE RLARP.V_PSXD_PTPL 
	IS 'Inv - Explosion of FFPTPL contents' ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_PSXD_PTPL TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_PSXD_PTPL TO PUBLIC ; 
  
CREATE VIEW RLARP.V_SPENDLCS (
	FSPR, 
	CAPR, 
	WEEKNUM, 
	COMP, 
	FGRP, 
	FGRP_DESCR, 
	ACCT, 
	PRIME, 
	MODULE, 
	CUSMOD, 
	PARTY, 
	DETAILS, 
	STMT, 
	LVL0, 
	LVL1, 
	LVL2, 
	LVL3, 
	GLCC, 
	EBITDA, 
	DEPARTMENT, 
	ELIM_TYPE, 
	ELIM_REL, 
	ELIM_DFGRP, 
	DEP_GRP, 
	TRANS_BASE, 
	TRANS_USD) 
	AS 
	SELECT  
		FSPR, 
		CAPR, 
		MAX(SUBSTR(CHAR(TDATE),3,2)||SUBSTR(DIGITS(WEEK(TDATE)),9,2),SUBSTR(CHAR(SDAT),3,2)||SUBSTR(DIGITS(WEEK(SDAT)),9,2)) WEEKNUM, 
		COMP,  
		RTRIM(SUBSTR(FGRP,1,7)) FGRP, 
		RTRIM(SUBSTR(FGRP,11,100)) FGRP_DESCR, 
		ACCT, 
		PRIME, 
		MODULE, 
		CUSMOD, 
		PARTY TRAN1, 
		CASE COALESCE(D.CUSKEY1,'') WHEN '' THEN '' ELSE RTRIM(D.CUSKEY1D)||':'||RTRIM(D.CUSKEY1) END|| 
		CASE COALESCE(D.CUSKEY2,'') WHEN '' THEN '' ELSE CASE COALESCE(D.CUSKEY2,'') WHEN '' THEN '' ELSE ', 'END ||RTRIM(D.CUSKEY2D)||':'||RTRIM(D.CUSKEY2) END|| 
		CASE COALESCE(D.CUSKEY3,'') WHEN '' THEN '' ELSE CASE COALESCE(D.CUSKEY2,CUSKEY3,'') WHEN '' THEN '' ELSE ', ' END||RTRIM(D.CUSKEY3D)||':'||RTRIM(D.CUSKEY3) END|| 
		CASE COALESCE(D.CUSKEY4,'') WHEN '' THEN '' ELSE CASE COALESCE(D.CUSKEY2,CUSKEY3,CUSKEY4,'') WHEN '' THEN '' ELSE ', ' END||RTRIM(D.CUSKEY4D)||':'||RTRIM(D.CUSKEY4) END TRAN2, 
		STMT, 
		LVL0, 
		LVL1, 
		LVL2, 
		LVL3, 
		GLCC, 
		EBITDA, 
		DEPARTMENT, 
		ELIM_TYPE, 
		ELIM_REL, 
		ELIM_DFGRP, 
		DEP_GRP, 
		0 TRANS_BASE, 
		AMOUNT TRANS_USD 
	FROM 
		RLARP.VW_GLLCS D 
	WHERE	 
		FSPR = '1606' AND 
		SUBSTR(FGRP,1,3) IN ('560','570','585','610','611','615') 
	  
	UNION ALL 
	  
	SELECT  
			AP FSPR,  
			SUBSTR(CHAR(CURRENT_DATE),3,2)||SUBSTR(CHAR(CURRENT_DATE),6,2) CAPR,  
			MAX(SUBSTR(CHAR(SDAT),3,2)||SUBSTR(DIGITS(WEEK(SDAT)),9,2),SUBSTR(CHAR(KRRDAT),3,2)||SUBSTR(DIGITS(WEEK(KRRDAT)),9,2)) WEEKNUM, 
			KRCOM# COMP,  
			AZGROP||' - '||RTRIM(TL.BQ1TITL) FGRP,  
			RTRIM(TL.BQ1TITL) FGRP_DESCR,  
			KRCOM#||DIGITS(CASE KRGLVR WHEN 0 THEN KRGLEX ELSE KRGLVR END) ACCT,  
			SUBSTR(KRCOM#||DIGITS(CASE KRGLVR WHEN 0 THEN KRGLEX ELSE KRGLVR END),7,4) PRIME,  
			'PORCAP' MODULE,  
			'PORCAP' CUSMOD,  
			BTVEND||' - '||RTRIM(BTNAME) TRAN1,  
			DIGITS(KRPO#)||' - '||RTRIM(KCDESC) TRAN2,  
			CASE WHEN AZATYP <= 3  
			THEN 'BALANCE SHEET'  
				ELSE 'INCOME STATEMENT'  
			END STMT,  
			SUBSTR(AZGROP,1,1) LVL0,  
			CASE LENGTH(RTRIM(AZGROP))  
				WHEN 3 THEN SUBSTR(TL.BQ1GRP,2,2)||' - '||RTRIM(TL.BQ1TITL)  
				ELSE SUBSTR(FA.BQ1GRP,2,2)||' - '||RTRIM(FA.BQ1TITL)  
			END LVL1,  
			CASE LENGTH(RTRIM(AZGROP))  
				WHEN 3 THEN '----------->'  
				WHEN 5 THEN SUBSTR(TL.BQ1GRP,4,2)||' - '||RTRIM(TL.BQ1TITL)  
				ELSE SUBSTR(FB.BQ1GRP,4,2)||' - '||RTRIM(FB.BQ1TITL)  
			END LVL2,  
			CASE LENGTH(RTRIM(AZGROP))  
				WHEN 3 THEN '----------->'  
				WHEN 5 THEN '----------->'  
				ELSE SUBSTR(TL.BQ1GRP,6,2)||' - '||RTRIM(TL.BQ1TITL)  
			END LVL3,  
			AZFUT3,  
			RTRIM(D35DES1) EBITDA,  
			RTRIM(D35DES2) DEPARTMENT,  
			RTRIM(D35DES3) IC_TYPE,  
			RTRIM(D35USR1) IC_POINTER,  
			RTRIM(D35USR2) ELIM_GRP,  
			RTRIM(D35USR3) FUNCAREA,  
			ROUND(((KREXT+KRPST)/KRBQTY*FLOAT(KRRCVX)-KRSCST)*KRBQTY,2) TRANS_BASE,  
			ROUND(((KREXT+KRPST)/KRBQTY*FLOAT(KRRCVX)-KRSCST)*KRBQTY*RATE,2) TRANS_USD 

		FROM  
			LGDAT.PORCAP  
			INNER JOIN RLARP.VW_FFCOPR CP ON  
				CP.COMP = KRCOM#  
			LEFT OUTER JOIN RLARP.VW_FFGLPD GP ON 
				GP.COMP = CP.COMP AND		 
				GP.FSPR = CP.AP 
			LEFT OUTER JOIN LGDAT.MAST ON  
				AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = KRCOM#||DIGITS(CASE KRGLVR WHEN 0 THEN KRGLEX ELSE KRGLVR END)  
			LEFT OUTER JOIN LGDAT.FGRP TL ON  
				TL.BQ1GRP = AZGROP  
			LEFT OUTER JOIN LGDAT.FGRP FA ON  
				FA.BQ1GRP = SUBSTR(TL.BQ1GRP,1,3) AND  
			LENGTH(RTRIM(TL.BQ1GRP)) >=5  
			LEFT OUTER JOIN LGDAT.FGRP FB ON  
				FB.BQ1GRP = SUBSTR(TL.BQ1GRP,1,5) AND  
			LENGTH(RTRIM(TL.BQ1GRP)) >=7  
			LEFT OUTER JOIN LGDAT.VEND ON  
				BTVEND = KRVEN#  
			LEFT OUTER JOIN LGDAT.POD ON  
				KCPO# = KRPO# AND  
				KCITM# = KRPOI# AND  
				KCLIN# = 1  
			LEFT OUTER JOIN LGDAT.GGTP ON  
				D35GCDE = AZFUT3  
			LEFT OUTER JOIN RLARP.FFCRET X ON  
				FCUR = CURR AND  
				TCUR = 'US' AND  
				RTYP = 'ME' AND  
				X.PERD = AP 
	WHERE 
		SUBSTR(AZGROP,1,3) IN ('560','570','585','610','611','615') ; 
  
LABEL ON TABLE RLARP.V_SPENDLCS 
	IS 'Acct - Spending Logical Consolidation' ; 
  
LABEL ON COLUMN RLARP.V_SPENDLCS 
(GLCC IS 'Future Use          Fut3') ; 
  
LABEL ON COLUMN RLARP.V_SPENDLCS 
(FSPR TEXT IS 'F TEXT IScal Period', 
	CAPR TEXT IS 'Calendar Period', 
	COMP TEXT IS 'Company', 
	ACCT TEXT IS 'Account', 
	PRIME TEXT IS 'Prime', 
	MODULE TEXT IS 'Module', 
	CUSMOD TEXT IS 'Custom Module', 
	STMT TEXT IS 'Statement', 
	LVL0 TEXT IS 'Level 0', 
	LVL1 TEXT IS 'Level 1', 
	LVL2 TEXT IS 'Level 2', 
	LVL3 TEXT IS 'Level 3', 
	GLCC TEXT IS 'GL Category Code', 
	EBITDA TEXT IS 'EBITDA Categorization', 
	DEPARTMENT TEXT IS 'Department & Description', 
	ELIM_TYPE TEXT IS 'Elimiation Type', 
	ELIM_REL TEXT IS 'Elimination Relationship', 
	ELIM_DFGRP TEXT IS 'Elimination Destination Account Group', 
	DEP_GRP TEXT IS 'Department Group', 
	TRANS_USD TEXT IS 'Amount') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_SPENDLCS TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_SPENDLCS TO PUBLIC ; 
  
CREATE VIEW RLARP.V_STKMM (
	AVPART, 
	AVDES1, 
	AVDES2, 
	AVDES3, 
	AVUNTI, 
	AVMAJG, 
	AVMING, 
	AVMAJS, 
	AVMINS, 
	AVGLCD, 
	AVGLED, 
	AVHARM, 
	AVCLSS, 
	AVFUT3, 
	AVFUT4, 
	AVFUT5, 
	AVFUTC, 
	AVFUTD, 
	AVUPCC, 
	AVGTIN, 
	AVNWHT, 
	AVNWUN, 
	AVSVOL, 
	AVSVUN, 
	AVENGC, 
	AVREVL, 
	AVRDAT, 
	AVCOIL, 
	AVFUT9, 
	AVMSPC, 
	AVSLIF, 
	AVDPLT, 
	AVUVER, 
	AVCATA, 
	AVFEDC, 
	AVTAXR, 
	AVCUST, 
	AVCPT#, 
	AVREV#, 
	AVFUT7, 
	AVFUT8, 
	AVFUTB, 
	AVLDAT, 
	AVTYPE, 
	AVFUTK, 
	AVFUTN, 
	AVPPAP, 
	AVCUSR, 
	AVCDAT, 
	AVCTME, 
	AVUUSR, 
	AVUDAT, 
	AVUTME, 
	AVSIZC, 
	AVSTLC, 
	AVCOLC, 
	AVASSC, 
	AVSASC, 
	AVLCOIL, 
	AVGDFL, 
	AVVDFL, 
	AVWOQF, 
	AVNMFC, 
	AVFUTH, 
	AVFUTI, 
	AVFUTL, 
	AVFUTM, 
	AVFUTP, 
	AVFUTQ, 
	AVFUTR, 
	AVPRUN, 
	AVTOTP, 
	AVDISC, 
	AVINVT, 
	AVBK01, 
	AVBILL, 
	AVBK04, 
	AVBK06, 
	AVOLDD, 
	AVOLDD2, 
	AVLOTF, 
	AVSERF, 
	AVORIG, 
	AVPLAN, 
	AVMINQ, 
	AVMAXQ, 
	AVLEAD, 
	AVSCDT, 
	AVESTV, 
	AVCNTR, 
	AVUNTP, 
	AVLVL, 
	AVMOQT, 
	AVPACK, 
	AVPACU, 
	AVPRPT, 
	AVKITC, 
	AVPROC, 
	AVLRSP, 
	AVLRSC, 
	AVLRSF, 
	AVLRMP, 
	AVLRMC, 
	AVLRMF, 
	AVLWSP, 
	AVLWSC, 
	AVLWSF, 
	AVLCSP, 
	AVLCSC, 
	AVLCSF, 
	AVLCMP, 
	AVLCMC, 
	AVLCMF, 
	AVLSSC, 
	AVLSSF, 
	AVLSMP, 
	AVLSMC, 
	AVLSMF, 
	AVMPCK, 
	AVMPKU, 
	AVALTF, 
	AVDBUY, 
	AVFUT1, 
	AVFUT2, 
	AVFUT6, 
	AVFUTA, 
	AVFUTG, 
	AVRECU, 
	AVFTMF, 
	AVRECC, 
	AVFUTJ, 
	AVABCC, 
	AVCORG, 
	AVPERC, 
	AVOPTR, 
	AVMULT, 
	AVMINR, 
	AVSHRK, 
	AVSTAT, 
	AVREAS, 
	AVSPDT, 
	AVBBDT, 
	AVPSOR, 
	AVFUTO, 
	AVDRWS, 
	AVDRWL, 
	AVDENC, 
	AVDREL, 
	AVDDAT, 
	AVFUTE, 
	AVDRWS2, 
	AVDRWL2, 
	AVDENC2, 
	AVDREL2, 
	AVDDAT2, 
	AVFUTF, 
	AVSTCL, 
	AVVLCD, 
	AVSPPP, 
	AVSPPC, 
	AVMPPP, 
	AVMPPC, 
	AVFLG01, 
	AVFLG02, 
	AVFLG03, 
	AVFLG04, 
	AVFLG05, 
	AVFLG06, 
	AVFLG07, 
	AVFLG08, 
	AVFLG09, 
	AVFLG10, 
	AVFUT01, 
	AVFUT02, 
	AVFUT03, 
	AVFUT04, 
	AVFUT05, 
	AVFUT06, 
	AVFUT07, 
	AVFUT08, 
	AVFUT09, 
	AVFUT10, 
	AVFUT11, 
	AVFUT12, 
	AVFUT13, 
	AVFUT14, 
	AVFUT15, 
	AVFUT16, 
	AVFUT17, 
	AVFUT18, 
	AVFUT19, 
	AVFUT20, 
	AVFUT21, 
	AVFUT22, 
	AVFUT23, 
	AVFUT24, 
	AVFUT25, 
	AVFUT26, 
	AVFUT27, 
	AVFUT28, 
	AVFUT29, 
	AVFUT30, 
	AVFUT31, 
	AVFUT32, 
	AVFUT33, 
	AVFUT34, 
	AVFUT35, 
	AVFUT36, 
	AVFUT37, 
	AVFUT38, 
	AVFUT39, 
	AVFUT40, 
	AVFUT41, 
	AVFUT42, 
	AVFUT43, 
	AVFUT44, 
	AVFUT45, 
	AVUDFT, 
	AVFRML, 
	AVHAZA, 
	AVLLED, 
	AVDBAC, 
	AVSCDPT, 
	AVFIFO, 
	AVANTID, 
	AVSUBT, 
	AVPRCL, 
	AVOTP, 
	AVCBYL, 
	AVSRVC, 
	AVSPAL, 
	AVPGRP) 
	AS 
	SELECT 
	REPLACE(REPLACE(RTRIM(AVPART),'\','\\'),'"','\"') AVPART, 
	REPLACE(REPLACE(RTRIM(AVDES1),'\','\\'),'"','\"') AVDES1, 
	REPLACE(REPLACE(RTRIM(AVDES2),'\','\\'),'"','\"') AVDES2, 
	REPLACE(REPLACE(RTRIM(AVDES3),'\','\\'),'"','\"') AVDES3, 
	REPLACE(REPLACE(RTRIM(AVUNTI),'\','\\'),'"','\"') AVUNTI, 
	REPLACE(REPLACE(RTRIM(AVMAJG),'\','\\'),'"','\"') AVMAJG, 
	REPLACE(REPLACE(RTRIM(AVMING),'\','\\'),'"','\"') AVMING, 
	REPLACE(REPLACE(RTRIM(AVMAJS),'\','\\'),'"','\"') AVMAJS, 
	REPLACE(REPLACE(RTRIM(AVMINS),'\','\\'),'"','\"') AVMINS, 
	REPLACE(REPLACE(RTRIM(AVGLCD),'\','\\'),'"','\"') AVGLCD, 
	REPLACE(REPLACE(RTRIM(AVGLED),'\','\\'),'"','\"') AVGLED, 
	REPLACE(REPLACE(RTRIM(AVHARM),'\','\\'),'"','\"') AVHARM, 
	REPLACE(REPLACE(RTRIM(AVCLSS),'\','\\'),'"','\"') AVCLSS, 
	REPLACE(REPLACE(RTRIM(AVFUT3),'\','\\'),'"','\"') AVFUT3, 
	REPLACE(REPLACE(RTRIM(AVFUT4),'\','\\'),'"','\"') AVFUT4, 
	REPLACE(REPLACE(RTRIM(AVFUT5),'\','\\'),'"','\"') AVFUT5, 
	REPLACE(REPLACE(RTRIM(AVFUTC),'\','\\'),'"','\"') AVFUTC, 
	REPLACE(REPLACE(RTRIM(AVFUTD),'\','\\'),'"','\"') AVFUTD, 
	REPLACE(REPLACE(RTRIM(AVUPCC),'\','\\'),'"','\"') AVUPCC, 
	AVGTIN, 
	AVNWHT, 
	REPLACE(REPLACE(RTRIM(AVNWUN),'\','\\'),'"','\"') AVNWUN, 
	AVSVOL, 
	REPLACE(REPLACE(RTRIM(AVSVUN),'\','\\'),'"','\"') AVSVUN, 
	REPLACE(REPLACE(RTRIM(AVENGC),'\','\\'),'"','\"') AVENGC, 
	REPLACE(REPLACE(RTRIM(AVREVL),'\','\\'),'"','\"') AVREVL, 
	CHAR(AVRDAT) AVRDAT, 
	REPLACE(REPLACE(RTRIM(AVCOIL),'\','\\'),'"','\"') AVCOIL, 
	REPLACE(REPLACE(RTRIM(AVFUT9),'\','\\'),'"','\"') AVFUT9, 
	REPLACE(REPLACE(RTRIM(AVMSPC),'\','\\'),'"','\"') AVMSPC, 
	AVSLIF, 
	REPLACE(REPLACE(RTRIM(AVDPLT),'\','\\'),'"','\"') AVDPLT, 
	REPLACE(REPLACE(RTRIM(AVUVER),'\','\\'),'"','\"') AVUVER, 
	REPLACE(REPLACE(RTRIM(AVCATA),'\','\\'),'"','\"') AVCATA, 
	REPLACE(REPLACE(RTRIM(AVFEDC),'\','\\'),'"','\"') AVFEDC, 
	REPLACE(REPLACE(RTRIM(AVTAXR),'\','\\'),'"','\"') AVTAXR, 
	REPLACE(REPLACE(RTRIM(AVCUST),'\','\\'),'"','\"') AVCUST, 
	REPLACE(REPLACE(RTRIM(AVCPT#),'\','\\'),'"','\"') AVCPT#, 
	REPLACE(REPLACE(RTRIM(AVREV#),'\','\\'),'"','\"') AVREV#, 
	REPLACE(REPLACE(RTRIM(AVFUT7),'\','\\'),'"','\"') AVFUT7, 
	REPLACE(REPLACE(RTRIM(AVFUT8),'\','\\'),'"','\"') AVFUT8, 
	REPLACE(REPLACE(RTRIM(AVFUTB),'\','\\'),'"','\"') AVFUTB, 
	CHAR(AVLDAT) AVLDAT, 
	REPLACE(REPLACE(RTRIM(AVTYPE),'\','\\'),'"','\"') AVTYPE, 
	REPLACE(REPLACE(RTRIM(AVFUTK),'\','\\'),'"','\"') AVFUTK, 
	REPLACE(REPLACE(RTRIM(AVFUTN),'\','\\'),'"','\"') AVFUTN, 
	REPLACE(REPLACE(RTRIM(AVPPAP),'\','\\'),'"','\"') AVPPAP, 
	REPLACE(REPLACE(RTRIM(AVCUSR),'\','\\'),'"','\"') AVCUSR, 
	CHAR(AVCDAT) AVCDAT, 
	AVCTME, 
	REPLACE(REPLACE(RTRIM(AVUUSR),'\','\\'),'"','\"') AVUUSR, 
	CHAR(AVUDAT) AVUDAT, 
	AVUTME, 
	REPLACE(REPLACE(RTRIM(AVSIZC),'\','\\'),'"','\"') AVSIZC, 
	REPLACE(REPLACE(RTRIM(AVSTLC),'\','\\'),'"','\"') AVSTLC, 
	REPLACE(REPLACE(RTRIM(AVCOLC),'\','\\'),'"','\"') AVCOLC, 
	REPLACE(REPLACE(RTRIM(AVASSC),'\','\\'),'"','\"') AVASSC, 
	REPLACE(REPLACE(RTRIM(AVSASC),'\','\\'),'"','\"') AVSASC, 
	REPLACE(REPLACE(RTRIM(AVLCOIL),'\','\\'),'"','\"') AVLCOIL, 
	REPLACE(REPLACE(RTRIM(AVGDFL),'\','\\'),'"','\"') AVGDFL, 
	REPLACE(REPLACE(RTRIM(AVVDFL),'\','\\'),'"','\"') AVVDFL, 
	REPLACE(REPLACE(RTRIM(AVWOQF),'\','\\'),'"','\"') AVWOQF, 
	REPLACE(REPLACE(RTRIM(AVNMFC),'\','\\'),'"','\"') AVNMFC, 
	AVFUTH, 
	AVFUTI, 
	REPLACE(REPLACE(RTRIM(AVFUTL),'\','\\'),'"','\"') AVFUTL, 
	REPLACE(REPLACE(RTRIM(AVFUTM),'\','\\'),'"','\"') AVFUTM, 
	REPLACE(REPLACE(RTRIM(AVFUTP),'\','\\'),'"','\"') AVFUTP, 
	CHAR(AVFUTQ) AVFUTQ, 
	CHAR(AVFUTR) AVFUTR, 
	AVPRUN, 
	AVTOTP, 
	REPLACE(REPLACE(RTRIM(AVDISC),'\','\\'),'"','\"') AVDISC, 
	REPLACE(REPLACE(RTRIM(AVINVT),'\','\\'),'"','\"') AVINVT, 
	REPLACE(REPLACE(RTRIM(AVBK01),'\','\\'),'"','\"') AVBK01, 
	REPLACE(REPLACE(RTRIM(AVBILL),'\','\\'),'"','\"') AVBILL, 
	REPLACE(REPLACE(RTRIM(AVBK04),'\','\\'),'"','\"') AVBK04, 
	REPLACE(REPLACE(RTRIM(AVBK06),'\','\\'),'"','\"') AVBK06, 
	REPLACE(REPLACE(RTRIM(AVOLDD),'\','\\'),'"','\"') AVOLDD, 
	REPLACE(REPLACE(RTRIM(AVOLDD2),'\','\\'),'"','\"') AVOLDD2, 
	REPLACE(REPLACE(RTRIM(AVLOTF),'\','\\'),'"','\"') AVLOTF, 
	REPLACE(REPLACE(RTRIM(AVSERF),'\','\\'),'"','\"') AVSERF, 
	REPLACE(REPLACE(RTRIM(AVORIG),'\','\\'),'"','\"') AVORIG, 
	REPLACE(REPLACE(RTRIM(AVPLAN),'\','\\'),'"','\"') AVPLAN, 
	AVMINQ, 
	AVMAXQ, 
	AVLEAD, 
	REPLACE(REPLACE(RTRIM(AVSCDT),'\','\\'),'"','\"') AVSCDT, 
	AVESTV, 
	REPLACE(REPLACE(RTRIM(AVCNTR),'\','\\'),'"','\"') AVCNTR, 
	REPLACE(REPLACE(RTRIM(AVUNTP),'\','\\'),'"','\"') AVUNTP, 
	AVLVL, 
	AVMOQT, 
	AVPACK, 
	REPLACE(REPLACE(RTRIM(AVPACU),'\','\\'),'"','\"') AVPACU, 
	AVPRPT, 
	REPLACE(REPLACE(RTRIM(AVKITC),'\','\\'),'"','\"') AVKITC, 
	REPLACE(REPLACE(RTRIM(AVPROC),'\','\\'),'"','\"') AVPROC, 
	REPLACE(REPLACE(RTRIM(AVLRSP),'\','\\'),'"','\"') AVLRSP, 
	AVLRSC, 
	REPLACE(REPLACE(RTRIM(AVLRSF),'\','\\'),'"','\"') AVLRSF, 
	REPLACE(REPLACE(RTRIM(AVLRMP),'\','\\'),'"','\"') AVLRMP, 
	AVLRMC, 
	REPLACE(REPLACE(RTRIM(AVLRMF),'\','\\'),'"','\"') AVLRMF, 
	REPLACE(REPLACE(RTRIM(AVLWSP),'\','\\'),'"','\"') AVLWSP, 
	AVLWSC, 
	REPLACE(REPLACE(RTRIM(AVLWSF),'\','\\'),'"','\"') AVLWSF, 
	REPLACE(REPLACE(RTRIM(AVLCSP),'\','\\'),'"','\"') AVLCSP, 
	AVLCSC, 
	REPLACE(REPLACE(RTRIM(AVLCSF),'\','\\'),'"','\"') AVLCSF, 
	REPLACE(REPLACE(RTRIM(AVLCMP),'\','\\'),'"','\"') AVLCMP, 
	AVLCMC, 
	REPLACE(REPLACE(RTRIM(AVLCMF),'\','\\'),'"','\"') AVLCMF, 
	AVLSSC, 
	REPLACE(REPLACE(RTRIM(AVLSSF),'\','\\'),'"','\"') AVLSSF, 
	REPLACE(REPLACE(RTRIM(AVLSMP),'\','\\'),'"','\"') AVLSMP, 
	AVLSMC, 
	REPLACE(REPLACE(RTRIM(AVLSMF),'\','\\'),'"','\"') AVLSMF, 
	AVMPCK, 
	REPLACE(REPLACE(RTRIM(AVMPKU),'\','\\'),'"','\"') AVMPKU, 
	AVALTF, 
	REPLACE(REPLACE(RTRIM(AVDBUY),'\','\\'),'"','\"') AVDBUY, 
	REPLACE(REPLACE(RTRIM(AVFUT1),'\','\\'),'"','\"') AVFUT1, 
	REPLACE(REPLACE(RTRIM(AVFUT2),'\','\\'),'"','\"') AVFUT2, 
	AVFUT6, 
	REPLACE(REPLACE(RTRIM(AVFUTA),'\','\\'),'"','\"') AVFUTA, 
	AVFUTG, 
	REPLACE(REPLACE(RTRIM(AVRECU),'\','\\'),'"','\"') AVRECU, 
	AVFTMF, 
	REPLACE(REPLACE(RTRIM(AVRECC),'\','\\'),'"','\"') AVRECC, 
	REPLACE(REPLACE(RTRIM(AVFUTJ),'\','\\'),'"','\"') AVFUTJ, 
	REPLACE(REPLACE(RTRIM(AVABCC),'\','\\'),'"','\"') AVABCC, 
	REPLACE(REPLACE(RTRIM(AVCORG),'\','\\'),'"','\"') AVCORG, 
	AVPERC, 
	AVOPTR, 
	AVMULT, 
	AVMINR, 
	AVSHRK, 
	REPLACE(REPLACE(RTRIM(AVSTAT),'\','\\'),'"','\"') AVSTAT, 
	REPLACE(REPLACE(RTRIM(AVREAS),'\','\\'),'"','\"') AVREAS, 
	CHAR(AVSPDT) AVSPDT, 
	CHAR(AVBBDT) AVBBDT, 
	REPLACE(REPLACE(RTRIM(AVPSOR),'\','\\'),'"','\"') AVPSOR, 
	REPLACE(REPLACE(RTRIM(AVFUTO),'\','\\'),'"','\"') AVFUTO, 
	REPLACE(REPLACE(RTRIM(AVDRWS),'\','\\'),'"','\"') AVDRWS, 
	REPLACE(REPLACE(RTRIM(AVDRWL),'\','\\'),'"','\"') AVDRWL, 
	REPLACE(REPLACE(RTRIM(AVDENC),'\','\\'),'"','\"') AVDENC, 
	REPLACE(REPLACE(RTRIM(AVDREL),'\','\\'),'"','\"') AVDREL, 
	CHAR(AVDDAT) AVDDAT, 
	REPLACE(REPLACE(RTRIM(AVFUTE),'\','\\'),'"','\"') AVFUTE, 
	REPLACE(REPLACE(RTRIM(AVDRWS2),'\','\\'),'"','\"') AVDRWS2, 
	REPLACE(REPLACE(RTRIM(AVDRWL2),'\','\\'),'"','\"') AVDRWL2, 
	REPLACE(REPLACE(RTRIM(AVDENC2),'\','\\'),'"','\"') AVDENC2, 
	REPLACE(REPLACE(RTRIM(AVDREL2),'\','\\'),'"','\"') AVDREL2, 
	CHAR(AVDDAT2) AVDDAT2, 
	REPLACE(REPLACE(RTRIM(AVFUTF),'\','\\'),'"','\"') AVFUTF, 
	REPLACE(REPLACE(RTRIM(AVSTCL),'\','\\'),'"','\"') AVSTCL, 
	REPLACE(REPLACE(RTRIM(AVVLCD),'\','\\'),'"','\"') AVVLCD, 
	AVSPPP, 
	REPLACE(REPLACE(RTRIM(AVSPPC),'\','\\'),'"','\"') AVSPPC, 
	AVMPPP, 
	REPLACE(REPLACE(RTRIM(AVMPPC),'\','\\'),'"','\"') AVMPPC, 
	REPLACE(REPLACE(RTRIM(AVFLG01),'\','\\'),'"','\"') AVFLG01, 
	REPLACE(REPLACE(RTRIM(AVFLG02),'\','\\'),'"','\"') AVFLG02, 
	REPLACE(REPLACE(RTRIM(AVFLG03),'\','\\'),'"','\"') AVFLG03, 
	REPLACE(REPLACE(RTRIM(AVFLG04),'\','\\'),'"','\"') AVFLG04, 
	REPLACE(REPLACE(RTRIM(AVFLG05),'\','\\'),'"','\"') AVFLG05, 
	REPLACE(REPLACE(RTRIM(AVFLG06),'\','\\'),'"','\"') AVFLG06, 
	REPLACE(REPLACE(RTRIM(AVFLG07),'\','\\'),'"','\"') AVFLG07, 
	REPLACE(REPLACE(RTRIM(AVFLG08),'\','\\'),'"','\"') AVFLG08, 
	REPLACE(REPLACE(RTRIM(AVFLG09),'\','\\'),'"','\"') AVFLG09, 
	REPLACE(REPLACE(RTRIM(AVFLG10),'\','\\'),'"','\"') AVFLG10, 
	REPLACE(REPLACE(RTRIM(AVFUT01),'\','\\'),'"','\"') AVFUT01, 
	REPLACE(REPLACE(RTRIM(AVFUT02),'\','\\'),'"','\"') AVFUT02, 
	REPLACE(REPLACE(RTRIM(AVFUT03),'\','\\'),'"','\"') AVFUT03, 
	REPLACE(REPLACE(RTRIM(AVFUT04),'\','\\'),'"','\"') AVFUT04, 
	REPLACE(REPLACE(RTRIM(AVFUT05),'\','\\'),'"','\"') AVFUT05, 
	REPLACE(REPLACE(RTRIM(AVFUT06),'\','\\'),'"','\"') AVFUT06, 
	REPLACE(REPLACE(RTRIM(AVFUT07),'\','\\'),'"','\"') AVFUT07, 
	REPLACE(REPLACE(RTRIM(AVFUT08),'\','\\'),'"','\"') AVFUT08, 
	REPLACE(REPLACE(RTRIM(AVFUT09),'\','\\'),'"','\"') AVFUT09, 
	REPLACE(REPLACE(RTRIM(AVFUT10),'\','\\'),'"','\"') AVFUT10, 
	REPLACE(REPLACE(RTRIM(AVFUT11),'\','\\'),'"','\"') AVFUT11, 
	REPLACE(REPLACE(RTRIM(AVFUT12),'\','\\'),'"','\"') AVFUT12, 
	REPLACE(REPLACE(RTRIM(AVFUT13),'\','\\'),'"','\"') AVFUT13, 
	REPLACE(REPLACE(RTRIM(AVFUT14),'\','\\'),'"','\"') AVFUT14, 
	REPLACE(REPLACE(RTRIM(AVFUT15),'\','\\'),'"','\"') AVFUT15, 
	REPLACE(REPLACE(RTRIM(AVFUT16),'\','\\'),'"','\"') AVFUT16, 
	REPLACE(REPLACE(RTRIM(AVFUT17),'\','\\'),'"','\"') AVFUT17, 
	REPLACE(REPLACE(RTRIM(AVFUT18),'\','\\'),'"','\"') AVFUT18, 
	REPLACE(REPLACE(RTRIM(AVFUT19),'\','\\'),'"','\"') AVFUT19, 
	REPLACE(REPLACE(RTRIM(AVFUT20),'\','\\'),'"','\"') AVFUT20, 
	REPLACE(REPLACE(RTRIM(AVFUT21),'\','\\'),'"','\"') AVFUT21, 
	REPLACE(REPLACE(RTRIM(AVFUT22),'\','\\'),'"','\"') AVFUT22, 
	REPLACE(REPLACE(RTRIM(AVFUT23),'\','\\'),'"','\"') AVFUT23, 
	REPLACE(REPLACE(RTRIM(AVFUT24),'\','\\'),'"','\"') AVFUT24, 
	REPLACE(REPLACE(RTRIM(AVFUT25),'\','\\'),'"','\"') AVFUT25, 
	AVFUT26, 
	AVFUT27, 
	AVFUT28, 
	AVFUT29, 
	AVFUT30, 
	AVFUT31, 
	AVFUT32, 
	AVFUT33, 
	AVFUT34, 
	AVFUT35, 
	CHAR(AVFUT36) AVFUT36, 
	CHAR(AVFUT37) AVFUT37, 
	CHAR(AVFUT38) AVFUT38, 
	CHAR(AVFUT39) AVFUT39, 
	CHAR(AVFUT40) AVFUT40, 
	AVFUT41, 
	AVFUT42, 
	AVFUT43, 
	AVFUT44, 
	AVFUT45, 
	REPLACE(REPLACE(RTRIM(AVUDFT),'\','\\'),'"','\"') AVUDFT, 
	REPLACE(REPLACE(RTRIM(AVFRML),'\','\\'),'"','\"') AVFRML, 
	REPLACE(REPLACE(RTRIM(AVHAZA),'\','\\'),'"','\"') AVHAZA, 
	AVLLED, 
	REPLACE(REPLACE(RTRIM(AVDBAC),'\','\\'),'"','\"') AVDBAC, 
	REPLACE(REPLACE(RTRIM(AVSCDPT),'\','\\'),'"','\"') AVSCDPT, 
	REPLACE(REPLACE(RTRIM(AVFIFO),'\','\\'),'"','\"') AVFIFO, 
	REPLACE(REPLACE(RTRIM(AVANTID),'\','\\'),'"','\"') AVANTID, 
	REPLACE(REPLACE(RTRIM(AVSUBT),'\','\\'),'"','\"') AVSUBT, 
	REPLACE(REPLACE(RTRIM(AVPRCL),'\','\\'),'"','\"') AVPRCL, 
	REPLACE(REPLACE(RTRIM(AVOTP),'\','\\'),'"','\"') AVOTP, 
	REPLACE(REPLACE(RTRIM(AVCBYL),'\','\\'),'"','\"') AVCBYL, 
	REPLACE(REPLACE(RTRIM(AVSRVC),'\','\\'),'"','\"') AVSRVC, 
	REPLACE(REPLACE(RTRIM(AVSPAL),'\','\\'),'"','\"') AVSPAL, 
	REPLACE(REPLACE(RTRIM(AVPGRP),'\','\\'),'"','\"') AVPGRP 
	FROM 
		LGDAT.STKMM ; 
  
LABEL ON COLUMN RLARP.V_STKMM 
(AVGTIN IS 'Global              Trade               Item Number', 
	AVNWHT IS 'Net Weight', 
	AVSVOL IS 'Shipping            Volume', 
	AVSLIF IS 'Shelf               Life', 
	AVCTME IS 'Time                Created', 
	AVUTME IS 'Time                Updated', 
	AVFUTH IS 'Future              Use', 
	AVFUTI IS 'Future              Use', 
	AVPRUN IS 'Production          Runs', 
	AVTOTP IS 'Total               Produced', 
	AVMINQ IS 'PLACE               MARKER', 
	AVMAXQ IS 'PLACE               MARKER', 
	AVLEAD IS 'PLACE               MARKER', 
	AVESTV IS 'PLACE               MARKER', 
	AVLVL IS 'PLACE               MARKER', 
	AVMOQT IS 'PLACE               MARKER', 
	AVPACK IS 'PLACE               MARKER', 
	AVPRPT IS 'PLACE               MARKER', 
	AVLRSC IS 'PLACE               MARKER', 
	AVLRMC IS 'PLACE               MARKER', 
	AVLWSC IS 'PLACE               MARKER', 
	AVLCSC IS 'PLACE               MARKER', 
	AVLCMC IS 'PLACE               MARKER', 
	AVLSSC IS 'PLACE               MARKER', 
	AVLSMC IS 'PLACE               MARKER', 
	AVMPCK IS 'PLACE               MARKER', 
	AVALTF IS 'PLACE               MARKER', 
	AVFUT6 IS 'PLACE               MARKER', 
	AVFUTG IS 'PLACE               MARKER', 
	AVFTMF IS 'PLACE               MARKER', 
	AVPERC IS 'PLACE               MARKER', 
	AVOPTR IS 'PLACE               MARKER', 
	AVMULT IS 'PLACE               MARKER', 
	AVMINR IS 'PLACE               MARKER', 
	AVSHRK IS 'PLACE               MARKER', 
	AVSPPP IS 'PLACE               MARKER', 
	AVMPPP IS 'PLACE               MARKER', 
	AVFUT26 IS 'PLACE               MARKER', 
	AVFUT27 IS 'PLACE               MARKER', 
	AVFUT28 IS 'PLACE               MARKER', 
	AVFUT29 IS 'PLACE               MARKER', 
	AVFUT30 IS 'PLACE               MARKER', 
	AVFUT31 IS 'PLACE               MARKER', 
	AVFUT32 IS 'PLACE               MARKER', 
	AVFUT33 IS 'PLACE               MARKER', 
	AVFUT34 IS 'PLACE               MARKER', 
	AVFUT35 IS 'PLACE               MARKER', 
	AVFUT41 IS 'PLACE               MARKER', 
	AVFUT42 IS 'PLACE               MARKER', 
	AVFUT43 IS 'PLACE               MARKER', 
	AVFUT44 IS 'PLACE               MARKER', 
	AVFUT45 IS 'PLACE               MARKER', 
	AVLLED IS 'Longest             Lead Time           (in days)') ; 
  
LABEL ON COLUMN RLARP.V_STKMM 
(AVGTIN TEXT IS 'Global Trade Item Number', 
	AVNWHT TEXT IS 'Net Weight', 
	AVSVOL TEXT IS 'Shipping Volume', 
	AVSLIF TEXT IS 'Shelf Life', 
	AVCTME TEXT IS 'Time Created', 
	AVUTME TEXT IS 'Time Updated', 
	AVFUTH TEXT IS 'Future Use', 
	AVFUTI TEXT IS 'Future Use', 
	AVPRUN TEXT IS 'Production Runs', 
	AVTOTP TEXT IS 'Total Produced', 
	AVMINQ TEXT IS 'PLACE MARKER', 
	AVMAXQ TEXT IS 'PLACE MARKER', 
	AVLEAD TEXT IS 'PLACE MARKER', 
	AVESTV TEXT IS 'PLACE MARKER', 
	AVLVL TEXT IS 'PLACE MARKER', 
	AVMOQT TEXT IS 'PLACE MARKER', 
	AVPACK TEXT IS 'PLACE MARKER', 
	AVPRPT TEXT IS 'PLACE MARKER', 
	AVLRSC TEXT IS 'PLACE MARKER', 
	AVLRMC TEXT IS 'PLACE MARKER', 
	AVLWSC TEXT IS 'PLACE MARKER', 
	AVLCSC TEXT IS 'PLACE MARKER', 
	AVLCMC TEXT IS 'PLACE MARKER', 
	AVLSSC TEXT IS 'PLACE MARKER', 
	AVLSMC TEXT IS 'PLACE MARKER', 
	AVMPCK TEXT IS 'PLACE MARKER', 
	AVALTF TEXT IS 'PLACE MARKER', 
	AVFUT6 TEXT IS 'PLACE MARKER', 
	AVFUTG TEXT IS 'PLACE MARKER', 
	AVFTMF TEXT IS 'PLACE MARKER', 
	AVPERC TEXT IS 'PLACE MARKER', 
	AVOPTR TEXT IS 'PLACE MARKER', 
	AVMULT TEXT IS 'PLACE MARKER', 
	AVMINR TEXT IS 'PLACE MARKER', 
	AVSHRK TEXT IS 'PLACE MARKER', 
	AVSPPP TEXT IS 'PLACE MARKER', 
	AVMPPP TEXT IS 'PLACE MARKER', 
	AVFUT26 TEXT IS 'PLACE MARKER', 
	AVFUT27 TEXT IS 'PLACE MARKER', 
	AVFUT28 TEXT IS 'PLACE MARKER', 
	AVFUT29 TEXT IS 'PLACE MARKER', 
	AVFUT30 TEXT IS 'PLACE MARKER', 
	AVFUT31 TEXT IS 'PLACE MARKER', 
	AVFUT32 TEXT IS 'PLACE MARKER', 
	AVFUT33 TEXT IS 'PLACE MARKER', 
	AVFUT34 TEXT IS 'PLACE MARKER', 
	AVFUT35 TEXT IS 'PLACE MARKER', 
	AVFUT41 TEXT IS 'PLACE MARKER', 
	AVFUT42 TEXT IS 'PLACE MARKER', 
	AVFUT43 TEXT IS 'PLACE MARKER', 
	AVFUT44 TEXT IS 'PLACE MARKER', 
	AVFUT45 TEXT IS 'PLACE MARKER', 
	AVLLED TEXT IS 'Longest Lead Time (in days)') ; 
  
GRANT ALTER, DELETE, INSERT, REFERENCES, SELECT, UPDATE   
ON RLARP.V_STKMM TO PTROWBRIDG WITH GRANT OPTION ; 
  
CREATE VIEW RLARP.V_STKMP (
	AWPART, 
	AWDES1, 
	AWDES2, 
	AWDES3, 
	AWUNTI, 
	AWMAJG, 
	AWMING, 
	AWMAJS, 
	AWMINS, 
	AWGLDC, 
	AWGLED, 
	AWHARM, 
	AWCLSS, 
	AWFUT3, 
	AWFUT4, 
	AWFUT5, 
	AWFUTC, 
	AWFUTD, 
	AWUPCC, 
	AWGTIN, 
	AWNWHT, 
	AWNWUN, 
	AWSVOL, 
	AWSVUN, 
	AWTYPE, 
	AWVEND, 
	AWVPT#, 
	AWREV#, 
	AWENGC, 
	AWREVL, 
	AWRDAT, 
	AWFUT7, 
	AWFUT8, 
	AWFUTB, 
	AWCOIL, 
	AWFUT9, 
	AWMSPC, 
	AWUVER, 
	AWCATA, 
	AWSLIF, 
	AWFUTK, 
	AWFUTN, 
	AWPPAP, 
	AWDPLT, 
	AWGDFL, 
	AWVDFL, 
	AWWOQF, 
	AWLCOIL, 
	AWNMFC, 
	AWSIZC, 
	AWSTLC, 
	AWCOLC, 
	AWASSC, 
	AWSASC, 
	AWCUSR, 
	AWCDAT, 
	AWCTME, 
	AWUUSR, 
	AWUDAT, 
	AWUTME, 
	AWFUTH, 
	AWFUTI, 
	AWFUT6, 
	AWFUTL, 
	AWFUTM, 
	AWFUTO, 
	AWFUTP, 
	AWFUTQ, 
	AWFUTR, 
	AWLDAT, 
	AWLOTF, 
	AWSERF, 
	AWOLDD, 
	AWBK02, 
	AWOLDD2, 
	AWDISC, 
	AWORIG, 
	AWFEDC, 
	AWTAXR, 
	AWBK01, 
	AWBK03, 
	AWBK04, 
	AWBK05, 
	AWINVT, 
	AWCONV, 
	AWUNTO, 
	AWREQC, 
	AWOPTR, 
	AWLEAD, 
	AWCORG, 
	AWCNTR, 
	AWOLA, 
	AWUNTP, 
	AWSHRK, 
	AWLVL, 
	AWMOQT, 
	AWPACK, 
	AWPACU, 
	AWPRPT, 
	AWBUYR, 
	AWAUTY, 
	AWMPQT, 
	AWABCC, 
	AWSTAT, 
	AWPROC, 
	AWLRSP, 
	AWLRSC, 
	AWLRSF, 
	AWLRMP, 
	AWLRMC, 
	AWLRMF, 
	AWLWSP, 
	AWLWSC, 
	AWLWSF, 
	AWLCSP, 
	AWLCSC, 
	AWLCSF, 
	AWLCMP, 
	AWLCMC, 
	AWLCMF, 
	AWLSSC, 
	AWLSSF, 
	AWLSMP, 
	AWLSMC, 
	AWLSMF, 
	AWMPCK, 
	AWMPKU, 
	AWFUTJ, 
	AWFUTG, 
	AWDBUY, 
	AWPERC, 
	AWREAS, 
	AWFUT1, 
	AWFUT2, 
	AWALTF, 
	AWFTMF, 
	AWRECU, 
	AWRECC, 
	AWPSOR, 
	AWFUTA, 
	AWSCDT, 
	AWDRWS, 
	AWDRWL, 
	AWDENC, 
	AWDREL, 
	AWDDAT, 
	AWDRWS2, 
	AWDRWL2, 
	AWDENC2, 
	AWDREL2, 
	AWDDAT2, 
	AWFUTE, 
	AWFUTF, 
	AWSTCL, 
	AWVLCD, 
	AWSPPP, 
	AWSPPC, 
	AWMPPP, 
	AWMPPC, 
	AWFLG01, 
	AWFLG02, 
	AWFLG03, 
	AWFLG04, 
	AWFLG05, 
	AWFLG06, 
	AWFLG07, 
	AWFLG08, 
	AWFLG09, 
	AWFLG10, 
	AWFUT01, 
	AWFUT02, 
	AWFUT03, 
	AWFUT04, 
	AWFUT05, 
	AWFUT06, 
	AWFUT07, 
	AWFUT08, 
	AWFUT09, 
	AWFUT10, 
	AWFUT11, 
	AWFUT12, 
	AWFUT13, 
	AWFUT14, 
	AWFUT15, 
	AWFUT16, 
	AWFUT17, 
	AWFUT18, 
	AWFUT19, 
	AWFUT20, 
	AWFUT21, 
	AWFUT22, 
	AWFUT23, 
	AWFUT24, 
	AWFUT25, 
	AWFUT26, 
	AWFUT27, 
	AWFUT28, 
	AWFUT29, 
	AWFUT30, 
	AWFUT31, 
	AWFUT32, 
	AWFUT33, 
	AWFUT34, 
	AWFUT35, 
	AWFUT36, 
	AWFUT37, 
	AWFUT38, 
	AWFUT39, 
	AWFUT40, 
	AWFUT41, 
	AWFUT42, 
	AWFUT43, 
	AWFUT44, 
	AWFUT45, 
	AWUDFT, 
	AWFRML, 
	AWHAZA, 
	AWLLED, 
	AWDBAC, 
	AWSCDPT, 
	AWFIFO, 
	AWANTID, 
	AWSUBT, 
	AWPRCL, 
	AWOTP, 
	AWCBYL, 
	AWSRVC, 
	AWSPAL, 
	AWPGRP) 
	AS 
	SELECT	REPLACE(REPLACE(RTRIM(AWPART),'\','\\'),'"','\"') AWPART,	REPLACE(REPLACE(RTRIM(AWDES1),'\','\\'),'"','\"') AWDES1,	REPLACE(REPLACE(RTRIM(AWDES2),'\','\\'),'"','\"') AWDES2,	REPLACE(REPLACE(RTRIM(AWDES3),'\','\\'),'"','\"') AWDES3,	REPLACE(REPLACE(RTRIM(AWUNTI),'\','\\'),'"','\"') AWUNTI,	REPLACE(REPLACE(RTRIM(AWMAJG),'\','\\'),'"','\"') AWMAJG,	REPLACE(REPLACE(RTRIM(AWMING),'\','\\'),'"','\"') AWMING,	REPLACE(REPLACE(RTRIM(AWMAJS),'\','\\'),'"','\"') AWMAJS,	REPLACE(REPLACE(RTRIM(AWMINS),'\','\\'),'"','\"') AWMINS,	REPLACE(REPLACE(RTRIM(AWGLDC),'\','\\'),'"','\"') AWGLDC,	REPLACE(REPLACE(RTRIM(AWGLED),'\','\\'),'"','\"') AWGLED,	REPLACE(REPLACE(RTRIM(AWHARM),'\','\\'),'"','\"') AWHARM,	REPLACE(REPLACE(RTRIM(AWCLSS),'\','\\'),'"','\"') AWCLSS,	REPLACE(REPLACE(RTRIM(AWFUT3),'\','\\'),'"','\"') AWFUT3,	REPLACE(REPLACE(RTRIM(AWFUT4),'\','\\'),'"','\"') AWFUT4,	REPLACE(REPLACE(RTRIM(AWFUT5),'\','\\'),'"','\"') AWFUT5,	REPLACE(REPLACE(RTRIM(AWFUTC),'\','\\'),'"','\"') AWFUTC,	REPLACE(REPLACE(RTRIM(AWFUTD),'\','\\'),'"','\"') AWFUTD,	REPLACE(REPLACE(RTRIM(AWUPCC),'\','\\'),'"','\"') AWUPCC,	AWGTIN,	AWNWHT,	REPLACE(REPLACE(RTRIM(AWNWUN),'\','\\'),'"','\"') AWNWUN,	AWSVOL,	REPLACE(REPLACE(RTRIM(AWSVUN),'\','\\'),'"','\"') AWSVUN,	REPLACE(REPLACE(RTRIM(AWTYPE),'\','\\'),'"','\"') AWTYPE,	REPLACE(REPLACE(RTRIM(AWVEND),'\','\\'),'"','\"') AWVEND,	REPLACE(REPLACE(RTRIM(AWVPT#),'\','\\'),'"','\"') AWVPT#,	REPLACE(REPLACE(RTRIM(AWREV#),'\','\\'),'"','\"') AWREV#,	REPLACE(REPLACE(RTRIM(AWENGC),'\','\\'),'"','\"') AWENGC,	REPLACE(REPLACE(RTRIM(AWREVL),'\','\\'),'"','\"') AWREVL,	CHAR(AWRDAT) AWRDAT,	REPLACE(REPLACE(RTRIM(AWFUT7),'\','\\'),'"','\"') AWFUT7,	REPLACE(REPLACE(RTRIM(AWFUT8),'\','\\'),'"','\"') AWFUT8,	REPLACE(REPLACE(RTRIM(AWFUTB),'\','\\'),'"','\"') AWFUTB,	REPLACE(REPLACE(RTRIM(AWCOIL),'\','\\'),'"','\"') AWCOIL,	REPLACE(REPLACE(RTRIM(AWFUT9),'\','\\'),'"','\"') AWFUT9,	REPLACE(REPLACE(RTRIM(AWMSPC),'\','\\'),'"','\"') AWMSPC,	REPLACE(REPLACE(RTRIM(AWUVER),'\','\\'),'"','\"') AWUVER,	REPLACE(REPLACE(RTRIM(AWCATA),'\','\\'),'"','\"') AWCATA,	AWSLIF,	REPLACE(REPLACE(RTRIM(AWFUTK),'\','\\'),'"','\"') AWFUTK,	REPLACE(REPLACE(RTRIM(AWFUTN),'\','\\'),'"','\"') AWFUTN,	REPLACE(REPLACE(RTRIM(AWPPAP),'\','\\'),'"','\"') AWPPAP,	REPLACE(REPLACE(RTRIM(AWDPLT),'\','\\'),'"','\"') AWDPLT,	REPLACE(REPLACE(RTRIM(AWGDFL),'\','\\'),'"','\"') AWGDFL,	REPLACE(REPLACE(RTRIM(AWVDFL),'\','\\'),'"','\"') AWVDFL,	REPLACE(REPLACE(RTRIM(AWWOQF),'\','\\'),'"','\"') AWWOQF,	REPLACE(REPLACE(RTRIM(AWLCOIL),'\','\\'),'"','\"') AWLCOIL,	REPLACE(REPLACE(RTRIM(AWNMFC),'\','\\'),'"','\"') AWNMFC,	REPLACE(REPLACE(RTRIM(AWSIZC),'\','\\'),'"','\"') AWSIZC,	REPLACE(REPLACE(RTRIM(AWSTLC),'\','\\'),'"','\"') AWSTLC,	REPLACE(REPLACE(RTRIM(AWCOLC),'\','\\'),'"','\"') AWCOLC,	REPLACE(REPLACE(RTRIM(AWASSC),'\','\\'),'"','\"') AWASSC,	REPLACE(REPLACE(RTRIM(AWSASC),'\','\\'),'"','\"') AWSASC,	REPLACE(REPLACE(RTRIM(AWCUSR),'\','\\'),'"','\"') AWCUSR,	CHAR(AWCDAT) AWCDAT,	AWCTME,	REPLACE(REPLACE(RTRIM(AWUUSR),'\','\\'),'"','\"') AWUUSR,	CHAR(AWUDAT) AWUDAT,	AWUTME,	AWFUTH,	AWFUTI,	AWFUT6,	REPLACE(REPLACE(RTRIM(AWFUTL),'\','\\'),'"','\"') AWFUTL,	REPLACE(REPLACE(RTRIM(AWFUTM),'\','\\'),'"','\"') AWFUTM,	REPLACE(REPLACE(RTRIM(AWFUTO),'\','\\'),'"','\"') AWFUTO,	REPLACE(REPLACE(RTRIM(AWFUTP),'\','\\'),'"','\"') AWFUTP,	CHAR(AWFUTQ) AWFUTQ,	CHAR(AWFUTR) AWFUTR,	CHAR(AWLDAT) AWLDAT,	REPLACE(REPLACE(RTRIM(AWLOTF),'\','\\'),'"','\"') AWLOTF,	REPLACE(REPLACE(RTRIM(AWSERF),'\','\\'),'"','\"') AWSERF,	REPLACE(REPLACE(RTRIM(AWOLDD),'\','\\'),'"','\"') AWOLDD,	REPLACE(REPLACE(RTRIM(AWBK02),'\','\\'),'"','\"') AWBK02,	REPLACE(REPLACE(RTRIM(AWOLDD2),'\','\\'),'"','\"') AWOLDD2,	REPLACE(REPLACE(RTRIM(AWDISC),'\','\\'),'"','\"') AWDISC,	REPLACE(REPLACE(RTRIM(AWORIG),'\','\\'),'"','\"') AWORIG,	REPLACE(REPLACE(RTRIM(AWFEDC),'\','\\'),'"','\"') AWFEDC,	REPLACE(REPLACE(RTRIM(AWTAXR),'\','\\'),'"','\"') AWTAXR,	REPLACE(REPLACE(RTRIM(AWBK01),'\','\\'),'"','\"') AWBK01,	REPLACE(REPLACE(RTRIM(AWBK03),'\','\\'),'"','\"') AWBK03,	REPLACE(REPLACE(RTRIM(AWBK04),'\','\\'),'"','\"') AWBK04,	REPLACE(REPLACE(RTRIM(AWBK05),'\','\\'),'"','\"') AWBK05,	REPLACE(REPLACE(RTRIM(AWINVT),'\','\\'),'"','\"') AWINVT,	AWCONV,	REPLACE(REPLACE(RTRIM(AWUNTO),'\','\\'),'"','\"') AWUNTO,	REPLACE(REPLACE(RTRIM(AWREQC),'\','\\'),'"','\"') AWREQC,	AWOPTR,	AWLEAD,	REPLACE(REPLACE(RTRIM(AWCORG),'\','\\'),'"','\"') AWCORG,	REPLACE(REPLACE(RTRIM(AWCNTR),'\','\\'),'"','\"') AWCNTR,	AWOLA,	REPLACE(REPLACE(RTRIM(AWUNTP),'\','\\'),'"','\"') AWUNTP,	AWSHRK,	AWLVL,	AWMOQT,	AWPACK,	REPLACE(REPLACE(RTRIM(AWPACU),'\','\\'),'"','\"') AWPACU,	AWPRPT,	REPLACE(REPLACE(RTRIM(AWBUYR),'\','\\'),'"','\"') AWBUYR,	REPLACE(REPLACE(RTRIM(AWAUTY),'\','\\'),'"','\"') AWAUTY,	AWMPQT,	REPLACE(REPLACE(RTRIM(AWABCC),'\','\\'),'"','\"') AWABCC,	REPLACE(REPLACE(RTRIM(AWSTAT),'\','\\'),'"','\"') AWSTAT,	REPLACE(REPLACE(RTRIM(AWPROC),'\','\\'),'"','\"') AWPROC,	REPLACE(REPLACE(RTRIM(AWLRSP),'\','\\'),'"','\"') AWLRSP,	AWLRSC,	REPLACE(REPLACE(RTRIM(AWLRSF),'\','\\'),'"','\"') AWLRSF,	REPLACE(REPLACE(RTRIM(AWLRMP),'\','\\'),'"','\"') AWLRMP,	AWLRMC,	REPLACE(REPLACE(RTRIM(AWLRMF),'\','\\'),'"','\"') AWLRMF,	REPLACE(REPLACE(RTRIM(AWLWSP),'\','\\'),'"','\"') AWLWSP,	AWLWSC,	REPLACE(REPLACE(RTRIM(AWLWSF),'\','\\'),'"','\"') AWLWSF,	REPLACE(REPLACE(RTRIM(AWLCSP),'\','\\'),'"','\"') AWLCSP,	AWLCSC,	REPLACE(REPLACE(RTRIM(AWLCSF),'\','\\'),'"','\"') AWLCSF,	REPLACE(REPLACE(RTRIM(AWLCMP),'\','\\'),'"','\"') AWLCMP,	AWLCMC,	REPLACE(REPLACE(RTRIM(AWLCMF),'\','\\'),'"','\"') AWLCMF,	AWLSSC,	REPLACE(REPLACE(RTRIM(AWLSSF),'\','\\'),'"','\"') AWLSSF,	REPLACE(REPLACE(RTRIM(AWLSMP),'\','\\'),'"','\"') AWLSMP,	AWLSMC,	REPLACE(REPLACE(RTRIM(AWLSMF),'\','\\'),'"','\"') AWLSMF,	AWMPCK,	REPLACE(REPLACE(RTRIM(AWMPKU),'\','\\'),'"','\"') AWMPKU,	REPLACE(REPLACE(RTRIM(AWFUTJ),'\','\\'),'"','\"') AWFUTJ,	AWFUTG,	REPLACE(REPLACE(RTRIM(AWDBUY),'\','\\'),'"','\"') AWDBUY,	AWPERC,	REPLACE(REPLACE(RTRIM(AWREAS),'\','\\'),'"','\"') AWREAS,	REPLACE(REPLACE(RTRIM(AWFUT1),'\','\\'),'"','\"') AWFUT1,	REPLACE(REPLACE(RTRIM(AWFUT2),'\','\\'),'"','\"') AWFUT2,	AWALTF,	AWFTMF,	REPLACE(REPLACE(RTRIM(AWRECU),'\','\\'),'"','\"') AWRECU,	REPLACE(REPLACE(RTRIM(AWRECC),'\','\\'),'"','\"') AWRECC,	REPLACE(REPLACE(RTRIM(AWPSOR),'\','\\'),'"','\"') AWPSOR,	REPLACE(REPLACE(RTRIM(AWFUTA),'\','\\'),'"','\"') AWFUTA,	REPLACE(REPLACE(RTRIM(AWSCDT),'\','\\'),'"','\"') AWSCDT,	REPLACE(REPLACE(RTRIM(AWDRWS),'\','\\'),'"','\"') AWDRWS,	REPLACE(REPLACE(RTRIM(AWDRWL),'\','\\'),'"','\"') AWDRWL,	REPLACE(REPLACE(RTRIM(AWDENC),'\','\\'),'"','\"') AWDENC,	REPLACE(REPLACE(RTRIM(AWDREL),'\','\\'),'"','\"') AWDREL,	CHAR(AWDDAT) AWDDAT,	REPLACE(REPLACE(RTRIM(AWDRWS2),'\','\\'),'"','\"') AWDRWS2,	REPLACE(REPLACE(RTRIM(AWDRWL2),'\','\\'),'"','\"') AWDRWL2,	REPLACE(REPLACE(RTRIM(AWDENC2),'\','\\'),'"','\"') AWDENC2,	REPLACE(REPLACE(RTRIM(AWDREL2),'\','\\'),'"','\"') AWDREL2,	CHAR(AWDDAT2) AWDDAT2,	REPLACE(REPLACE(RTRIM(AWFUTE),'\','\\'),'"','\"') AWFUTE,	REPLACE(REPLACE(RTRIM(AWFUTF),'\','\\'),'"','\"') AWFUTF,	REPLACE(REPLACE(RTRIM(AWSTCL),'\','\\'),'"','\"') AWSTCL,	REPLACE(REPLACE(RTRIM(AWVLCD),'\','\\'),'"','\"') AWVLCD,	AWSPPP,	REPLACE(REPLACE(RTRIM(AWSPPC),'\','\\'),'"','\"') AWSPPC,	AWMPPP,	REPLACE(REPLACE(RTRIM(AWMPPC),'\','\\'),'"','\"') AWMPPC,	REPLACE(REPLACE(RTRIM(AWFLG01),'\','\\'),'"','\"') AWFLG01,	REPLACE(REPLACE(RTRIM(AWFLG02),'\','\\'),'"','\"') AWFLG02,	REPLACE(REPLACE(RTRIM(AWFLG03),'\','\\'),'"','\"') AWFLG03,	REPLACE(REPLACE(RTRIM(AWFLG04),'\','\\'),'"','\"') AWFLG04,	REPLACE(REPLACE(RTRIM(AWFLG05),'\','\\'),'"','\"') AWFLG05,	REPLACE(REPLACE(RTRIM(AWFLG06),'\','\\'),'"','\"') AWFLG06,	REPLACE(REPLACE(RTRIM(AWFLG07),'\','\\'),'"','\"') AWFLG07,	REPLACE(REPLACE(RTRIM(AWFLG08),'\','\\'),'"','\"') AWFLG08,	REPLACE(REPLACE(RTRIM(AWFLG09),'\','\\'),'"','\"') AWFLG09,	REPLACE(REPLACE(RTRIM(AWFLG10),'\','\\'),'"','\"') AWFLG10,	REPLACE(REPLACE(RTRIM(AWFUT01),'\','\\'),'"','\"') AWFUT01,	REPLACE(REPLACE(RTRIM(AWFUT02),'\','\\'),'"','\"') AWFUT02,	REPLACE(REPLACE(RTRIM(AWFUT03),'\','\\'),'"','\"') AWFUT03,	REPLACE(REPLACE(RTRIM(AWFUT04),'\','\\'),'"','\"') AWFUT04,	REPLACE(REPLACE(RTRIM(AWFUT05),'\','\\'),'"','\"') AWFUT05,	REPLACE(REPLACE(RTRIM(AWFUT06),'\','\\'),'"','\"') AWFUT06,	REPLACE(REPLACE(RTRIM(AWFUT07),'\','\\'),'"','\"') AWFUT07,	REPLACE(REPLACE(RTRIM(AWFUT08),'\','\\'),'"','\"') AWFUT08,	REPLACE(REPLACE(RTRIM(AWFUT09),'\','\\'),'"','\"') AWFUT09,	REPLACE(REPLACE(RTRIM(AWFUT10),'\','\\'),'"','\"') AWFUT10,	REPLACE(REPLACE(RTRIM(AWFUT11),'\','\\'),'"','\"') AWFUT11,	REPLACE(REPLACE(RTRIM(AWFUT12),'\','\\'),'"','\"') AWFUT12,	REPLACE(REPLACE(RTRIM(AWFUT13),'\','\\'),'"','\"') AWFUT13,	REPLACE(REPLACE(RTRIM(AWFUT14),'\','\\'),'"','\"') AWFUT14,	REPLACE(REPLACE(RTRIM(AWFUT15),'\','\\'),'"','\"') AWFUT15,	REPLACE(REPLACE(RTRIM(AWFUT16),'\','\\'),'"','\"') AWFUT16,	REPLACE(REPLACE(RTRIM(AWFUT17),'\','\\'),'"','\"') AWFUT17,	REPLACE(REPLACE(RTRIM(AWFUT18),'\','\\'),'"','\"') AWFUT18,	REPLACE(REPLACE(RTRIM(AWFUT19),'\','\\'),'"','\"') AWFUT19,	REPLACE(REPLACE(RTRIM(AWFUT20),'\','\\'),'"','\"') AWFUT20,	REPLACE(REPLACE(RTRIM(AWFUT21),'\','\\'),'"','\"') AWFUT21,	REPLACE(REPLACE(RTRIM(AWFUT22),'\','\\'),'"','\"') AWFUT22,	REPLACE(REPLACE(RTRIM(AWFUT23),'\','\\'),'"','\"') AWFUT23,	REPLACE(REPLACE(RTRIM(AWFUT24),'\','\\'),'"','\"') AWFUT24,	REPLACE(REPLACE(RTRIM(AWFUT25),'\','\\'),'"','\"') AWFUT25,	AWFUT26,	AWFUT27,	AWFUT28,	AWFUT29,	AWFUT30,	AWFUT31,	AWFUT32,	AWFUT33,	AWFUT34,	AWFUT35,	CHAR(AWFUT36) AWFUT36,	CHAR(AWFUT37) AWFUT37,	CHAR(AWFUT38) AWFUT38,	CHAR(AWFUT39) AWFUT39,	CHAR(AWFUT40) AWFUT40,	AWFUT41,	AWFUT42,	AWFUT43,	AWFUT44,	AWFUT45,	REPLACE(REPLACE(RTRIM(AWUDFT),'\','\\'),'"','\"') AWUDFT,	REPLACE(REPLACE(RTRIM(AWFRML),'\','\\'),'"','\"') AWFRML,	REPLACE(REPLACE(RTRIM(AWHAZA),'\','\\'),'"','\"') AWHAZA,	AWLLED,	REPLACE(REPLACE(RTRIM(AWDBAC),'\','\\'),'"','\"') AWDBAC,	REPLACE(REPLACE(RTRIM(AWSCDPT),'\','\\'),'"','\"') AWSCDPT,	REPLACE(REPLACE(RTRIM(AWFIFO),'\','\\'),'"','\"') AWFIFO,	REPLACE(REPLACE(RTRIM(AWANTID),'\','\\'),'"','\"') AWANTID,	REPLACE(REPLACE(RTRIM(AWSUBT),'\','\\'),'"','\"') AWSUBT,	REPLACE(REPLACE(RTRIM(AWPRCL),'\','\\'),'"','\"') AWPRCL,	REPLACE(REPLACE(RTRIM(AWOTP),'\','\\'),'"','\"') AWOTP,	REPLACE(REPLACE(RTRIM(AWCBYL),'\','\\'),'"','\"') AWCBYL,	REPLACE(REPLACE(RTRIM(AWSRVC),'\','\\'),'"','\"') AWSRVC,	REPLACE(REPLACE(RTRIM(AWSPAL),'\','\\'),'"','\"') AWSPAL,	REPLACE(REPLACE(RTRIM(AWPGRP),'\','\\'),'"','\"') AWPGRP	FROM	LGDAT.STKMP ; 
  
LABEL ON COLUMN RLARP.V_STKMP 
(AWGTIN IS 'Global              Trade               Item Number', 
	AWNWHT IS 'Net Weight', 
	AWSVOL IS 'Shipping            Volume', 
	AWSLIF IS 'Shelf               Life', 
	AWCTME IS 'Time                Created', 
	AWUTME IS 'Time                Updated', 
	AWFUTH IS 'Future              Use', 
	AWFUTI IS 'Future              Use', 
	AWFUT6 IS 'Future              Use', 
	AWCONV IS 'Conversion          Factor', 
	AWOPTR IS 'PLACE               MARKER', 
	AWLEAD IS 'PLACE               MARKER', 
	AWOLA IS 'PLACE               MARKER', 
	AWSHRK IS 'PLACE               MARKER', 
	AWLVL IS 'PLACE               MARKER', 
	AWMOQT IS 'PLACE               MARKER', 
	AWPACK IS 'PLACE               MARKER', 
	AWPRPT IS 'PLACE               MARKER', 
	AWMPQT IS 'PLACE               MARKER', 
	AWLRSC IS 'PLACE               MARKER', 
	AWLRMC IS 'PLACE               MARKER', 
	AWLWSC IS 'PLACE               MARKER', 
	AWLCSC IS 'PLACE               MARKER', 
	AWLCMC IS 'PLACE               MARKER', 
	AWLSSC IS 'PLACE               MARKER', 
	AWLSMC IS 'PLACE               MARKER', 
	AWMPCK IS 'PLACE               MARKER', 
	AWFUTG IS 'PLACE               MARKER', 
	AWPERC IS 'PLACE               MARKER', 
	AWALTF IS 'PLACE               MARKER', 
	AWFTMF IS 'PLACE               MARKER', 
	AWSPPP IS 'PLACE               MARKER', 
	AWMPPP IS 'PLACE               MARKER', 
	AWFUT26 IS 'PLACE               MARKER', 
	AWFUT27 IS 'PLACE               MARKER', 
	AWFUT28 IS 'PLACE               MARKER', 
	AWFUT29 IS 'PLACE               MARKER', 
	AWFUT30 IS 'PLACE               MARKER', 
	AWFUT31 IS 'PLACE               MARKER', 
	AWFUT32 IS 'PLACE               MARKER', 
	AWFUT33 IS 'PLACE               MARKER', 
	AWFUT34 IS 'PLACE               MARKER', 
	AWFUT35 IS 'PLACE               MARKER', 
	AWFUT41 IS 'PLACE               MARKER', 
	AWFUT42 IS 'PLACE               MARKER', 
	AWFUT43 IS 'PLACE               MARKER', 
	AWFUT44 IS 'PLACE               MARKER', 
	AWFUT45 IS 'PLACE               MARKER', 
	AWLLED IS 'Longest             Lead Time           (in days)') ; 
  
LABEL ON COLUMN RLARP.V_STKMP 
(AWGTIN TEXT IS 'Global Trade Item Number', 
	AWNWHT TEXT IS 'Net Weight', 
	AWSVOL TEXT IS 'Shipping Volume', 
	AWSLIF TEXT IS 'Shelf Life', 
	AWCTME TEXT IS 'Time Created', 
	AWUTME TEXT IS 'Time Updated', 
	AWFUTH TEXT IS 'Future Use', 
	AWFUTI TEXT IS 'Future Use', 
	AWFUT6 TEXT IS 'Future Use', 
	AWCONV TEXT IS 'Conversion Factor', 
	AWOPTR TEXT IS 'PLACE MARKER', 
	AWLEAD TEXT IS 'PLACE MARKER', 
	AWOLA TEXT IS 'PLACE MARKER', 
	AWSHRK TEXT IS 'PLACE MARKER', 
	AWLVL TEXT IS 'PLACE MARKER', 
	AWMOQT TEXT IS 'PLACE MARKER', 
	AWPACK TEXT IS 'PLACE MARKER', 
	AWPRPT TEXT IS 'PLACE MARKER', 
	AWMPQT TEXT IS 'PLACE MARKER', 
	AWLRSC TEXT IS 'PLACE MARKER', 
	AWLRMC TEXT IS 'PLACE MARKER', 
	AWLWSC TEXT IS 'PLACE MARKER', 
	AWLCSC TEXT IS 'PLACE MARKER', 
	AWLCMC TEXT IS 'PLACE MARKER', 
	AWLSSC TEXT IS 'PLACE MARKER', 
	AWLSMC TEXT IS 'PLACE MARKER', 
	AWMPCK TEXT IS 'PLACE MARKER', 
	AWFUTG TEXT IS 'PLACE MARKER', 
	AWPERC TEXT IS 'PLACE MARKER', 
	AWALTF TEXT IS 'PLACE MARKER', 
	AWFTMF TEXT IS 'PLACE MARKER', 
	AWSPPP TEXT IS 'PLACE MARKER', 
	AWMPPP TEXT IS 'PLACE MARKER', 
	AWFUT26 TEXT IS 'PLACE MARKER', 
	AWFUT27 TEXT IS 'PLACE MARKER', 
	AWFUT28 TEXT IS 'PLACE MARKER', 
	AWFUT29 TEXT IS 'PLACE MARKER', 
	AWFUT30 TEXT IS 'PLACE MARKER', 
	AWFUT31 TEXT IS 'PLACE MARKER', 
	AWFUT32 TEXT IS 'PLACE MARKER', 
	AWFUT33 TEXT IS 'PLACE MARKER', 
	AWFUT34 TEXT IS 'PLACE MARKER', 
	AWFUT35 TEXT IS 'PLACE MARKER', 
	AWFUT41 TEXT IS 'PLACE MARKER', 
	AWFUT42 TEXT IS 'PLACE MARKER', 
	AWFUT43 TEXT IS 'PLACE MARKER', 
	AWFUT44 TEXT IS 'PLACE MARKER', 
	AWFUT45 TEXT IS 'PLACE MARKER', 
	AWLLED TEXT IS 'Longest Lead Time (in days)') ; 
  
GRANT ALTER, DELETE, INSERT, REFERENCES, SELECT, UPDATE   
ON RLARP.V_STKMP TO PTROWBRIDG WITH GRANT OPTION ; 
  
CREATE VIEW RLARP.V_TBJC (
	COMP, 
	PLNT, 
	ACC, 
	ACCT_AND_DESCR FOR COLUMN ACCT_00001, 
	PRIME, 
	AZTITL, 
	INACTIVE, 
	GLCC, 
	ELIM_TYPE, 
	ELIM_REL, 
	ELIM_DFGRP, 
	ELIM_CO, 
	FSPR, 
	CAPR, 
	SDAT, 
	EDAT, 
	FGRP, 
	STMT, 
	LVL0, 
	LVL1, 
	LVL2, 
	LVL3, 
	EBITDA, 
	DEPARTMENT, 
	DEP_GRP, 
	CURR, 
	OPEN_LOCAL, 
	NET_LOCAL, 
	END_LOCAL, 
	BDGT_LOCAL, 
	USD_OPEN, 
	USD_NET, 
	USD_END, 
	USD_BDGT) 
	AS 
	SELECT  
			SUBSTR(ACC,1,2) AS COMP,  
			SUBSTR(ACC,3,2) PLNT,  
			ACC, 
			ACC||' - '||RTRIM(AZTITL) ACCT_AND_DESCR,  
			SUBSTR(ACC,7,4) PRIME,  
			AZTITL,  
			AZSTAT INACTIVE,  
			AZFUT3 GLCC,  
			RTRIM(D35DES3) ELIM_TYPE,  
			RTRIM(D35USR1) ELIM_REL,  
			RTRIM(D35USR2) ELIM_DFGRP, 
			SUBSTR(DIGITS(D35USR4),9,2) ELIM_CO, 
			B.PERD FSPR,  
			CAPR,  
			SDAT,  
			EDAT,  
			AZGROP||' - '||RTRIM(TL.BQ1TITL) FGRP,  
			CASE WHEN AZATYP <= 3  
			THEN 'BALANCE SHEET'  
				ELSE 'INCOME STATEMENT'  
			END STMT,  
			AZATYP||' - '||RTRIM(SUBSTR(A249,1,30)) LVL0,  
			CASE LENGTH(RTRIM(AZGROP))  
			WHEN 3 THEN SUBSTR(AZGROP,2,2)||' - '||RTRIM(TL.BQ1TITL)  
			ELSE SUBSTR(AZGROP,2,2)||' - '||RTRIM(FA.BQ1TITL)  
			END LVL1,  
			CASE LENGTH(RTRIM(AZGROP))  
			WHEN 3 THEN '----------->'  
			WHEN 5 THEN SUBSTR(AZGROP,4,2)||' - '||RTRIM(TL.BQ1TITL)  
			ELSE SUBSTR(FB.BQ1GRP,4,2)||' - '||RTRIM(FB.BQ1TITL)  
			END LVL2,  
			CASE LENGTH(RTRIM(AZGROP))  
			WHEN 3 THEN '----------->'  
			WHEN 5 THEN '----------->'  
			ELSE SUBSTR(TL.BQ1GRP,6,2)||' - '||RTRIM(TL.BQ1TITL)  
			END LVL3,  
			RTRIM(D35DES1) EBITDA,  
			RTRIM(SUBSTR(ACC,5,2)||CASE WHEN LENGTH(RTRIM(D35DES2)) >0 THEN ' - '||D35DES2 ELSE '' END) DEPARTMENT,  
			RTRIM(D35USR3) DEP_GRP,  
			AZFUT2 CURR, 
			B.OB OPEN_LOCAL,  
			B.NT NET_LOCAL,  
			B.EB END_LOCAL,  
			B.BG BDGT_LOCAL,  
			B.OB * RATE USD_OPEN,  
			B.NT * RATE USD_NET,  
			B.EB * RATE USD_END,  
			B.BG * RATE USD_BDGT  
		FROM 	  
			(
				SELECT  
					AJ4CCYY, P.ACC, AZTITL, AZSTAT, AZATYP, AZGROP, AZFUT3, AZFUT2, P.PERD, P.OB, P.NT, P.EB, P.BG, P.FC  
				FROM  
					LGDAT.GLMT B,  
					LGDAT.MAST M,  
					TABLE (VALUES  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'01', AJ4OB01, AJ4TT01, AJ4OB01+AJ4TT01, AJ4CB01, AJ4FR01),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'02', AJ4OB02, AJ4TT02, AJ4OB02+AJ4TT02, AJ4CB02, AJ4FR02),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'03', AJ4OB03, AJ4TT03, AJ4OB03+AJ4TT03, AJ4CB03, AJ4FR03),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'04', AJ4OB04, AJ4TT04, AJ4OB04+AJ4TT04, AJ4CB04, AJ4FR04),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'05', AJ4OB05, AJ4TT05, AJ4OB05+AJ4TT05, AJ4CB05, AJ4FR05),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'06', AJ4OB06, AJ4TT06, AJ4OB06+AJ4TT06, AJ4CB06, AJ4FR06),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'07', AJ4OB07, AJ4TT07, AJ4OB07+AJ4TT07, AJ4CB07, AJ4FR07),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'08', AJ4OB08, AJ4TT08, AJ4OB08+AJ4TT08, AJ4CB08, AJ4FR08),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'09', AJ4OB09, AJ4TT09, AJ4OB09+AJ4TT09, AJ4CB09, AJ4FR09),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'10', AJ4OB10, AJ4TT10, AJ4OB10+AJ4TT10, AJ4CB10, AJ4FR0A),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'11', AJ4OB11, AJ4TT11, AJ4OB11+AJ4TT11, AJ4CB11, AJ4FR0B),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'12', AJ4OB12, AJ4TT12, AJ4OB12+AJ4TT12, AJ4CB12, AJ4FR0C),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'13', AJ4OB13, AJ4TT13, AJ4OB13+AJ4TT13, AJ4CB13, AJ4FR0D),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'14', AJ4OB14, AJ4TT14, AJ4OB14+AJ4TT14, AJ4CB14, AJ4FR0E),  
						(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'15', AJ4OB15, AJ4TT15, AJ4OB15+AJ4TT15, AJ4CB15, AJ4FR0F)  
					) AS P(ACC, PERD, OB, NT, EB, BG, FC)  
				WHERE  
					AJ4CCYY >= 2015 AND 
					AZCOMP = AJ4COMP AND  
					AZGL#1 = AJ4GL#1 AND  
					AZGL#2 = AJ4GL#2 AND  
					(P.OB <> 0 OR P.NT <> 0 OR P.EB <> 0 OR P.BG <> 0 OR P.FC <> 0)  
			) B 
			LEFT OUTER JOIN LGDAT.GGTP ON  
				D35GCDE = AZFUT3  
			LEFT OUTER JOIN LGDAT.NAME N ON  
				SUBSTR(N.A7,7,1) = AZATYP AND  
				SUBSTR(N.A7,1,1) = 'A'  
			LEFT OUTER JOIN LGDAT.FGRP TL ON  
				TL.BQ1GRP = AZGROP 
			LEFT OUTER JOIN LGDAT.FGRP FA ON  
				FA.BQ1GRP = SUBSTR(AZGROP,1,3) AND  
				LENGTH(RTRIM(AZGROP)) >=5  
			LEFT OUTER JOIN LGDAT.FGRP FB ON  
				FB.BQ1GRP = SUBSTR(AZGROP,1,5) AND  
				LENGTH(RTRIM(AZGROP)) >=7  
			LEFT OUTER JOIN RLARP.FFCRET X ON  
				X.PERD = B.PERD AND  
				X.FCUR = AZFUT2 AND  
				X.TCUR = 'US' AND  
				X.RTYP = CASE WHEN AZATYP <= 3 THEN 'ME' ELSE 'MA' END  
			LEFT OUTER JOIN RLARP.VW_FFGLPD ON  
				COMP = SUBSTR(ACC,1,2) AND  
				FSPR = B.PERD ; 
  
LABEL ON COLUMN RLARP.V_TBJC 
(AZTITL IS 'Account Title', 
	INACTIVE IS 'Account             Status              Code', 
	GLCC IS 'Future Use          Fut3', 
	SDAT IS 'Starting            Date ', 
	EDAT IS 'Ending              Date ', 
	CURR IS 'Currency            Code') ; 
  
LABEL ON COLUMN RLARP.V_TBJC 
(AZTITL TEXT IS 'Account Title', 
	INACTIVE TEXT IS 'Account Status Code', 
	GLCC TEXT IS 'Future Use Fut3', 
	SDAT TEXT IS 'Starting Date', 
	EDAT TEXT IS 'Ending Date', 
	CURR TEXT IS 'Currency Code') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_TBJC TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_TBJC TO PUBLIC ; 
  
CREATE VIEW RLARP.V_TBJCS (
	COMP, 
	PLNT, 
	ACCT, 
	ACCT_AND_DESCR FOR COLUMN ACCT_00001, 
	PRIME, 
	PRIMESUB, 
	ACCT_DESCR, 
	INACTIVE, 
	GLCC, 
	ELIM_TYPE, 
	ELIM_REL, 
	ELIM_DFGRP, 
	ELIM_CO, 
	FSPR, 
	CAPR, 
	SDAT, 
	EDAT, 
	FGRP, 
	STMT, 
	LVL0, 
	LVL1, 
	LVL2, 
	LVL3, 
	EBITDA, 
	DEPARTMENT, 
	DEP_GRP, 
	CURR, 
	OPEN_LOCAL, 
	NET_LOCAL, 
	END_LOCAL, 
	BDGT_LOCAL, 
	USD_OPEN, 
	USD_NET, 
	USD_END, 
	USD_BDGT) 
	AS 
	SELECT  
		SUBSTR(ACC,1,2) AS COMP,  
		SUBSTR(ACC,3,2) PLNT,  
		ACC ACCT,  
		ACC||' - '||RTRIM(AZTITL) ACCT_AND_DESCR,  
		SUBSTR(ACC,7,4) PRIME,  
		SUBSTR(ACC,7,6) PRIMESUB, 
		AZTITL ACCT_DESCR,  
		AZSTAT INACTIVE,  
		AZFUT3 GLCC,  
		RTRIM(D35DES3) ELIM_TYPE,  
		RTRIM(D35USR1) ELIM_REL,  
		RTRIM(D35USR2) ELIM_DFGRP,  
		SUBSTR(DIGITS(D35USR4),9,2) ELIM_CO,  
		B.PERD FSPR,  
		CAPR,  
		SDAT,  
		EDAT,  
		AZGROP||' - '||RTRIM(TL.BQ1TITL) FGRP,  
		CASE WHEN AZATYP <= 3  
		THEN 'BALANCE SHEET'  
			ELSE 'INCOME STATEMENT'  
		END STMT,  
		AZATYP||' - '||RTRIM(SUBSTR(A249,1,30)) LVL0,  
		CASE LENGTH(RTRIM(AZGROP))  
		WHEN 3 THEN SUBSTR(AZGROP,2,2)||' - '||RTRIM(TL.BQ1TITL)  
		ELSE SUBSTR(AZGROP,2,2)||' - '||RTRIM(FA.BQ1TITL)  
		END LVL1,  
		CASE LENGTH(RTRIM(AZGROP))  
		WHEN 3 THEN '----------->'  
		WHEN 5 THEN SUBSTR(AZGROP,4,2)||' - '||RTRIM(TL.BQ1TITL)  
		ELSE SUBSTR(FB.BQ1GRP,4,2)||' - '||RTRIM(FB.BQ1TITL)  
		END LVL2,  
		CASE LENGTH(RTRIM(AZGROP))  
		WHEN 3 THEN '----------->'  
		WHEN 5 THEN '----------->'  
		ELSE SUBSTR(TL.BQ1GRP,6,2)||' - '||RTRIM(TL.BQ1TITL)  
		END LVL3,  
		RTRIM(D35DES1) EBITDA,  
		RTRIM(SUBSTR(ACC,5,2)||CASE WHEN LENGTH(RTRIM(D35DES2)) >0 THEN ' - '||D35DES2 ELSE '' END) DEPARTMENT,  
		RTRIM(D35USR3) DEP_GRP,  
		AZFUT2 CURR,  
		B.OB OPEN_LOCAL,  
		B.NT NET_LOCAL,  
		B.EB END_LOCAL,  
		B.BG BDGT_LOCAL,  
		B.OB * RATE USD_OPEN,  
		B.NT * RATE USD_NET,  
		B.EB * RATE USD_END,  
		B.BG * RATE USD_BDGT  
	FROM 	  
		( 
			SELECT  
				AJ4CCYY, P.ACC, AZTITL, AZSTAT, AZATYP, AZGROP, AZFUT3, AZFUT2, P.PERD, P.OB, P.NT, P.EB, P.BG, P.FC  
			FROM  
				LGDAT.GLMT B,  
				LGDAT.MAST M,  
				TABLE (VALUES  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'01', AJ4OB01, AJ4TT01, AJ4OB01+AJ4TT01, AJ4CB01, AJ4FR01),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'02', AJ4OB02, AJ4TT02, AJ4OB02+AJ4TT02, AJ4CB02, AJ4FR02),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'03', AJ4OB03, AJ4TT03, AJ4OB03+AJ4TT03, AJ4CB03, AJ4FR03),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'04', AJ4OB04, AJ4TT04, AJ4OB04+AJ4TT04, AJ4CB04, AJ4FR04),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'05', AJ4OB05, AJ4TT05, AJ4OB05+AJ4TT05, AJ4CB05, AJ4FR05),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'06', AJ4OB06, AJ4TT06, AJ4OB06+AJ4TT06, AJ4CB06, AJ4FR06),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'07', AJ4OB07, AJ4TT07, AJ4OB07+AJ4TT07, AJ4CB07, AJ4FR07),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'08', AJ4OB08, AJ4TT08, AJ4OB08+AJ4TT08, AJ4CB08, AJ4FR08),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'09', AJ4OB09, AJ4TT09, AJ4OB09+AJ4TT09, AJ4CB09, AJ4FR09),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'10', AJ4OB10, AJ4TT10, AJ4OB10+AJ4TT10, AJ4CB10, AJ4FR0A),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'11', AJ4OB11, AJ4TT11, AJ4OB11+AJ4TT11, AJ4CB11, AJ4FR0B),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'12', AJ4OB12, AJ4TT12, AJ4OB12+AJ4TT12, AJ4CB12, AJ4FR0C),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'13', AJ4OB13, AJ4TT13, AJ4OB13+AJ4TT13, AJ4CB13, AJ4FR0D),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'14', AJ4OB14, AJ4TT14, AJ4OB14+AJ4TT14, AJ4CB14, AJ4FR0E),  
					(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'15', AJ4OB15, AJ4TT15, AJ4OB15+AJ4TT15, AJ4CB15, AJ4FR0F)  
				) AS P(ACC, PERD, OB, NT, EB, BG, FC)  
			WHERE  
				AJ4CCYY >= 2015 AND  
				AZCOMP = AJ4COMP AND  
				AZGL#1 = AJ4GL#1 AND  
				AZGL#2 = AJ4GL#2 AND  
				(P.OB <> 0 OR P.NT <> 0 OR P.EB <> 0 OR P.BG <> 0 OR P.FC <> 0)  
		) B  
		LEFT OUTER JOIN LGDAT.GGTP ON  
			D35GCDE = AZFUT3  
		LEFT OUTER JOIN LGDAT.NAME N ON  
			SUBSTR(N.A7,7,1) = AZATYP AND  
			SUBSTR(N.A7,1,1) = 'A'  
		LEFT OUTER JOIN LGDAT.FGRP TL ON  
			TL.BQ1GRP = AZGROP  
		LEFT OUTER JOIN LGDAT.FGRP FA ON  
			FA.BQ1GRP = SUBSTR(AZGROP,1,3) AND  
			LENGTH(RTRIM(AZGROP)) >=5  
		LEFT OUTER JOIN LGDAT.FGRP FB ON  
			FB.BQ1GRP = SUBSTR(AZGROP,1,5) AND  
			LENGTH(RTRIM(AZGROP)) >=7  
		LEFT OUTER JOIN RLARP.FFCRET X ON  
			X.PERD = B.PERD AND  
			X.FCUR = AZFUT2 AND  
			X.TCUR = 'US' AND  
			X.RTYP = CASE WHEN AZATYP <= 3 THEN 'ME' ELSE 'MA' END  
		LEFT OUTER JOIN RLARP.VW_FFGLPD ON  
			COMP = SUBSTR(ACC,1,2) AND  
			FSPR = B.PERD ; 
  
LABEL ON TABLE RLARP.V_TBJCS 
	IS 'Acct - Trial Balance Journaled Consolidation' ; 
  
LABEL ON COLUMN RLARP.V_TBJCS 
(ACCT_DESCR IS 'Account Title', 
	INACTIVE IS 'Account             Status              Code', 
	GLCC IS 'Future Use          Fut3', 
	SDAT IS 'Starting            Date ', 
	EDAT IS 'Ending              Date ', 
	CURR IS 'Currency            Code') ; 
  
LABEL ON COLUMN RLARP.V_TBJCS 
(ACCT_DESCR TEXT IS 'Account Title', 
	INACTIVE TEXT IS 'Account Status Code', 
	GLCC TEXT IS 'Future Use Fut3', 
	SDAT TEXT IS 'Starting Date', 
	EDAT TEXT IS 'Ending Date', 
	CURR TEXT IS 'Currency Code') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_TBJCS TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_TBJCS TO PUBLIC ; 
  
CREATE VIEW RLARP.V_TBLCS (
	COMP, 
	PLNT, 
	ACCT, 
	PRIME, 
	AZTITL, 
	INACTIVE, 
	GLCC, 
	ELIM_TYPE, 
	ELIM_REL, 
	ELIM_DFGRP, 
	ELIM_CO, 
	FSPR, 
	CAPR, 
	SDAT, 
	EDAT, 
	FGRP, 
	STMT, 
	LVL0, 
	LVL1, 
	LVL2, 
	LVL3, 
	EBITDA, 
	DEPARTMENT, 
	DEP_GRP, 
	CURR, 
	OPEN_LOCAL, 
	NET_LOCAL, 
	END_LOCAL, 
	BDGT_LOCAL, 
	USD_OPEN, 
	USD_NET, 
	USD_END, 
	USD_BDGT) 
	AS 
	SELECT  
		SUBSTR(ACC,1,2) AS COMP,  
		SUBSTR(ACC,3,2) PLNT,  
		ACC ACCT,  
		SUBSTR(ACC,7,4) PRIME,  
		AZTITL,  
		AZSTAT INACTIVE,  
		AZFUT3 GLCC,  
		RTRIM(D35DES3) ELIM_TYPE,  
		RTRIM(D35USR1) ELIM_REL,  
		RTRIM(D35USR2) ELIM_DFGRP, 
		SUBSTR(DIGITS(D35USR4),9,2) ELIM_CO, 
		B.PERD FSPR,  
		CAPR,  
		SDAT,  
		EDAT,  
		SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)||' - '||RTRIM(TL.BQ1TITL) FGRP,  
		CASE WHEN AZATYP <= 3  
		THEN 'BALANCE SHEET'  
		ELSE 'INCOME STATEMENT'  
		END STMT,  
		SUBSTR(SUBSTR(LTRIM(D35USR2)||AZGROP,1,7),1,1)||' - '||RTRIM(SUBSTR(A249,1,30)) LVL0,  
		CASE LENGTH(RTRIM(SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)))  
		WHEN 3 THEN SUBSTR(TL.BQ1GRP,2,2)||' - '||RTRIM(TL.BQ1TITL)  
		ELSE SUBSTR(FA.BQ1GRP,2,2)||' - '||RTRIM(FA.BQ1TITL)  
		END LVL1,  
		CASE LENGTH(RTRIM(SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)))  
		WHEN 3 THEN ''  
		WHEN 5 THEN SUBSTR(TL.BQ1GRP,4,2)||' - '||RTRIM(TL.BQ1TITL)  
		ELSE SUBSTR(FB.BQ1GRP,4,2)||' - '||RTRIM(FB.BQ1TITL)  
		END LVL2,  
		CASE LENGTH(RTRIM(SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)))  
		WHEN 3 THEN ''  
		WHEN 5 THEN ''  
		ELSE SUBSTR(TL.BQ1GRP,6,2)||' - '||RTRIM(TL.BQ1TITL)  
		END LVL3,  
		RTRIM(D35DES1) EBITDA,  
		RTRIM(SUBSTR(ACC,5,2)||CASE WHEN LENGTH(RTRIM(D35DES2)) >0 THEN ' - '||D35DES2 ELSE '' END) DEPARTMENT,  
		RTRIM(D35USR3) DEP_GRP,  
		AZFUT2 CURR, 
		B.OB OPEN_LOCAL,  
		B.NT NET_LOCAL,  
		B.EB END_LOCAL,  
		B.BG BDGT_LOCAL,  
		B.OB * RATE USD_OPEN,  
		B.NT * RATE USD_NET,  
		B.EB * RATE USD_END,  
		B.BG * RATE USD_BDGT  
	FROM 	  
		(
		SELECT  
			AJ4CCYY, P.ACC, AZTITL, AZSTAT, AZATYP, AZGROP, AZFUT3, AZFUT2, P.PERD, P.OB, P.NT, P.EB, P.BG, P.FC  
			FROM  
			LGDAT.GLMT B,  
			LGDAT.MAST M,  
			TABLE (VALUES  
			
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'01', AJ4OB01, AJ4TT01, AJ4OB01+AJ4TT01, AJ4CB01, AJ4FR01),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'02', AJ4OB02, AJ4TT02, AJ4OB02+AJ4TT02, AJ4CB02, AJ4FR02),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'03', AJ4OB03, AJ4TT03, AJ4OB03+AJ4TT03, AJ4CB03, AJ4FR03),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'04', AJ4OB04, AJ4TT04, AJ4OB04+AJ4TT04, AJ4CB04, AJ4FR04),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'05', AJ4OB05, AJ4TT05, AJ4OB05+AJ4TT05, AJ4CB05, AJ4FR05),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'06', AJ4OB06, AJ4TT06, AJ4OB06+AJ4TT06, AJ4CB06, AJ4FR06),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'07', AJ4OB07, AJ4TT07, AJ4OB07+AJ4TT07, AJ4CB07, AJ4FR07),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'08', AJ4OB08, AJ4TT08, AJ4OB08+AJ4TT08, AJ4CB08, AJ4FR08),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'09', AJ4OB09, AJ4TT09, AJ4OB09+AJ4TT09, AJ4CB09, AJ4FR09),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'10', AJ4OB10, AJ4TT10, AJ4OB10+AJ4TT10, AJ4CB10, AJ4FR0A),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'11', AJ4OB11, AJ4TT11, AJ4OB11+AJ4TT11, AJ4CB11, AJ4FR0B),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'12', AJ4OB12, AJ4TT12, AJ4OB12+AJ4TT12, AJ4CB12, AJ4FR0C),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'13', AJ4OB13, AJ4TT13, AJ4OB13+AJ4TT13, AJ4CB13, AJ4FR0D),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'14', AJ4OB14, AJ4TT14, AJ4OB14+AJ4TT14, AJ4CB14, AJ4FR0E),  
				(AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2), SUBSTR(DIGITS(AJ4CCYY),3,2)||'15', AJ4OB15, AJ4TT15, AJ4OB15+AJ4TT15, AJ4CB15, AJ4FR0F)  
			) AS P(ACC, PERD, OB, NT, EB, BG, FC)  
		WHERE  
			AZCOMP = AJ4COMP AND  
			AZGL#1 = AJ4GL#1 AND  
			AZGL#2 = AJ4GL#2 AND  
			(P.OB <> 0 OR P.NT <> 0 OR P.EB <> 0 OR P.BG <> 0 OR P.FC <> 0)  
		) B 
		LEFT OUTER JOIN LGDAT.GGTP ON  
			D35GCDE = AZFUT3  
		LEFT OUTER JOIN LGDAT.NAME N ON  
			SUBSTR(N.A7,7,1) = SUBSTR(LTRIM(D35USR2)||AZGROP,1,1) AND  
			SUBSTR(N.A7,1,1) = 'A'  
		LEFT OUTER JOIN LGDAT.FGRP TL ON  
			TL.BQ1GRP = SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)  
		LEFT OUTER JOIN LGDAT.FGRP FA ON  
			FA.BQ1GRP = SUBSTR(TL.BQ1GRP,1,3) AND  
			LENGTH(RTRIM(TL.BQ1GRP)) >=5  
		LEFT OUTER JOIN LGDAT.FGRP FB ON  
			FB.BQ1GRP = SUBSTR(TL.BQ1GRP,1,5) AND  
			LENGTH(RTRIM(TL.BQ1GRP)) >=7  
		LEFT OUTER JOIN RLARP.FFCRET X ON  
			X.PERD = B.PERD AND  
			X.FCUR = AZFUT2 AND  
			X.TCUR = 'US' AND  
			X.RTYP = CASE WHEN AZATYP <= 3 THEN 'ME' ELSE 'MA' END  
		LEFT OUTER JOIN RLARP.VW_FFGLPD ON  
			COMP = SUBSTR(ACC,1,2) AND  
			FSPR = B.PERD ; 
  
LABEL ON COLUMN RLARP.V_TBLCS 
(AZTITL IS 'Account Title', 
	INACTIVE IS 'Account             Status              Code', 
	GLCC IS 'Future Use          Fut3', 
	SDAT IS 'Starting            Date ', 
	EDAT IS 'Ending              Date ', 
	CURR IS 'Currency            Code') ; 
  
LABEL ON COLUMN RLARP.V_TBLCS 
(AZTITL TEXT IS 'Account Title', 
	INACTIVE TEXT IS 'Account Status Code', 
	GLCC TEXT IS 'Future Use Fut3', 
	SDAT TEXT IS 'Starting Date', 
	EDAT TEXT IS 'Ending Date', 
	CURR TEXT IS 'Currency Code') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_TBLCS TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.V_TBLCS TO PUBLIC ; 
  
CREATE VIEW RLARP.VCONS_ACCT (
	COMP, 
	FGRP, 
	GLCD, 
	CACCT) 
	AS 
	SELECT 
		DIGITS(AZCOMP) COMP, 
		AZGROP FGRP, 
		AZFUT3 GLCD, 
		MIN(AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2)) CACCT 
	FROM 
		LGDAT.MAST 
	GROUP BY 
		DIGITS(AZCOMP), 
		AZGROP, 
		AZFUT3 ; 
  
LABEL ON TABLE RLARP.VCONS_ACCT 
	IS 'Acct - Consolidation Account' ; 
  
LABEL ON COLUMN RLARP.VCONS_ACCT 
(FGRP IS 'Account             Group', 
	GLCD IS 'Future Use          Fut3') ; 
  
LABEL ON COLUMN RLARP.VCONS_ACCT 
(FGRP TEXT IS 'Account Group', 
	GLCD TEXT IS 'Future Use Fut3') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VCONS_ACCT TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VCONS_ACCT TO PUBLIC ; 
  
CREATE VIEW RLARP.VSTMTH (
	STMT, 
	PLINE, 
	LINE, 
	AGG_FLG) 
	AS 
	SELECT DISTINCT  
		STMT, PLINE, LINE, AGG_FLG 
	FROM  
		RLARP.FFSTMTD  
	WHERE  
		PLINE IS NOT NULL OR  
		AGG_FLG = 'X' ; 
  
LABEL ON TABLE RLARP.VSTMTH 
	IS 'Acct - Statement Hierarchy' ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VSTMTH TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VSTMTH TO PUBLIC ; 
  
CREATE VIEW RLARP.VVDH (
	PLIB, 
	PVW, 
	CLIB, 
	CVW) 
	AS 
	SELECT  
			SYSTEM_VIEW_SCHEMA PLIB,  
			SYSTEM_VIEW_NAME PVW,  
			SYSTEM_TABLE_SCHEMA CLIB,  
			SYSTEM_TABLE_NAME CVW  
		FROM	  
			RLARP.SYSVIEWDEP  
		WHERE 
			SUBSTR(SYSTEM_VIEW_NAME,1,3) <> 'SYS' ; 
  
LABEL ON TABLE RLARP.VVDH 
	IS 'Mast - View hierarchy' ; 
  
LABEL ON COLUMN RLARP.VVDH 
(PLIB TEXT IS 'Library name', 
	PVW TEXT IS 'File name', 
	CLIB TEXT IS 'Library name', 
	CVW TEXT IS 'File name') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VVDH TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VVDH TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_COPR (
	COMP, 
	DESCR, 
	CURR, 
	GL, 
	AR, 
	AP, 
	FA, 
	IC, 
	CONS_FUNC) 
	AS 
	SELECT  
		LTRIM(RTRIM(A9)) AS COMP,  
		A30 AS DESCR,  
		SUBSTR(C.A249,242,2) CURR,  
		SUBSTR(C.A249,32,4) AS GL,  
		SUBSTR(C.A249,190,4) AS AR,  
		SUBSTR(C.A249,182,4) AS AP,  
		SUBSTR(C.A249,198,4) AS FA,  
		SUBSTR(C.A249,238,4) AS IC, 
		SUBSTR(D.A249,9,5) CONS_FUNC 
	FROM  
		LGDAT.CODE  
		LEFT OUTER JOIN LGDAT.NAME C ON  
			'C0000'||LTRIM(RTRIM(A9)) = C.A7  
		LEFT OUTER JOIN LGDAT.NAME D ON  
			'D0000'||LTRIM(RTRIM(A9)) = D.A7  
	WHERE  
		A2 = 'AA' OR A2 IS NULL ; 

LABEL ON COLUMN RLARP.VW_COPR 
(DESCR IS 'Description         Usually') ; 
  
LABEL ON COLUMN RLARP.VW_COPR 
(DESCR TEXT IS 'Description Usually') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_COPR TO PTROWBRIDG WITH GRANT OPTION ; 
  
CREATE VIEW RLARP.VW_COSTR (
	ACCT, 
	PERD, 
	"PART", 
	PLNT, 
	FRI, 
	FCOST, 
	TRI, 
	TCOST, 
	JHUSER, 
	TQTY, 
	VALUE_LOCAL FOR COLUMN VALUE00001) 
	AS 
	SELECT 
		YACOMP||Y1INVA ACCT, G.FSPR PERD, PART, PLNT, FRI, FCOST, TRI, TCOST, JHUSER, TQTY, (TCOST - FCOST) * TQTY VALUE_LOCAL 
	FROM 
		RLARP.VW_FFGLPD G 
		INNER JOIN RLARP.VW_PRFSPR P ON 
			P.COMP = G.COMP AND 
			P.CURRP = G.FSPR 
		INNER JOIN LGDAT.PLNT ON 
			YACOMP = G.COMP 
		INNER JOIN RLARP.FFCOSTEFFD C ON 
			C.PLNT = YAPLNT AND 
			C.TDT >= SDAT AND 
			C.TDT <= EDAT 
		INNER JOIN RLARP.VW_FFSTKMX ON 
			AVPART = C.PART 
		INNER JOIN LGDAT.GLIE ON 
			Y1PLNT = C.PLNT AND 
			Y1GLEC = AVGLED 
		LEFT OUTER JOIN LGDAT.ICSTT ON 
			JHRCID = TRI 
	WHERE 
		TCOST - FCOST <> 0 AND 
		TQTY <> 0 ; 
  
LABEL ON TABLE RLARP.VW_COSTR 
	IS 'Acct - Cost Rolls' ; 
  
LABEL ON COLUMN RLARP.VW_COSTR 
(JHUSER IS 'User                ID') ; 
  
LABEL ON COLUMN RLARP.VW_COSTR 
("PART" TEXT IS 'JHPART', 
	PLNT TEXT IS 'JHPLNT', 
	FRI TEXT IS 'JHRCID', 
	FCOST TEXT IS 'JHTOTO', 
	TRI TEXT IS 'JHRCID', 
	TCOST TEXT IS 'JHTOTN', 
	JHUSER TEXT IS 'User ID', 
	TQTY TEXT IS 'JHOHQT') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_COSTR TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_COSTR TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_CREDIT (
	DHCOMP, 
	CREDPER, 
	DHINV#, 
	DILIN#, 
	DIGLCD, 
	DIREAS, 
	INV_GL, 
	INV_QTY, 
	DIEXT, 
	DICTEX, 
	DIQTSH, 
	DHTOTI, 
	DCORD#, 
	INCRD#, 
	INITM#, 
	INRAN#, 
	INRNDR, 
	ININV#, 
	INIITM, 
	INPLNT, 
	INRNDI, 
	INCRED, 
	INRCOD, 
	INPT#, 
	ORIGPER, 
	RANPER, 
	INTOTI, 
	INFAMT, 
	INDPCD, 
	INCUST, 
	PROB, 
	RECNOTES) 
	AS 
	SELECT  
		CRED.DHCOMP, CRED.DHYYPP CREDPER, CRED.DHINV#, DILIN#, DIGLCD, DIREAS, INV_GL, INV_QTY, DIEXT, DICTEX, DIQTSH, CRED.DHTOTI, DCORD#, INCRD#, INITM#, INRAN#, INRNDR, ININV#, INIITM, INPLNT, INRNDI, INCRED, 
		INRCOD, INPT#, ORIG.DHYYPP ORIGPER, INYYPP RANPER, INTOTI, INFAMT,  
		INDPCD, INCUST,  
		RTRIM(INRDS1||' '||INRDS2||' '||INRDS3) AS PROB,  
		RTRIM(INREC1||' '||INREC2||' '||INREC3) AS RECNOTES  
	FROM  
		LGDAT.OIH CRED	 
		INNER JOIN LGDAT.OID CDD ON 
			CDD.DIINV# = CRED.DHINV# 
		LEFT OUTER JOIN LGDAT.CCRH ON  
			CRED.DHORD# = DCORD# 
		LEFT OUTER JOIN LGDAT.CCRI ON 
			DIORD# = DDORD# AND 
			DILIN# = DDITM# 
		LEFT OUTER JOIN LGDAT.RANS ON 
			DDORD# = INCRD# AND 
			DDITM# = INITM# 
		LEFT OUTER JOIN LGDAT.OIH ORIG ON  
			ORIG.DHINV# = ININV#  
		LEFT OUTER JOIN RLARP.VW_RTNREAS ON 
			CODE = DIREAS 
	WHERE  
		CRED.DHINCR = 'C' ; 

LABEL ON TABLE RLARP.VW_CREDIT 
	IS 'Sales - Credits' ; 
  
LABEL ON COLUMN RLARP.VW_CREDIT 
(DHCOMP IS 'Company             Number', 
	CREDPER IS 'G/L Year            G/L Period', 
	DHINV# IS 'Invoice             Number', 
	DILIN# IS 'Line                Number', 
	DIGLCD IS 'GL Distr            Code', 
	DIREAS IS 'Reason              Code', 
	DIEXT IS 'Extension', 
	DICTEX IS 'Cost                Extension', 
	DIQTSH IS 'Quantity            Shipped', 
	DHTOTI IS 'Invoice             Total', 
	DCORD# IS 'Order               Number', 
	INCRD# IS 'Credit              Number', 
	INITM# IS 'Credit              Detail', 
	INRAN# IS 'Return              Author.             Number', 
	INRNDR IS 'Return              Authorization       Document Number', 
	ININV# IS 'Invoice             Number', 
	INIITM IS 'Invoice             Item                Number', 
	INPLNT IS 'Plant               Code', 
	INRNDI IS 'Return              Authorization       Document Item Number', 
	INCRED IS 'Credit              Note                Issued', 
	INRCOD IS 'Reason              Code', 
	INPT# IS 'Returned            Part #', 
	ORIGPER IS 'G/L Year            G/L Period', 
	RANPER IS 'G/L Year            G/L Period', 
	INTOTI IS 'Item Total          (not including      discounts)', 
	INFAMT IS 'Item                Freight             Amount', 
	INDPCD IS 'RANS                Action              Code', 
	INCUST IS 'Customer            Number') ; 
  
LABEL ON COLUMN RLARP.VW_CREDIT 
(DHCOMP TEXT IS 'Company Number', 
	CREDPER TEXT IS 'G/L Year G/L Period', 
	DHINV# TEXT IS 'Invoice Number', 
	DILIN# TEXT IS 'Line Number', 
	DIGLCD TEXT IS 'GL Distr Code', 
	DIREAS TEXT IS 'Reason Code', 
	DIEXT TEXT IS 'Extension', 
	DICTEX TEXT IS 'Cost Extension', 
	DIQTSH TEXT IS 'Quantity Shipped', 
	DHTOTI TEXT IS 'Include FST & PST', 
	DCORD# TEXT IS 'Order Number', 
	INCRD# TEXT IS 'Credit Number', 
	INITM# TEXT IS 'Credit Detail', 
	INRAN# TEXT IS 'Return Author. Number', 
	INRNDR TEXT IS 'Return Authorization Document Number', 
	ININV# TEXT IS 'Invoice Number', 
	INIITM TEXT IS 'Invoice Item Number', 
	INPLNT TEXT IS 'Plant Code', 
	INRNDI TEXT IS 'Return Authorization Document Item Number', 
	INCRED TEXT IS 'Credit Note Issued', 
	INRCOD TEXT IS 'Reason Code', 
	INPT# TEXT IS 'Returned Part #', 
	ORIGPER TEXT IS 'G/L Year G/L Period', 
	RANPER TEXT IS 'G/L Year G/L Period', 
	INTOTI TEXT IS 'Item Total (not including discounts)', 
	INFAMT TEXT IS 'Item Freight Amount', 
	INDPCD TEXT IS 'RANS Action Code', 
	INCUST TEXT IS 'Customer Number') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_CREDIT TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_CREDIT TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFAPDO (
	FHCOM#, 
	FHBANK, 
	VEND, 
	FHVCH#, 
	FHINV#, 
	FHIDAT, 
	FHDDAT, 
	FHCDAT, 
	CAPR, 
	WEEKN, 
	FSPR, 
	FHGRS, 
	FHDIS, 
	FHPTD, 
	FHCBAL, 
	DAYS_OUTSTANDING FOR COLUMN DAYS_00001, 
	DAYS_PASTDUE FOR COLUMN DAYS_00002) 
	AS 
	SELECT  
		FHCOM#, FHBANK, RTRIM(FHVEN#)||' - '||RTRIM(BTNAME) VEND, FHVCH#, FHINV#, FHIDAT, FHDDAT, FHCDAT,  
		SUBSTR(CHAR(FHCDAT),3,2)||SUBSTR(CHAR(FHCDAT),6,2) CAPR,  
		WEEK(FHCDAT) WEEKN,  
		DIGITS(FHPYY)||DIGITS(FHPPER) FSPR, FHGRS, FHDIS, FHPTD, FHCBAL,  
		MAX(DAYS(FHCDAT)-DAYS(FHIDAT),0) DAYS_OUTSTANDING,  
		MAX(DAYS(FHCDAT)-DAYS(CASE FHDDAT WHEN '0001-01-01' THEN FHIDAT ELSE FHDDAT END),-60) DAYS_PASTDUE  
	FROM  
		LGDAT."OPEN"  
		LEFT OUTER JOIN LGDAT.VEND ON  
			BTVEND = FHVEN#  
	WHERE  
		FHCDAT > '0001-01-01' ; 
  
LABEL ON TABLE RLARP.VW_FFAPDO 
	IS 'AP - Payment history, days outstanding' ; 
  
LABEL ON COLUMN RLARP.VW_FFAPDO 
(FHCOM# IS 'Company', 
	FHBANK IS 'Pay. Bank           Code', 
	FHVCH# IS 'Voucher             Number', 
	FHINV# IS 'Invoice             Number', 
	FHIDAT IS 'Invoice             Date', 
	FHDDAT IS 'Due                 Date', 
	FHCDAT IS 'Closing             Date', 
	FHGRS IS 'Gross               Amount', 
	FHDIS IS 'Discount            Amount', 
	FHPTD IS 'Paid to Date', 
	FHCBAL IS 'Current             Balance') ; 
  
LABEL ON COLUMN RLARP.VW_FFAPDO 
(FHCOM# TEXT IS 'Company', 
	FHBANK TEXT IS 'Pay. Bank Code', 
	FHVCH# TEXT IS 'Voucher Number', 
	FHINV# TEXT IS 'Invoice Number', 
	FHIDAT TEXT IS 'Invoice Date', 
	FHDDAT TEXT IS 'Due Date', 
	FHCDAT TEXT IS 'Closing Date', 
	FHGRS TEXT IS 'Gross Amount', 
	FHDIS TEXT IS 'Discount Amount', 
	FHPTD TEXT IS 'Paid to Date', 
	FHCBAL TEXT IS 'Current Balance') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFAPDO TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFAPDO TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFAPVA (
	SRCE, 
	PERIOD, 
	FSPR, 
	IDAT, 
	DDAT, 
	COMP, 
	VEND, 
	DESCR, 
	VEND_DESCR, 
	BANK, 
	VCHR_PO, 
	INV_POLINE, 
	ITEM_DESCR, 
	CURR, 
	AMT, 
	AMT_USD) 
	AS 
	SELECT  
		'VHCR' AS SRCE,  
		DIGITS(FHPYY)||DIGITS(FHPPER) AS PERIOD,  
		AP AS FSPR,  
		CHAR(FHIDAT) AS IDAT,  
		CHAR(FHDDAT) AS DDAT,  
		FHCOM# AS COMP,  
		FHVEN# AS VEND,  
		RTRIM(BTNAME) AS DESCR,  
		RTRIM(FHVEN#)||' - '||RTRIM(BTNAME) AS VEND_DESCR,  
		FHBANK AS BANK,  
		FHVCH# AS VCHR_PO,  
		FHINV# AS INV_POLINE,  
		FHVDES AS ITEM_DESCR,  
		FHCURR AS CURR,  
		FHCBAL AS AMT,  
		ROUND(FHCBAL*RATE,2) AS AMT_USD  
	FROM  
		LGDAT."OPEN"  
		LEFT OUTER JOIN LGDAT.VEND ON  
			BTVEND = FHVEN#  
		LEFT OUTER JOIN LGDAT.VCHR ON  
			IDVCH# = FHVCH# AND  
			IDCOM# = FHCOM# AND  
			IDBNK# = FHBANK AND  
			IDFISY = FHPYY AND  
			IDFISP = FHPPER  
		LEFT OUTER JOIN RLARP.VW_FFCOPR C ON  
			COMP = FHCOM#  
		LEFT OUTER JOIN RLARP.FFCRET X ON  
			X.FCUR = FHCURR AND  
			X.TCUR = 'US' AND  
			X.RTYP = 'ME' AND  
			X.PERD = C.AP  
	WHERE  
		FHCBAL <> 0 AND DIGITS(FHPYY)||DIGITS(FHPPER) >= '0901'  
		  
	UNION ALL  
	
	SELECT  
		'POR' AS SRCE,  
		SUBSTR(DIGITS(KRIVYR),3,2)||DIGITS(KRIVPR) AS PERIOD,  
		AP AS FSPR,  
		CHAR(KRRDAT) AS IDAT,  
		CHAR(KRRDAT + PAYDAYS DAYS) AS DDAT,  
		KRCOM# AS COMP,  
		KRVEN# AS VEND,  
		RTRIM(BTNAME) AS DESCR,  
		BTVEND||' - '||RTRIM(BTNAME) AS VEND_DESCR,  
		'BANK HERE' AS BANK,  
		DIGITS(KRPO#) AS VHCR_PO,  
		DIGITS(KRPOI#) AS INV_POLINE,  
		KCDESC AS ITEM_DESCR,  
		KACURR AS CURR,  
		ROUND(((KREXT+KRPST)/KRBQTY*FLOAT(KRRCVX)-KRSCST)*KRBQTY,2) AS AMT,  
		ROUND(((KREXT+KRPST)/KRBQTY*FLOAT(KRRCVX)-KRSCST)*KRBQTY*RATE,2) AS AMT_USD  
	FROM  
		LGDAT.PORCAP  
		INNER JOIN RLARP.VW_FFCOPR ON  
			COMP = KRCOM#  
		LEFT OUTER JOIN LGDAT.MAST ON  
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = KRCOM#||DIGITS(CASE KRGLVR WHEN 0 THEN KRGLEX ELSE KRGLVR END)  
		LEFT OUTER JOIN LGDAT.FGRP ON  
			BQ1GRP = AZGROP  
		LEFT OUTER JOIN LGDAT.VEND ON  
			BTVEND = KRVEN#  
		LEFT OUTER JOIN LGDAT.POH ON  
			KAPO# = KRPO#  
		LEFT OUTER JOIN LGDAT.POD ON  
			KCPO# = KRPO# AND  
			KCITM# = KRPOI# AND  
			KCLIN# = 1  
		LEFT OUTER JOIN LGDAT.GGTP ON  
			D35GCDE = AZFUT3  
		LEFT OUTER JOIN RLARP.FFCRET ON  
			FCUR = CURR AND  
			TCUR = 'US' AND  
			RTYP = 'ME' AND  
			PERD = AP  
		LEFT OUTER JOIN RLARP.VW_FFTMCD T ON  
			T.TERM = BTTRMC  
	WHERE  
		ROUND(((KREXT+KRPST)/KRBQTY*FLOAT(KRRCVX)-KRSCST)*KRBQTY,2) <>0 ; 
  
LABEL ON TABLE RLARP.VW_FFAPVA 
	IS 'AP - Open Vouchers & PORCAP''s' ; 
  
LABEL ON COLUMN RLARP.VW_FFAPVA 
(COMP IS 'Company', 
	VEND IS 'Vendor #', 
	BANK IS 'Pay. Bank           Code', 
	VCHR_PO IS 'Voucher             Number', 
	INV_POLINE IS 'Invoice             Number', 
	ITEM_DESCR IS 'Voucher             Description', 
	CURR IS 'Pay. Curr           Code', 
	AMT IS 'Current             Balance') ; 
  
LABEL ON COLUMN RLARP.VW_FFAPVA 
(COMP TEXT IS 'Company', 
	VEND TEXT IS 'Vendor #', 
	BANK TEXT IS 'Pay. Bank Code', 
	VCHR_PO TEXT IS 'Voucher Number', 
	INV_POLINE TEXT IS 'Invoice Number', 
	ITEM_DESCR TEXT IS 'Voucher Description', 
	CURR TEXT IS 'Pay. Curr Code', 
	AMT TEXT IS 'Current Balance') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFAPVA TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFAPVA TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFAPVT (
	MODULE, 
	BATCH, 
	PERD, 
	TDATE, 
	PDATE, 
	ACCT, 
	AMT, 
	PROJ, 
	USRN, 
	REV, 
	CUSMOD, 
	CUSKEY1, 
	CUSKEY1D, 
	CUSKEY2, 
	CUSKEY2D, 
	CUSKEY3, 
	CUSKEY3D, 
	CUSKEY4, 
	CUSKEY4D, 
	CUSVEND, 
	CUSCUST, 
	RECID, 
	FGRP, 
	ACCR, 
	DISC, 
	CURR, 
	CATG) 
	AS 
	SELECT  
		S.*,  
		AZGROP||' - '||RTRIM(BQ1TITL) FGRP,  
		IFCOM#||DIGITS(IFAPGL) ACCR,  
		IFCOM#||DIGITS(IFDSGL) DISC,  
		IFCOM#||DIGITS(IFCOGL) CURR,  
		CASE ACCT  
			WHEN IFCOM#||DIGITS(IFAPGL) THEN 'ACCR'  
			WHEN IFCOM#||DIGITS(IFDSGL) THEN 'DISC'  
			WHEN IFCOM#||DIGITS(IFCOGL) THEN 'CURR'  
			ELSE 'CHRG'  
		END CATG  
	FROM  
		RLARP.FFSBGLR1 S  
		LEFT OUTER JOIN LGDAT.MAST ON  
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = ACCT  
		LEFT OUTER JOIN LGDAT.FGRP ON  
			BQ1GRP = AZGROP  
		LEFT OUTER JOIN LGDAT.CONT ON  
			IFCOM# = SUBSTR(ACCT,1,2) AND  
			IFBNK# = RTRIM(CUSKEY2)  
			  
	WHERE  
		MODULE = 'APVN' ; 
  
LABEL ON TABLE RLARP.VW_FFAPVT 
	IS 'Acct - Voucher Transactions' ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFAPVT TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFAPVT TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFBINB (
	FSPR, 
	ACCT, 
	PRIME, 
	PLANT, 
	"PART", 
	ILOC, 
	LQBIN#, 
	GLCODE, 
	INVCODE, 
	MAJG, 
	MING, 
	MAJS, 
	MINS, 
	PROCUREMENT FOR COLUMN PROCU00001, 
	QTOH, 
	EXTCOST, 
	EXTCOST_USD FOR COLUMN EXTCO00001) 
	AS 
	SELECT  
		P.FSPR FSPR,  
		YACOMP||DIGITS(Y1INVA) ACCT,  
		SUBSTR(YACOMP||DIGITS(Y1INVA),7,4) PRIME,  
		LQPLNT PLANT,  
		RTRIM(LQPART)||' - '||RTRIM(COALESCE(AVDES1,AWDES1,'')) PART,  
		LQSTKL||' - '||RTRIM(AXLOCN) ILOC,  
		LQBIN#,  
		COALESCE(AWGLDC, AVGLCD) GLCODE,  
		COALESCE(AWGLED, AVGLED) INVCODE,  
		COALESCE(AWMAJG,AVMAJG)||' - '||RTRIM(BQDES) MAJG,  
		COALESCE(AWMING, AVMING)||' - '||RTRIM(BRDES) MING,  
		COALESCE(AWMAJS, AVMAJS)||' - '||RTRIM(SMJ.BSDES1) MAJS,  
		COALESCE(AWMINS, AVMINS)||' - '||RTRIM(SMN.BSDES1) MINS,  
		C.V6RPLN PROCUREMENT,  
		LQQTYH QTOH,  
		LQQTYH*STDCOST EXTCOST,  
		LQQTYH*STDCOST*RATE EXTCOST_USD  
	FROM  
		LGDAT.BINB  
		LEFT OUTER JOIN LGDAT.STKMM ON  
			AVPART = LQPART  
		LEFT OUTER JOIN LGDAT.STKMP ON  
			AWPART = LQPART  
		LEFT OUTER JOIN LGDAT.PLNT ON  
			YAPLNT = LQPLNT  
		LEFT OUTER JOIN LGDAT.GLIE ON  
			Y1PLNT = LQPLNT AND  
			Y1GLEC = COALESCE(AVGLED, AWGLED)  
		LEFT OUTER JOIN LGDAT.MAJG ON  
			BQGRP = COALESCE(AWMAJG, AVMAJG)  
		LEFT OUTER JOIN LGDAT.MMGP ON  
			BRGRP = BQGRP AND  
			BRMGRP = COALESCE(AVMING, AWMING)  
		LEFT OUTER JOIN LGDAT.MMSL SMN ON  
			SMN.BSMJCD = COALESCE(AVMAJS, AWMAJS) AND  
			SMN.BSMNCD = COALESCE(AVMINS, AWMINS)  
		LEFT OUTER JOIN LGDAT.MMSL SMJ ON  
			SMJ.BSMJCD = COALESCE(AVMAJS, AWMAJS) AND  
			SMJ.BSMNCD = ''  
		LEFT OUTER JOIN LGDAT.STKR ON  
			AXSTKL = LQSTKL  
		LEFT OUTER JOIN LGDAT.MAST ON  
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = YACOMP||DIGITS(Y1INVA)  
		LEFT OUTER JOIN RLARP.FFPERD P ON  
			P.CAPR = SUBSTR(CHAR(CURRENT_DATE),3,2)||SUBSTR(CHAR(CURRENT_DATE),6,2)  
		LEFT OUTER JOIN RLARP.FFCRET FX ON  
			FCUR = AZFUT2 AND  
			TCUR = 'US' AND  
			RTYP = 'ME' AND  
			FX.PERD = P.FSPR  
		LEFT OUTER JOIN RLARP.VW_FFICSTX C ON 
			C.V6PART = LQPART AND 
			C.V6PLNT = LQPLNT 
	WHERE  
		LQPART <> '' AND  
		LQQTYH<> 0 ; 
  
LABEL ON TABLE RLARP.VW_FFBINB 
	IS 'Inv - Bin On Hand' ; 
  
LABEL ON COLUMN RLARP.VW_FFBINB 
(PLANT IS 'Plant               Code', 
	LQBIN# IS 'Bin #', 
	PROCUREMENT IS 'Replenishment       Type', 
	QTOH IS 'Qty on hand         in base unit') ; 
  
LABEL ON COLUMN RLARP.VW_FFBINB 
(PLANT TEXT IS 'Plant Code', 
	LQBIN# TEXT IS 'Bin #', 
	PROCUREMENT TEXT IS 'Replenishment Type', 
	QTOH TEXT IS 'Qty on hand in base unit') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFBINB TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFBINB TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFCIRAN (
	DHINV#, 
	DILIN#, 
	DIGLCD, 
	DIREAS, 
	DIEXT, 
	DICTEX, 
	DIQTSH, 
	DHTOTI, 
	DCORD#, 
	INCRD#, 
	INITM#, 
	INRAN#, 
	INRNDR, 
	ININV#, 
	INIITM, 
	INPLNT, 
	INRNDI, 
	INCRED, 
	INRCOD, 
	INPT#, 
	ORIGPER, 
	RANPER, 
	CREDPER, 
	INTOTI, 
	INFAMT, 
	INDPCD, 
	INCUST, 
	PROB, 
	RECNOTES) 
	AS 
	SELECT  
		CRED.DHINV#, DILIN#, DIGLCD, DIREAS, DIEXT, DICTEX, DIQTSH, CRED.DHTOTI, DCORD#, INCRD#, INITM#, INRAN#, INRNDR, ININV#, INIITM, INPLNT, INRNDI, INCRED,  
		INRCOD, INPT#, ORIG.DHYYPP ORIGPER, INYYPP RANPER, DIGITS(CRED.DHARYR)||DIGITS(CRED.DHARPR) CREDPER, INTOTI, INFAMT,  
		INDPCD, INCUST,  
		RTRIM(INRDS1||' '||INRDS2||' '||INRDS3) AS PROB,  
		RTRIM(INREC1||' '||INREC2||' '||INREC3) AS RECNOTES  
	FROM  
		LGDAT.OIH CRED	  
		INNER JOIN LGDAT.OID CDD ON  
			CDD.DIINV# = CRED.DHINV#  
		LEFT OUTER JOIN LGDAT.CCRH ON  
			CRED.DHORD# = DCORD#  
		LEFT OUTER JOIN LGDAT.CCRI ON  
			DIORD# = DDORD# AND  
			DILIN# = DDITM#  
		LEFT OUTER JOIN LGDAT.RANS ON  
			DDORD# = INCRD# AND  
			DDITM# = INITM#  
		LEFT OUTER JOIN LGDAT.OIH ORIG ON  
			ORIG.DHINV# = ININV#  
	WHERE  
		CRED.DHINCR = 'C'   
	RCDFMT VW_FF00002 ; 
  
LABEL ON TABLE RLARP.VW_FFCIRAN 
	IS 'Sales - credit invoices left joined back to RAN' ; 
  
LABEL ON COLUMN RLARP.VW_FFCIRAN 
(DHINV# IS 'Invoice             Number', 
	DILIN# IS 'Line                Number', 
	DIGLCD IS 'GL Distr            Code', 
	DIREAS IS 'Reason              Code', 
	DIEXT IS 'Extension', 
	DICTEX IS 'Cost                Extension', 
	DIQTSH IS 'Quantity            Shipped', 
	DHTOTI IS 'Invoice             Total', 
	DCORD# IS 'Order               Number', 
	INCRD# IS 'Credit              Number', 
	INITM# IS 'Credit              Detail', 
	INRAN# IS 'Return              Author.             Number', 
	INRNDR IS 'Return              Authorization       Document Number', 
	ININV# IS 'Invoice             Number', 
	INIITM IS 'Invoice             Item                Number', 
	INPLNT IS 'Plant               Code', 
	INRNDI IS 'Return              Authorization       Document Item Number', 
	INCRED IS 'Credit              Note                Issued', 
	INRCOD IS 'Reason              Code', 
	INPT# IS 'Returned            Part #', 
	ORIGPER IS 'G/L Year            G/L Period', 
	RANPER IS 'G/L Year            G/L Period', 
	INTOTI IS 'Item Total          (not including      discounts)', 
	INFAMT IS 'Item                Freight             Amount', 
	INDPCD IS 'RANS                Action              Code', 
	INCUST IS 'Customer            Number') ; 
  
LABEL ON COLUMN RLARP.VW_FFCIRAN 
(DHINV# TEXT IS 'Invoice Number', 
	DILIN# TEXT IS 'Line Number', 
	DIGLCD TEXT IS 'GL Distr Code', 
	DIREAS TEXT IS 'Reason Code', 
	DIEXT TEXT IS 'Extension', 
	DICTEX TEXT IS 'Cost Extension', 
	DIQTSH TEXT IS 'Quantity Shipped', 
	DHTOTI TEXT IS 'Include FST & PST', 
	DCORD# TEXT IS 'Order Number', 
	INCRD# TEXT IS 'Credit Number', 
	INITM# TEXT IS 'Credit Detail', 
	INRAN# TEXT IS 'Return Author. Number', 
	INRNDR TEXT IS 'Return Authorization Document Number', 
	ININV# TEXT IS 'Invoice Number', 
	INIITM TEXT IS 'Invoice Item Number', 
	INPLNT TEXT IS 'Plant Code', 
	INRNDI TEXT IS 'Return Authorization Document Item Number', 
	INCRED TEXT IS 'Credit Note Issued', 
	INRCOD TEXT IS 'Reason Code', 
	INPT# TEXT IS 'Returned Part #', 
	ORIGPER TEXT IS 'G/L Year G/L Period', 
	RANPER TEXT IS 'G/L Year G/L Period', 
	INTOTI TEXT IS 'Item Total (not including discounts)', 
	INFAMT TEXT IS 'Item Freight Amount', 
	INDPCD TEXT IS 'RANS Action Code', 
	INCUST TEXT IS 'Customer Number') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFCIRAN TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFCIRAN TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFCOPR (
	COMP, 
	DESCR, 
	CURR, 
	GL, 
	AR, 
	AP, 
	FA, 
	IC, 
	CONS) 
	AS 
	SELECT  
			LTRIM(RTRIM(A9)) AS COMP,  
			A30 AS DESCR,  
			SUBSTR(C.A249,242,2) CURR,  
			SUBSTR(C.A249,32,4) AS GL,  
			SUBSTR(C.A249,190,4) AS AR,  
			SUBSTR(C.A249,182,4) AS AP,  
			SUBSTR(C.A249,198,4) AS FA,  
			SUBSTR(C.A249,238,4) AS IC,  
			SUBSTR(D.A249,9,5) CONS_FUNC  
		FROM  
			LGDAT.CODE  
			LEFT OUTER JOIN LGDAT.NAME C ON  
				'C0000'||LTRIM(RTRIM(A9)) = C.A7  
			LEFT OUTER JOIN LGDAT.NAME D ON  
				'D0000'||LTRIM(RTRIM(A9)) = D.A7  
		WHERE  
			A2 = 'AA' OR A2 IS NULL ; 
  
LABEL ON TABLE RLARP.VW_FFCOPR 
	IS 'Mast - Companies & current fiscal periods' ; 
  
LABEL ON COLUMN RLARP.VW_FFCOPR 
(DESCR IS 'Description         Usually') ; 
  
LABEL ON COLUMN RLARP.VW_FFCOPR 
(DESCR TEXT IS 'Description Usually') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFCOPR TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFCOPR TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFCUST (
	BVCUST, 
	BVNAME, 
	CGRP, 
	BVSTAT, 
	BVREAS, 
	BVCLAS, 
	BVCOMP, 
	BVARCD, 
	BVCTRY, 
	BVPRCD, 
	BVSALM, 
	BVTERR, 
	BVCURR, 
	BVTERM, 
	DESCR, 
	PAYDATE, 
	PAYDAYS, 
	PAYPERC, 
	DISCDAYS, 
	DISCP, 
	BVFOBC) 
	AS 
	SELECT  
		BVCUST,  
		BVNAME,  
		COALESCE(CGRP,BVNAME) CUSTDESCR,  
		BVSTAT,  
		BVREAS,  
		BVCLAS,  
		BVCOMP,  
		BVARCD,  
		BVCTRY,  
		BVPRCD,  
		BVPOST  
		BVSALM,  
		BVTERR,  
		BVCURR,  
		BVTERM,  
		DESCR,  
		PAYDATE,  
		PAYDAYS,  
		PAYPERC,  
		DISCDAYS,  
		DISCP,  
		BVFOBC  
	FROM  
		LGDAT.CUST CM  
		LEFT OUTER JOIN RLARP.FFCUST CG ON  
			CUSTN = BVCUST  
		LEFT OUTER JOIN RLARP.VW_FFTMCD ON  
			TERM = BVTERM ; 
  
LABEL ON TABLE RLARP.VW_FFCUST 
	IS 'Sales - Customers' ; 
  
LABEL ON COLUMN RLARP.VW_FFCUST 
(BVCUST IS 'Customer            Number', 
	BVNAME IS 'Customer            Name', 
	BVSTAT IS 'Customer            Status', 
	BVREAS IS 'Inactive            Reason', 
	BVCLAS IS 'Customer            Class', 
	BVCOMP IS 'Company             Number', 
	BVARCD IS 'A/R                 Code', 
	BVCTRY IS 'Country', 
	BVPRCD IS 'Province            Code', 
	BVSALM IS 'Postal              Code', 
	BVTERR IS 'Territory           Code', 
	BVCURR IS 'Currency            Code', 
	BVTERM IS 'Terms               Code', 
	BVFOBC IS 'FOB                 Code') ; 
  
LABEL ON COLUMN RLARP.VW_FFCUST 
(BVCUST TEXT IS 'Customer Number', 
	BVNAME TEXT IS 'Customer Name', 
	BVSTAT TEXT IS 'Customer Status', 
	BVREAS TEXT IS 'Inactive Reason', 
	BVCLAS TEXT IS 'Customer Class', 
	BVCOMP TEXT IS 'Company Number', 
	BVARCD TEXT IS 'A/R Code', 
	BVCTRY TEXT IS 'Country', 
	BVPRCD TEXT IS 'Province Code', 
	BVSALM TEXT IS 'Postal Code', 
	BVTERR TEXT IS 'Territory Code', 
	BVCURR TEXT IS 'Currency Code', 
	BVTERM TEXT IS 'Terms Code', 
	BVFOBC TEXT IS 'FOB Code') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFCUST TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFCUST TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFGLPD (
	COMP, 
	FSYR, 
	PERDS, 
	PERD, 
	FSPR, 
	SDAT, 
	EDAT, 
	CAPR, 
	NDAYS) 
	AS 
	SELECT 
		N1COMP COMP, N1CCYY FSYR, KPMAXP PERDS, DIGITS(N1FSPP) PERD, 
		DIGITS(N1FSYP) FSPR,  
		N1SD01 SDAT, N1ED01 EDAT, 
		SUBSTR(CHAR(N1ED01),3,2)||SUBSTR(CHAR(N1ED01),6,2) CAPR,  
		N1ED01 - N1SD01 +1 NDAYS 
	  
	FROM 
		LGDAT.GLDATREF 
		INNER JOIN LGDAT.GLDATE ON 
			KPCOMP = N1COMP AND 
			KPCCYY = N1CCYY ; 
  
LABEL ON TABLE RLARP.VW_FFGLPD 
	IS 'Acct - Accounting Periods by Company' ; 
  
LABEL ON COLUMN RLARP.VW_FFGLPD 
(COMP IS 'Company', 
	FSYR IS 'Fiscal              Year', 
	PERDS IS 'Periods             /Year', 
	SDAT IS 'Starting            Date ', 
	EDAT IS 'Ending              Date ') ; 
  
LABEL ON COLUMN RLARP.VW_FFGLPD 
(COMP TEXT IS 'Company', 
	FSYR TEXT IS 'Fiscal Year', 
	PERDS TEXT IS 'Periods /Year', 
	SDAT TEXT IS 'Starting Date', 
	EDAT TEXT IS 'Ending Date') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFGLPD TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFGLPD TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFICSTX (
	V6PART, 
	V6PLNT, 
	V6STAT, 
	V6RPLN, 
	V6UNTI, 
	RECENTCOST, 
	STD_DATE, 
	STDCOST, 
	MATERIAL, 
	LABOR, 
	FIXED, 
	"VARIABLE", 
	OTHER, 
	CURR, 
	SHIP_DUTY_WHSE_OTH FOR COLUMN SHIP_00001) 
	AS 
	SELECT  
		V6PART, V6PLNT, V6STAT, V6RPLN, V6UNTI,  
		COALESCE(CGACCS, CHACCS, Y0ACCS) AS RECENTCOST,  
		CHAR(COALESCE(CGSDAT, CHSDAT, Y0SDAT)) STD_DATE,  
		COALESCE(CGSTCS, CHSTCS, Y0STCS) AS STDCOST,  
		COALESCE(CGMATS, CHSUC, Y0SMAT) AS MATERIAL,  
		COALESCE(CGLABS, Y0SLAB, 0) AS LABOR,  
		COALESCE(CGBRFS, Y0SFBR, 0) AS FIXED,  
		COALESCE(CGBRVS, Y0SVBR, 0) AS VARIABLE,  
		COALESCE(CGSTOC, Y0SOTC, 0) AS OTHER,  
		COALESCE(Y0SOC,CHSCC, 0) CURR,  
		COALESCE(Y0SSHC,CHSFC+CHSDC+CHS1C+CHS2C+CHSDWC, 0) AS SHIP_DUTY_WHSE_OTH  
	FROM  
		LGDAT.STKA  
		LEFT OUTER JOIN LGDAT.ICSTM ICSTM ON  
			CGPART = V6PART AND  
			CGPLNT = V6PLNT  
		LEFT OUTER JOIN LGDAT.ICSTP ICSTP ON  
			CHPART = V6PART AND  
			CHPLNT = V6PLNT  
		LEFT OUTER JOIN LGDAT.ICSTR ICSTR ON  
			Y0PART = V6PART AND  
			Y0PLNT = V6PLNT  
	WHERE  
		CHAR(COALESCE(CGSDAT, CHSDAT, Y0SDAT)) <> '' ; 
  
LABEL ON TABLE RLARP.VW_FFICSTX 
	IS 'Inv - ICSTM,P,R stacked' ; 
  
LABEL ON COLUMN RLARP.VW_FFICSTX 
(V6PART IS 'Part                Number', 
	V6PLNT IS 'Plant               Code', 
	V6STAT IS 'Inventory           Item                Status', 
	V6RPLN IS 'Replenishment       Type', 
	V6UNTI IS 'Unit                Of                  Issue') ; 
  
LABEL ON COLUMN RLARP.VW_FFICSTX 
(V6PART TEXT IS 'Part Number', 
	V6PLNT TEXT IS 'Plant Code', 
	V6STAT TEXT IS 'Inventory Item Status', 
	V6RPLN TEXT IS 'Replenishment Type', 
	V6UNTI TEXT IS 'Unit Of Issue') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFICSTX TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFICSTX TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFINVD (
	FSPR, 
	CAPR, 
	FSYR, 
	INV_COMP, 
	INV_PLNT, 
	INV_CURR, 
	COMP_CURR, 
	BILL_REMIT_TO FOR COLUMN BILL_00001, 
	BILL_CUST_CLASS FOR COLUMN BILL_00002, 
	BILL_CUST, 
	BILL_PROV, 
	BILL_CTRY, 
	SHIP_REMIT_TO FOR COLUMN SHIP_00001, 
	SHIP_CUST_CLASS FOR COLUMN SHIP_00002, 
	SHIP_CUST, 
	SHIP_PROV, 
	SHIP_CTRY, 
	GLDC, 
	GLEC, 
	REAS, 
	PROMOTION, 
	INV_TYPE, 
	TRADE_NAME, 
	"PART", 
	MOLD, 
	MAJG, 
	MING, 
	MAJS, 
	MINS, 
	CMSGL, 
	FGRP, 
	QTY_SHIP, 
	COST, 
	INVOICE, 
	COST_USD, 
	INVOICE_USD FOR COLUMN INVOI00001, 
	TERMS) 
	AS 
	SELECT  
		DIGITS(DHARYR)||DIGITS(DHARPR) FSPR,  
		CAPR,  
		FSYR,  
		DHCOMP INV_COMP,  
		DHPLNT INV_PLNT,  
		DHCURR INV_CURR,  
		CURR COMP_CURR,  
		BC.BVCOMP BILL_REMIT_TO,  
		BC.BVCLAS BILL_CUST_CLASS,  
		BC.BVCUST||' - '||RTRIM(BC.BVNAME) BILL_CUST,  
		BC.BVPRCD BILL_PROV,  
		BC.BVCTRY BILL_CTRY,  
		SC.BVCOMP SHIP_REMIT_TO,  
		SC.BVCLAS SHIP_CUST_CLASS,  
		SC.BVCUST||' - '||RTRIM(SC.BVNAME) SHIP_CUST,  
		SC.BVPRCD SHIP_PROV,  
		SC.BVCTRY SHIP_CTRY,  
		DIGLCD||' - '||RTRIM(G.A30) GLCODE,  
		GLEC,  
		DIREAS||' - '||RTRIM(R.A30) REAS,  
		RTRIM(DCPROM) PROMOTION,  
		DHINCR INV_TYPE,  
		SUBSTR(CUSTPART,1,1) TRADE_NAME,  
		DIPART PART, SUBSTR(DIPART,1,8) MOLD,  
		MAJG,  
		MING,  
		MAJS,  
		MINS,  
		DIGITS(ZWSAL#) CMSGL,  
		AZGROP||' - '||RTRIM(BQ1TITL) FGRP,  
		SUM(DIQTSH*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END) QTY_SHIP,  
		ROUND(SUM(DICTEX*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END),2) COST,  
		ROUND(SUM(DIEXT*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END),2) INVOICE,  
		ROUND(SUM(DICTEX*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END*CX.RATE),2) COST_USD,  
		ROUND(SUM(DIEXT*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END*IX.RATE),2) INVOICE_USD,  
		DHTRCD  
	FROM  
		LGDAT.OIH  
		INNER JOIN LGDAT.OID ON  
			DIINV# = DHINV#  
		LEFT OUTER JOIN LGDAT.OCRH ON  
			DCORD# = DHORD#  
		LEFT OUTER JOIN LGDAT.CODE G ON  
			G.A2 = 'EE' AND  
			LTRIM(RTRIM(G.A9)) = DIGLCD  
		LEFT OUTER JOIN LGDAT.CODE R ON  
			R.A2 = 'RS' AND  
			LTRIM(RTRIM(R.A9)) = DIREAS  
		LEFT OUTER JOIN LGDAT.CUST BC ON  
			BC.BVCUST = DHBCS#  
		LEFT OUTER JOIN LGDAT.CUST SC ON  
			SC.BVCUST = DHSCS#  
		LEFT OUTER JOIN RLARP.VW_FFITEMM ON  
			ITEM = DIPART  
		LEFT OUTER JOIN LGDAT.PLNT ON  
			YAPLNT = DHPLNT  
		LEFT OUTER JOIN LGDAT.GLIE ON  
			Y1PLNT = DHPLNT AND  
			Y1GLEC = GLEC  
		LEFT OUTER JOIN LGDAT.ARMASC ON  
			ZWCOMP = BC.BVCOMP AND  
			ZWKEY1 = BC.BVARCD AND  
			ZWKEY2 = DIGLCD  
		LEFT OUTER JOIN RLARP.FFCRET IX ON  
			IX.PERD = DIGITS(DHARYR)||DIGITS(DHARPR) AND  
			IX.FCUR = DHCURR AND  
			IX.TCUR = 'US' AND  
			IX.RTYP = 'ME'  
		LEFT OUTER JOIN RLARP.VW_FFCOPR CP ON  
			CP.COMP = DHCOMP  
		LEFT OUTER JOIN RLARP.FFCRET CX ON  
			CX.PERD = DIGITS(DHARYR)||DIGITS(DHARPR) AND  
			CX.FCUR = CURR AND  
			CX.TCUR = 'US' AND  
			CX.RTYP = 'ME'  
		LEFT OUTER JOIN LGDAT.MAST ON  
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = DIGITS(ZWSAL#) 	  
		LEFT OUTER JOIN LGDAT.FGRP ON  
			BQ1GRP = AZGROP  
		LEFT OUTER JOIN RLARP.VW_FFGLPD GP ON  
			GP.COMP = DHCOMP AND 
			GP.FSPR = DIGITS(DHARYR)||DIGITS(DHARPR)  
	GROUP BY  
		DIGITS(DHARYR)||DIGITS(DHARPR), 	  
		CAPR,  
		FSYR,  
		DHCOMP,  
		DHPLNT,  
		DHCURR,  
		CURR,  
		BC.BVCOMP,  
		BC.BVCLAS,  
		BC.BVCUST||' - '||RTRIM(BC.BVNAME),  
		BC.BVPRCD,  
		BC.BVCTRY,  
		SC.BVCOMP,  
		SC.BVCLAS,  
		SC.BVCUST||' - '||RTRIM(SC.BVNAME),  
		SC.BVPRCD,  
		SC.BVCTRY,  
		DIGLCD||' - '||RTRIM(G.A30),  
		GLEC,  
		DIREAS||' - '||RTRIM(R.A30),  
		RTRIM(DCPROM),  
		DHINCR,  
		SUBSTR(CUSTPART,1,1),  
		DIPART, SUBSTR(DIPART,1,8),																				 
		MAJG,  
		MING,  
		MAJS,  
		MINS,  
		DIGITS(ZWSAL#),  
		AZGROP||' - '||RTRIM(BQ1TITL),  
		DHTRCD ; 

		LABEL ON TABLE RLARP.VW_FFINVD 
		IS 'Sales - Invoice Detail' ; 

LABEL ON COLUMN RLARP.VW_FFINVD 
(FSYR IS 'Fiscal              Year', 
	INV_COMP IS 'Company             Number', 
	INV_PLNT IS 'Plant               Code', 
	INV_CURR IS 'Currency            Code', 
	BILL_REMIT_TO IS 'Company             Number', 
	BILL_CUST_CLASS IS 'Customer            Class', 
	BILL_PROV IS 'Province            Code', 
	BILL_CTRY IS 'Country', 
	SHIP_REMIT_TO IS 'Company             Number', 
	SHIP_CUST_CLASS IS 'Customer            Class', 
	SHIP_PROV IS 'Province            Code', 
	SHIP_CTRY IS 'Country', 
	INV_TYPE IS 'Invoice             Credit', 
	"PART" IS 'Part                Number', 
	TERMS IS 'Terms               Code') ; 
  
LABEL ON COLUMN RLARP.VW_FFINVD 
(FSYR TEXT IS 'Fiscal Year', 
	INV_COMP TEXT IS 'Company Number', 
	INV_PLNT TEXT IS 'Plant Code', 
	INV_CURR TEXT IS 'Currency Code', 
	BILL_REMIT_TO TEXT IS 'Company Number', 
	BILL_CUST_CLASS TEXT IS 'Customer Class', 
	BILL_PROV TEXT IS 'Province Code', 
	BILL_CTRY TEXT IS 'Country', 
	SHIP_REMIT_TO TEXT IS 'Company Number', 
	SHIP_CUST_CLASS TEXT IS 'Customer Class', 
	SHIP_PROV TEXT IS 'Province Code', 
	SHIP_CTRY TEXT IS 'Country', 
	INV_TYPE TEXT IS 'Invoice Credit', 
	"PART" TEXT IS 'Part Number', 
	TERMS TEXT IS 'Terms Code') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFINVD TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFINVD TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFINVS (
	FSPR, 
	CAPR, 
	FSYR, 
	QRTR, 
	INV_COMP, 
	INV_PLNT, 
	INV_CURR, 
	COMP_CURR, 
	BILL_REMIT_TO FOR COLUMN BILL_00001, 
	BILL_CUST_CLASS FOR COLUMN BILL_00002, 
	BILL_CUST, 
	BILL_CITY, 
	BILL_PROV, 
	BILL_CTRY, 
	SHIP_REMIT_TO FOR COLUMN SHIP_00001, 
	SHIP_CUST_CLASS FOR COLUMN SHIP_00002, 
	SHIP_CUST, 
	SHIP_CITY, 
	SHIP_PROV, 
	SHIP_CTRY, 
	GLCODE, 
	GLEC, 
	REAS, 
	PROMOTION, 
	INV_TYPE, 
	TRADE_NAME, 
	MAJG, 
	MING, 
	MAJS, 
	MINS, 
	CMSGL, 
	FGRP, 
	QTY_SHIP, 
	COST, 
	INVOICE, 
	COST_USD, 
	INVOICE_USD FOR COLUMN INVOI00001) 
	AS 
	SELECT  
		DIGITS(DHARYR)||DIGITS(DHARPR) FSPR,  
		CAPR,  
		FSYR,  
		'' QRTR,  
		DHCOMP INV_COMP,  
		DHPLNT INV_PLNT,  
		DHCURR INV_CURR,  
		CURR COMP_CURR,  
		BC.BVCOMP BILL_REMIT_TO,  
		BC.BVCLAS BILL_CUST_CLASS,  
		BC.BVCUST||' - '||RTRIM(BC.BVNAME) BILL_CUST,  
		BC.BVCITY, 
		BC.BVPRCD BILL_PROV,  
		BC.BVCTRY BILL_CTRY,  
		SC.BVCOMP SHIP_REMIT_TO,  
		SC.BVCLAS SHIP_CUST_CLASS,  
		SC.BVCUST||' - '||RTRIM(SC.BVNAME) SHIP_CUST,  
		SC.BVCITY, 
		SC.BVPRCD SHIP_PROV,  
		SC.BVCTRY SHIP_CTRY,  
		DIGLCD||' - '||RTRIM(G.A30) GLCODE,  
		GLEC,  
		DIREAS||' - '||RTRIM(R.A30) REAS,  
		RTRIM(DCPROM) PROMOTION,  
		DHINCR INV_TYPE,  
		SUBSTR(CUSTPART,1,1) TRADE_NAME,  
		MAJG,  
		MING,  
		MAJS,  
		MINS,  
		DIGITS(ZWSAL#) CMSGL,  
		AZGROP||' - '||RTRIM(BQ1TITL) FGRP,  
		SUM(DIQTSH*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END) QTY_SHIP,  
		ROUND(SUM(DICTEX*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END),2) COST,  
		ROUND(SUM(DIEXT*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END),2) INVOICE,  
		ROUND(SUM(DICTEX*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END*CX.RATE),2) COST_USD,  
		ROUND(SUM(DIEXT*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END*IX.RATE),2) INVOICE_USD  
	FROM  
		LGDAT.OIH  
		INNER JOIN LGDAT.OID ON  
			DIINV# = DHINV#  
		LEFT OUTER JOIN LGDAT.OCRH ON  
			DCORD# = DHORD#  
		LEFT OUTER JOIN LGDAT.CODE G ON  
			G.A2 = 'EE' AND  
			LTRIM(RTRIM(G.A9)) = DIGLCD  
		LEFT OUTER JOIN LGDAT.CODE R ON  
			R.A2 = 'RS' AND  
			LTRIM(RTRIM(R.A9)) = DIREAS  
		LEFT OUTER JOIN LGDAT.CUST BC ON  
			BC.BVCUST = DHBCS#  
		LEFT OUTER JOIN LGDAT.CUST SC ON  
			SC.BVCUST = DHSCS#  
		LEFT OUTER JOIN RLARP.VW_FFITEMM ON  
			ITEM = DIPART  
		LEFT OUTER JOIN LGDAT.PLNT ON  
			YAPLNT = DHPLNT  
		LEFT OUTER JOIN LGDAT.GLIE ON  
			Y1PLNT = DHPLNT AND  
			Y1GLEC = GLEC  
		LEFT OUTER JOIN LGDAT.ARMASC ON  
			ZWCOMP = BC.BVCOMP AND  
			ZWKEY1 = BC.BVARCD AND  
			ZWKEY2 = DIGLCD  
		LEFT OUTER JOIN RLARP.FFCRET IX ON  
			IX.PERD = DIGITS(DHARYR)||DIGITS(DHARPR) AND  
			IX.FCUR = DHCURR AND  
			IX.TCUR = 'US' AND  
			IX.RTYP = 'ME'  
		LEFT OUTER JOIN RLARP.VW_FFCOPR CP ON  
			CP.COMP = DHCOMP  
		LEFT OUTER JOIN RLARP.FFCRET CX ON  
			CX.PERD = DIGITS(DHARYR)||DIGITS(DHARPR) AND  
			CX.FCUR = CURR AND  
			CX.TCUR = 'US' AND  
			CX.RTYP = 'ME'  
		LEFT OUTER JOIN LGDAT.MAST ON  
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = DIGITS(ZWSAL#) 	  
		LEFT OUTER JOIN LGDAT.FGRP ON  
			BQ1GRP = AZGROP  
		LEFT OUTER JOIN RLARP.VW_FFGLPD GP ON  
			GP.COMP = DHCOMP AND  
			FSPR = DIGITS(DHARYR)||DIGITS(DHARPR) 
	GROUP BY  
		DIGITS(DHARYR)||DIGITS(DHARPR), 	  
		CAPR,  
		FSYR,  
		DHCOMP,  
		DHPLNT,  
		DHCURR,  
		CURR,  
		BC.BVCOMP,  
		BC.BVCLAS,  
		BC.BVCUST||' - '||RTRIM(BC.BVNAME),  
		BC.BVCITY, 
		BC.BVPRCD,  
		BC.BVCTRY,  
		SC.BVCOMP,  
		SC.BVCLAS,  
		SC.BVCUST||' - '||RTRIM(SC.BVNAME),  
		SC.BVCITY, 
		SC.BVPRCD,  
		SC.BVCTRY,  
		DIGLCD||' - '||RTRIM(G.A30),  
		GLEC,  
		DIREAS||' - '||RTRIM(R.A30),  
		RTRIM(DCPROM),  
		DHINCR,  
		SUBSTR(CUSTPART,1,1),  
		MAJG,  
		MING,  
		MAJS,  
		MINS,  
		DIGITS(ZWSAL#),  
		AZGROP||' - '||RTRIM(BQ1TITL) ; 

	LABEL ON COLUMN RLARP.VW_FFINVS 
	  (FSYR IS 'Fiscal              Year', 
	INV_COMP IS 'Company             Number', 
	INV_PLNT IS 'Plant               Code', 
	INV_CURR IS 'Currency            Code', 
	BILL_REMIT_TO IS 'Company             Number', 
	BILL_CUST_CLASS IS 'Customer            Class', 
	BILL_CITY IS 'City', 
	BILL_PROV IS 'Province            Code', 
	BILL_CTRY IS 'Country', 
	SHIP_REMIT_TO IS 'Company             Number', 
	SHIP_CUST_CLASS IS 'Customer            Class', 
	SHIP_CITY IS 'City', 
	SHIP_PROV IS 'Province            Code', 
	SHIP_CTRY IS 'Country', 
	INV_TYPE IS 'Invoice             Credit') ; 
  
LABEL ON COLUMN RLARP.VW_FFINVS 
(FSYR TEXT IS 'Fiscal Year', 
	INV_COMP TEXT IS 'Company Number', 
	INV_PLNT TEXT IS 'Plant Code', 
	INV_CURR TEXT IS 'Currency Code', 
	BILL_REMIT_TO TEXT IS 'Company Number', 
	BILL_CUST_CLASS TEXT IS 'Customer Class', 
	BILL_CITY TEXT IS 'City', 
	BILL_PROV TEXT IS 'Province Code', 
	BILL_CTRY TEXT IS 'Country', 
	SHIP_REMIT_TO TEXT IS 'Company Number', 
	SHIP_CUST_CLASS TEXT IS 'Customer Class', 
	SHIP_CITY TEXT IS 'City', 
	SHIP_PROV TEXT IS 'Province Code', 
	SHIP_CTRY TEXT IS 'Country', 
	INV_TYPE TEXT IS 'Invoice Credit') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFINVS TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFINVS TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFINVSP (
	FSPR, 
	CAPR, 
	FSYR, 
	QRTR, 
	INV_COMP, 
	INV_PLNT, 
	INV_CURR, 
	COMP_CURR, 
	BILL_REMIT_TO FOR COLUMN BILL_00001, 
	BILL_CUST_CLASS FOR COLUMN BILL_00002, 
	BILL_CUST, 
	BILL_PROV, 
	BILL_CTRY, 
	SHIP_REMIT_TO FOR COLUMN SHIP_00001, 
	SHIP_CUST_CLASS FOR COLUMN SHIP_00002, 
	SHIP_CUST, 
	SHIP_PROV, 
	SHIP_CTRY, 
	GLCODE, 
	GL_EXP_CODE FOR COLUMN GL_EX00001, 
	REAS, 
	PROMOTION, 
	INV_TYPE, 
	"PART", 
	TRADE_NAME, 
	MAJG, 
	MING, 
	MAJS, 
	MINS, 
	CMSGL, 
	FGRP, 
	QTY_SHIP, 
	COST, 
	INVOICE, 
	COST_USD, 
	INVOICE_USD FOR COLUMN INVOI00001) 
	AS 
	SELECT  
		DIGITS(DHARYR)||DIGITS(DHARPR) FSPR,  
		CAPR,  
		FSYR,  
		QRTR,  
		DHCOMP INV_COMP,  
		DHPLNT INV_PLNT,  
		DHCURR INV_CURR,  
		CURR COMP_CURR,  
		BC.BVCOMP BILL_REMIT_TO,  
		BC.BVCLAS BILL_CUST_CLASS,  
		BC.BVCUST||' - '||RTRIM(BC.BVNAME) BILL_CUST,  
		BC.BVPRCD BILL_PROV,  
		BC.BVCTRY BILL_CTRY,  
		SC.BVCOMP SHIP_REMIT_TO,  
		SC.BVCLAS SHIP_CUST_CLASS,  
		SC.BVCUST||' - '||RTRIM(SC.BVNAME) SHIP_CUST,  
		SC.BVPRCD SHIP_PROV,  
		SC.BVCTRY SHIP_CTRY,  
		DIGLCD||' - '||RTRIM(G.A30) GLCODE,  
		GLEC,  
		DIREAS||' - '||RTRIM(R.A30) REAS,  
		RTRIM(DCPROM) PROMOTION,  
		DHINCR INV_TYPE, DIPART PART,  
		SUBSTR(CUSTPART,1,1) TRADE_NAME,  
		MAJG,  
		MING,  
		MAJS,  
		MINS,  
		DIGITS(ZWSAL#) CMSGL,  
		AZGROP||' - '||RTRIM(BQ1TITL) FGRP,  
		SUM(DIQTSH*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END) QTY_SHIP,  
		ROUND(SUM(DICTEX*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END),2) COST,  
		ROUND(SUM(DIEXT*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END),2) INVOICE,  
		ROUND(SUM(DICTEX*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END*CX.RATE),2) COST_USD,  
		ROUND(SUM(DIEXT*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END*IX.RATE),2) INVOICE_USD  
	FROM  
		LGDAT.OIH  
		INNER JOIN LGDAT.OID ON  
			DIINV# = DHINV#  
		LEFT OUTER JOIN LGDAT.OCRH ON  
			DCORD# = DHORD#  
		LEFT OUTER JOIN LGDAT.CODE G ON  
			G.A2 = 'EE' AND  
			LTRIM(RTRIM(G.A9)) = DIGLCD  
		LEFT OUTER JOIN LGDAT.CODE R ON  
			R.A2 = 'RS' AND  
			LTRIM(RTRIM(R.A9)) = DIREAS  
		LEFT OUTER JOIN LGDAT.CUST BC ON  
			BC.BVCUST = DHBCS#  
		LEFT OUTER JOIN LGDAT.CUST SC ON  
			SC.BVCUST = DHSCS#  
		LEFT OUTER JOIN RLARP.VW_FFITEMM ON  
			ITEM = DIPART  
		LEFT OUTER JOIN LGDAT.PLNT ON  
			YAPLNT = DHPLNT  
		LEFT OUTER JOIN LGDAT.GLIE ON  
			Y1PLNT = DHPLNT AND  
			Y1GLEC = GLEC  
		LEFT OUTER JOIN LGDAT.ARMASC ON  
			ZWCOMP = BC.BVCOMP AND  
			ZWKEY1 = BC.BVARCD AND  
			ZWKEY2 = DIGLCD  
		LEFT OUTER JOIN RLARP.FFCRET IX ON  
			IX.PERD = DIGITS(DHARYR)||DIGITS(DHARPR) AND  
			IX.FCUR = DHCURR AND  
			IX.TCUR = 'US' AND  
			IX.RTYP = 'ME'  
		LEFT OUTER JOIN RLARP.VW_FFCOPR ON  
			COMP = DHCOMP  
		LEFT OUTER JOIN RLARP.FFCRET CX ON  
			CX.PERD = DIGITS(DHARYR)||DIGITS(DHARPR) AND  
			CX.FCUR = CURR AND  
			CX.TCUR = 'US' AND  
			CX.RTYP = 'ME'  
		LEFT OUTER JOIN LGDAT.MAST ON  
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = DIGITS(ZWSAL#) 	  
		LEFT OUTER JOIN LGDAT.FGRP ON  
			BQ1GRP = AZGROP  
		LEFT OUTER JOIN RLARP.FFPERD ON  
			FSPR = DIGITS(DHARYR)||DIGITS(DHARPR)  
	GROUP BY  
		DIGITS(DHARYR)||DIGITS(DHARPR), 	  
		CAPR,  
		FSYR,  
		QRTR,  
		DHCOMP,  
		DHPLNT,  
		DHCURR,  
		CURR,  
		BC.BVCOMP,  
		BC.BVCLAS,  
		BC.BVCUST||' - '||RTRIM(BC.BVNAME),  
		BC.BVPRCD,  
		BC.BVCTRY,  
		SC.BVCOMP,  
		SC.BVCLAS,  
		SC.BVCUST||' - '||RTRIM(SC.BVNAME),  
		SC.BVPRCD,  
		SC.BVCTRY,  
		DIGLCD||' - '||RTRIM(G.A30),  
		GLEC,  
		DIREAS||' - '||RTRIM(R.A30),  
		RTRIM(DCPROM),  
		DHINCR, DIPART,  
		SUBSTR(CUSTPART,1,1),  
		MAJG,  
		MING,  
		MAJS,  
		MINS,  
		DIGITS(ZWSAL#),  
		AZGROP||' - '||RTRIM(BQ1TITL)   
		RCDFMT VW_FFINVS  ; 

		LABEL ON TABLE RLARP.VW_FFINVSP 
		IS 'Sales - Invoice Summary & Part' ; 

LABEL ON COLUMN RLARP.VW_FFINVSP 
(INV_COMP IS 'Company             Number', 
	INV_PLNT IS 'Plant               Code', 
	INV_CURR IS 'Currency            Code', 
	BILL_REMIT_TO IS 'Company             Number', 
	BILL_CUST_CLASS IS 'Customer            Class', 
	BILL_PROV IS 'Province            Code', 
	BILL_CTRY IS 'Country', 
	SHIP_REMIT_TO IS 'Company             Number', 
	SHIP_CUST_CLASS IS 'Customer            Class', 
	SHIP_PROV IS 'Province            Code', 
	SHIP_CTRY IS 'Country', 
	INV_TYPE IS 'Invoice             Credit', 
	"PART" IS 'Part                Number') ; 
  
LABEL ON COLUMN RLARP.VW_FFINVSP 
(INV_COMP TEXT IS 'Company Number', 
	INV_PLNT TEXT IS 'Plant Code', 
	INV_CURR TEXT IS 'Currency Code', 
	BILL_REMIT_TO TEXT IS 'Company Number', 
	BILL_CUST_CLASS TEXT IS 'Customer Class', 
	BILL_PROV TEXT IS 'Province Code', 
	BILL_CTRY TEXT IS 'Country', 
	SHIP_REMIT_TO TEXT IS 'Company Number', 
	SHIP_CUST_CLASS TEXT IS 'Customer Class', 
	SHIP_PROV TEXT IS 'Province Code', 
	SHIP_CTRY TEXT IS 'Country', 
	INV_TYPE TEXT IS 'Invoice Credit', 
	"PART" TEXT IS 'Part Number') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFINVSP TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFINVSP TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFITEMM (
	ITEM, 
	DESCR1, 
	DESCR2, 
	DESCR3, 
	MAJG, 
	MING, 
	MAJS, 
	MINS, 
	GLDC, 
	GLEC, 
	HARM, 
	CLASS, 
	WEIGHT, 
	WEIGHT_UOM, 
	SHIP_VOL, 
	SHIP_UOM, 
	DEF_PLNT, 
	CUSTPART, 
	ASSEMCODE, 
	STOCK_TYPE, 
	MAT_GRP) 
	AS 
	SELECT  
		AVPART ITEM,  
		RTRIM(AVDES1) DESCR1,  
		RTRIM(AVDES2) DESCR2,  
		RTRIM(AVDES3) DESCR3,  
		AVMAJG||' - '||RTRIM(BQDES) MAJG,  
		AVMING||' - '||RTRIM(BRDES) MING,  
		AVMAJS||' - '||RTRIM(MS.BSDES1) MAJS,  
		AVMINS||' - '||RTRIM(NS.BSDES1) MINS,  
		AVGLCD||' - '||RTRIM(GD.A30) GLDC,  
		AVGLED||' - '||RTRIM(GE.A30) GLEC,  
		AVHARM,  
		AVCLSS,  
		AVNWHT, AVNWUN, AVSVOL, AVSVUN, AVDPLT, AVCPT#, AVASSC, AVTYPE,  
		M.GROUP 	 	  
	FROM  
		RLARP.VW_FFSTKMX S  
		LEFT OUTER JOIN LGDAT.MAJG ON  
			BQGRP = AVMAJG  
		LEFT OUTER JOIN LGDAT.MMSL MS ON  
			MS.BSMJCD = AVMAJS AND  
			MS.BSMNCD = ''  
		LEFT OUTER JOIN LGDAT.MMSL NS ON  
			NS.BSMJCD = AVMAJS AND  
			NS.BSMNCD = AVMINS  
		LEFT OUTER JOIN LGDAT.MMGP ON  
			BRGRP = AVMAJG AND  
			BRMGRP = AVMING  
		LEFT OUTER JOIN LGDAT.CODE GE ON  
			RTRIM(LTRIM(GE.A9)) = AVGLED AND  
			GE.A2 = 'GE'  
		LEFT OUTER JOIN LGDAT.CODE GD ON  
			RTRIM(LTRIM(GD.A9)) = AVGLCD AND  
			GD.A2 = 'EE'  
		LEFT OUTER JOIN RLARP.FFMGRP M ON  
			PART = AVPART ; 
  
LABEL ON TABLE RLARP.VW_FFITEMM 
	IS 'Inv - All parts with group descriptions' ; 
  
LABEL ON COLUMN RLARP.VW_FFITEMM 
(ITEM IS 'Part                Number', 
	HARM IS 'Harmonization #', 
	CLASS IS 'Inventory           Class               Code', 
	WEIGHT IS 'Net Weight', 
	WEIGHT_UOM IS 'Net Weight          Unit', 
	SHIP_VOL IS 'Shipping            Volume', 
	SHIP_UOM IS 'Shipping            Volume              Unit', 
	DEF_PLNT IS 'Default             Plant               Code', 
	CUSTPART IS 'Customer            Part #', 
	ASSEMCODE IS 'Assembly            Code', 
	STOCK_TYPE IS 'Stock               Type') ; 
  
LABEL ON COLUMN RLARP.VW_FFITEMM 
(ITEM TEXT IS 'Part Number', 
	HARM TEXT IS 'Harmonization #', 
	CLASS TEXT IS 'Inventory Class Code', 
	WEIGHT TEXT IS 'Net Weight', 
	WEIGHT_UOM TEXT IS 'Net Weight Unit', 
	SHIP_VOL TEXT IS 'Shipping Volume', 
	SHIP_UOM TEXT IS 'Shipping Volume Unit', 
	DEF_PLNT TEXT IS 'Default Plant Code', 
	CUSTPART TEXT IS 'Customer Part #', 
	ASSEMCODE TEXT IS 'Assembly Code', 
	STOCK_TYPE TEXT IS 'Stock Type') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFITEMM TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFITEMM TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFJRNL (
	FSPR, 
	COMP, 
	BATCH, 
	JRNL#, 
	GL_BATCH, 
	POST_STAT, 
	REVERSING, 
	BATCH_DESCR FOR COLUMN BATCH00001, 
	JRNL_DESCR, 
	"SOURCE", 
	ENTERED_BY, 
	REVISED_BY, 
	JCDAT, 
	JTDAT, 
	JRDAT, 
	BCDAT, 
	UCJTOT, 
	LINES) 
	AS 
	SELECT  
		DIGITS(UCFSYR)||DIGITS(UCFSPR) AS FSPR,  
		UBCOMP COMP,  
		UBBTCH BATCH,  
		UCJRNL JRNL#,  
		UBPSBT GL_BATCH,  
		UBSTAT POST_STAT,  
		UCREVE REVERSING,  
		UBDESC BATCH_DESCR,  
		UCDESC JRNL_DESCR,  
		UCJSRC SOURCE,  
		UBCRBY AS ENTERED_BY,  
		UBRVBY AS REVISED_BY,  
		CHAR(UCCDAT) JCDAT,  
		CHAR(UCTDAT) JTDAT,  
		CHAR(UCRDAT) JRDAT,  
		CHAR(UBCDAT) BCDAT,  
		UCJTOT,  
		COUNT(UDLINE) LINES  
	FROM  
		LGDAT.JRNA  
		INNER JOIN LGDAT.JRNB ON  
			UCBTCH = UBBTCH AND  
			UCCOMP = UBCOMP  
		LEFT OUTER JOIN LGDAT.JRNC ON  
			UDCOMP = UCCOMP AND  
			UDBTCH = UCBTCH AND  
			UDJRNL = UCJRNL  
	GROUP BY  
		DIGITS(UCFSYR)||DIGITS(UCFSPR),  
		UBCOMP,  
		UBBTCH,  
		UCJRNL,  
		UBPSBT,  
		UBSTAT,  
		UCREVE,  
		UBDESC,  
		UCDESC,  
		UCJSRC,  
		UBCRBY,  
		UBRVBY,  
		CHAR(UCCDAT),  
		CHAR(UCTDAT),  
		CHAR(UCRDAT),  
		CHAR(UBCDAT),  
		UCJTOT ; 
  
LABEL ON TABLE RLARP.VW_FFJRNL 
	IS 'Acct - Journal batches and entries' ; 
  
LABEL ON COLUMN RLARP.VW_FFJRNL 
(COMP IS 'Company             Code', 
	BATCH IS 'Batch               Number', 
	JRNL# IS 'Journal             Number', 
	GL_BATCH IS 'Posting             Batch', 
	POST_STAT IS 'Status              Code', 
	REVERSING IS 'Reversing           Entry', 
	BATCH_DESCR IS 'Description', 
	JRNL_DESCR IS 'Description', 
	"SOURCE" IS 'Source', 
	ENTERED_BY IS 'Created             By User', 
	REVISED_BY IS 'Revised             By User', 
	UCJTOT IS 'Journal             Total') ; 
  
LABEL ON COLUMN RLARP.VW_FFJRNL 
(COMP TEXT IS 'Company Code', 
	BATCH TEXT IS 'Batch Number', 
	JRNL# TEXT IS 'Journal Number', 
	GL_BATCH TEXT IS 'Posting Batch', 
	POST_STAT TEXT IS 'Status Code', 
	REVERSING TEXT IS 'Reversing Entry', 
	BATCH_DESCR TEXT IS 'Description', 
	JRNL_DESCR TEXT IS 'Description', 
	"SOURCE" TEXT IS 'Source', 
	ENTERED_BY TEXT IS 'Created By User', 
	REVISED_BY TEXT IS 'Revised By User', 
	UCJTOT TEXT IS 'Journal Total') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFJRNL TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFJRNL TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFOEE (
	PERD, 
	NWPLNT, 
	ADEPT, 
	ARESC, 
	SDEPT, 
	SRESC, 
	RRATE, 
	QTYG, 
	QTYS, 
	STIME, 
	RTIME, 
	DTIME, 
	ABSLAB, 
	ABSOVH, 
	CODE) 
	AS 
	SELECT  
		PERD, NWPLNT, ADEPT, ARESC, SDEPT, SRESC, RRATE,  
		SUM(OAQTYG) QTYG,  
		SUM(OAQTYS) QTYS,  
		SUM(STIME) STIME,  
		SUM(RTIME) RTIME,  
		SUM(DTIME) DTIME,  
		SUM(ABSLAB) ABSLAB,  
		SUM(ABSOVH) ABSOVH,  
		CODE  
	FROM  
	( 
	  -----------------------------DOWNTIME-------------------------------------------- 
	SELECT  
		NWFSYY||DIGITS(NWFSPP) PERD, NWPLNT, NXDEPT ADEPT, NXRESC ARESC, '' SDEPT, '' SRESC,  
		0 RRATE,  
		0 OAQTYG, 0 OAQTYS,  
		0 STIME,  
		0 RTIME,  
		SUM(NXTIME) DTIME,  
		0 ABSLAB,  
		0 ABSOVH,  
		RTRIM(NXINDC)||' - '||RTRIM(AFDES1) CODE  
	FROM  
		LGDAT.RPRH  
		INNER JOIN LGDAT.RPRD ON  
			NWBTID = NXBTID  
		LEFT OUTER JOIN LGDAT.INDLBR ON  
			AFCODE = NXINDC  
	GROUP BY  
		NWFSYY||DIGITS(NWFSPP), NWPLNT, NXDEPT, NXRESC,RTRIM(NXINDC)||' - '||RTRIM(AFDES1)  

	UNION ALL  

	--------------------------------RUN TIME---------------------------------------- 
	SELECT  
		NWFSYY||DIGITS(NWFSPP) PERD, NWPLNT, OADEPT ADEPT, OARESC ARESC, AODEPT SDEPT, AORESC SRESC,  
		CASE ABVBRD WHEN 0 THEN IFNULL(AAVBRD,0) ELSE IFNULL(ABVBRD,0) END+CASE ABBRDR WHEN 0 THEN IFNULL(AABRDR,0) ELSE IFNULL(ABBRDR,0) END RRATE,  
		0 OAQTYG, 0 OAQTYS,  
		0 STIME,  
		SUM(OATIME) RTIME,  
		0 DTIME,  
		0 ABSLAB, 0 ABSOVH,  
		'02 - RUN' CODE  
	FROM  
		LGDAT.RPRR  
		INNER JOIN LGDAT.RPRH ON  
			NWBTID = OABTID  
		LEFT OUTER JOIN LGDAT.METHDR ON  
			AOPART = OAPART AND  
			AOPLNT = NWPLNT AND  
			AOSEQ# = OASEQ#  
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON  
			C1.IHPART = OAPART AND  
			C1.IHUNT2 = OAUNIT AND  
			C1.IHUNT1 = AOUNIT  
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON  
			C2.IHPART = OAPART AND  
			C2.IHUNT1 = OAUNIT AND  
			C2.IHUNT2 = AOUNIT  
		LEFT OUTER JOIN LGDAT.RESRE ON  
			ABDEPT = AODEPT AND  
			ABRESC = AORESC  
		LEFT OUTER JOIN LGDAT.DEPTS ON  
			ABDEPT = AADEPT  
		LEFT OUTER JOIN LGDAT.STKA ON  
			V6PART = OAPART AND  
			V6PLNT = NWPLNT  
	GROUP BY  
		NWFSYY||DIGITS(NWFSPP), NWPLNT, OADEPT, OARESC, AORESC, AODEPT,  
		CASE ABVBRD WHEN 0 THEN IFNULL(AAVBRD,0) ELSE IFNULL(ABVBRD,0) END+CASE ABBRDR WHEN 0 THEN IFNULL(AABRDR,0) ELSE IFNULL(ABBRDR,0) END  
	  
	UNION ALL  
	  
	  -------------------------------------EARNED HOURS------------------------------------------------ 
	SELECT  
		NWFSYY||DIGITS(NWFSPP) PERD, NWPLNT, OADEPT ADEPT, OARESC ARESC, AODEPT SDEPT, AORESC SRESC,  
		( 
			CASE ABVBRD WHEN 0 THEN IFNULL(AAVBRD,0) ELSE IFNULL(ABVBRD,0) END+  
			CASE ABBRDR WHEN 0 THEN IFNULL(AABRDR,0) ELSE IFNULL(ABBRDR,0) END  
		) RRATE,  
		SUM(OAQTYG) OAQTYG,  
		SUM(OAQTYS) OAQTYS,  
		SUM( 
			(CASE IFNULL(AORUNS,0) WHEN 0 THEN 0 ELSE 1/AORUNS END+AOSETP/1000000)*  
			FLOAT(OAQTYG+OAQTYS)*  
			COALESCE((C1.IHCNV1/C1.IHCNV2),(C2.IHCNV2/C2.IHCNV1),FLOAT(1))) STIME,  
		0 RTIME,  
		0 DTIME,  
		SUM( 
			CASE ABLABR WHEN 0 THEN IFNULL(AASTDR,0) ELSE IFNULL(ABLABR,0) END*  
			(CASE IFNULL(AORUNS,0) WHEN 0 THEN 0 ELSE 1/AORUNS END*AO#MEN/AO#MCH+AOSETP*AOSCRW/1000000)*  
			FLOAT(OAQTYG+OAQTYS)*  
			COALESCE((C1.IHCNV1/C1.IHCNV2),(C2.IHCNV2/C2.IHCNV1),FLOAT(1))  
		) ABSLAB,  
		SUM( 
			(CASE ABVBRD WHEN 0 THEN IFNULL(AAVBRD,0) ELSE IFNULL(ABVBRD,0) END+CASE IFNULL(ABBRDR,0) WHEN 0 THEN IFNULL(AABRDR,0) ELSE IFNULL(ABBRDR,0) END)*  
			(CASE IFNULL(AORUNS,0) WHEN 0 THEN 0 ELSE 1/AORUNS END+AOSETP/1000000)*  
			FLOAT(OAQTYG+OAQTYS)*  
			COALESCE((C1.IHCNV1/C1.IHCNV2),(C2.IHCNV2/C2.IHCNV1),FLOAT(1))  
		) ABSOVH,  
		'01 - EARNED' CODE  
	FROM  
		LGDAT.RPRR  
		INNER JOIN LGDAT.RPRH ON  
			NWBTID = OABTID  
		LEFT OUTER JOIN LGDAT.METHDR ON  
			AOPART = OAPART AND  
			AOPLNT = NWPLNT AND  
			AOSEQ# = OASEQ#  
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON  
			C1.IHPART = OAPART AND  
			C1.IHUNT2 = OAUNIT AND  
			C1.IHUNT1 = AOUNIT  
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON  
			C2.IHPART = OAPART AND  
			C2.IHUNT1 = OAUNIT AND  
			C2.IHUNT2 = AOUNIT  
		LEFT OUTER JOIN LGDAT.RESRE ON  
			ABDEPT = AODEPT AND  
			ABRESC = AORESC  
		LEFT OUTER JOIN LGDAT.DEPTS ON  
			ABDEPT = AADEPT  
		LEFT OUTER JOIN LGDAT.STKA ON  
			V6PART = OAPART AND  
			V6PLNT = NWPLNT  
	WHERE  
		AORESC <> ''  
	GROUP BY  
		NWFSYY||DIGITS(NWFSPP), NWPLNT, OADEPT, OARESC, AORESC, AODEPT,  
		CASE ABVBRD WHEN 0 THEN IFNULL(AAVBRD,0) ELSE IFNULL(ABVBRD,0) END+CASE ABBRDR WHEN 0 THEN IFNULL(AABRDR,0) ELSE IFNULL(ABBRDR,0) END  
	) X  
	GROUP BY  
		PERD, NWPLNT, ADEPT, ARESC, SDEPT, SRESC, RRATE, CODE   
	RCDFMT VW_FF_OEE  ; 
  
LABEL ON TABLE RLARP.VW_FFOEE 
	IS 'Prod - Query of reported times & earned hours' ; 
  
LABEL ON COLUMN RLARP.VW_FFOEE 
(NWPLNT IS 'Plant               Code') ; 
  
LABEL ON COLUMN RLARP.VW_FFOEE 
(NWPLNT TEXT IS 'Plant Code', 
	ADEPT TEXT IS 'Department', 
	ARESC TEXT IS 'Resource') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFOEE TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFOEE TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFOPAP (
	PERIOD, 
	FSPR, 
	IDAT, 
	DDAT, 
	FHCOM#, 
	VEN#, 
	DESCR, 
	VEND_DESCR, 
	FHBANK, 
	FHVCH#, 
	INVOICE, 
	FHVDES, 
	FHCURR, 
	AMT, 
	AMT_USD) 
	AS 
	SELECT  
		DIGITS(FHPYY)||DIGITS(FHPPER) AS PERIOD,  
		AP FSPR,  
		CHAR(FHIDAT) IDAT, CHAR(FHDDAT) DDAT,  
		FHCOM#,  
		FHVEN# VEN#,  
		RTRIM(BTNAME) DESCR,  
		RTRIM(FHVEN#)||' - '||RTRIM(BTNAME) VEND_DESCR,  
		FHBANK,  
		FHVCH#,  
		FHINV# AS INVOICE,  
		FHVDES,  
		FHCURR,  
		FHCBAL AMT,  
		ROUND(FHCBAL*RATE,2) AMT_USD  
	FROM  
		LGDAT."OPEN"  
		LEFT OUTER JOIN LGDAT.VEND ON  
			BTVEND = FHVEN#  
		LEFT OUTER JOIN LGDAT.VCHR ON  
			IDVCH# = FHVCH# AND  
			IDCOM# = FHCOM# AND  
			IDBNK# = FHBANK AND  
			IDFISY = FHPYY AND  
			IDFISP = FHPPER  
		LEFT OUTER JOIN RLARP.VW_FFCOPR C ON  
			COMP = FHCOM#  
		LEFT OUTER JOIN RLARP.FFCRET X ON  
			X.FCUR = FHCURR AND  
			X.TCUR = 'US' AND  
			X.RTYP = 'ME' AND  
			X.PERD = C.AP  
	WHERE  
		FHCBAL <> 0 AND DIGITS(FHPYY)||DIGITS(FHPPER) >= '0901' ; 
  
LABEL ON TABLE RLARP.VW_FFOPAP 
	IS 'AP - Open Vouchers' ; 
  
LABEL ON COLUMN RLARP.VW_FFOPAP 
(FHCOM# IS 'Company', 
	VEN# IS 'Vendor #', 
	FHBANK IS 'Pay. Bank           Code', 
	FHVCH# IS 'Voucher             Number', 
	INVOICE IS 'Invoice             Number', 
	FHVDES IS 'Voucher             Description', 
	FHCURR IS 'Pay. Curr           Code', 
	AMT IS 'Current             Balance') ; 
  
LABEL ON COLUMN RLARP.VW_FFOPAP 
(FHCOM# TEXT IS 'Company', 
	VEN# TEXT IS 'Vendor #', 
	FHBANK TEXT IS 'Pay. Bank Code', 
	FHVCH# TEXT IS 'Voucher Number', 
	INVOICE TEXT IS 'Invoice Number', 
	FHVDES TEXT IS 'Voucher Description', 
	FHCURR TEXT IS 'Pay. Curr Code', 
	AMT TEXT IS 'Current Balance') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFOPAP TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFOPAP TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFOPOR (
	DCODAT, 
	ORD_PERD, 
	DDQDAT, 
	REQ_PERD, 
	DCMDAT, 
	PRO_PERD, 
	PROM_PERD, 
	DCPO, 
	DCPROM, 
	DDORD#, 
	DDITM#, 
	DCSTAT, 
	DDITST, 
	CALC_STATUS FOR COLUMN CALC_00001, 
	DDQTOI, 
	DDQTSI, 
	QTY_I, 
	DCCURR, 
	DCBCUS, 
	DCSCUS, 
	PLNT, 
	DDPART, 
	DDGLC, 
	DDCRRS, 
	DCTRCD, 
	DDTOTI, 
	"VALUE", 
	VALUE_USD, 
	COST, 
	COST_USD, 
	FESVIA, 
	ACCT, 
	FGRP, 
	GLEC, 
	GLDC, 
	MAJG, 
	MING, 
	MAJS, 
	MINS) 
	AS 
	SELECT  
		DCODAT DCODAT,  
		SUBSTR(CHAR(DCODAT),3,2)||SUBSTR(CHAR(DCODAT),6,2) ORD_PERD,  
		DDQDAT,  
		SUBSTR(CHAR(MAX(DDQDAT,CURRENT DATE)),3,2)||SUBSTR(CHAR(MAX(DDQDAT,CURRENT DATE)),6,2) REQ_PERD,  
		DCMDAT,  
		SUBSTR(CHAR(MAX(DCMDAT,CURRENT DATE)),3,2)||SUBSTR(CHAR(MAX(DCMDAT,CURRENT DATE)),6,2) PRO_PERD,  
		SUBSTR(CHAR(DCMDAT),3,2)||SUBSTR(CHAR(DCMDAT),6,2) PROM_PERD,  
		DCPO,  
		DCPROM,  
		DDORD#,  
		DDITM#,  
		DCSTAT,  
		DDITST,  
		CASE DDITST  
			WHEN 'C' THEN  
				CASE DDQTSI  
					WHEN 0 THEN 'CANCELED'  
					ELSE 'CLOSED'  
				END  
			ELSE  
				CASE WHEN DDQTSI >0 THEN 'BACKORDER' ELSE 'OPEN' END  
		END CALC_STATUS,  
		DDQTOI,  
		DDQTSI,  
		DDQTOI - DDQTSI QTY_I,  
		DCCURR,  
		DCBCUS,  
		DCSCUS,  
		SUBSTR(DDSTKL,1,3) PLNT,  
		DDPART,  
		DDGLC,  
		DDCRRS,  
		DCTRCD,  
		DDTOTI,  
		CASE DDQTOI WHEN 0 THEN 0 ELSE DDTOTI/DDQTOI END*(DDQTOI - DDQTSI) VALUE,  
		CASE DDQTOI WHEN 0 THEN 0 ELSE DDTOTI/DDQTOI END*(DDQTOI - DDQTSI)*IX.RATE VALUE_USD,  
		STDCOST*(DDQTOI - DDQTSI) COST,  
		STDCOST*(DDQTOI - DDQTSI)*CX.RATE COST_USD,  
		DCSHVI FESVIA,  
		DIGITS(ZWSAL#) ACCT,  
		AZGROP||' - '||RTRIM(BQ1TITL) FGRP,  
		GLEC, GLDC, MAJG, MING, MAJS, MINS  
	FROM  
		LGDAT.OCRI  
		INNER JOIN LGDAT.OCRH ON  
			DCORD# = DDORD#  
		LEFT OUTER JOIN LGDAT.PLNT P ON  
			P.YAPLNT = SUBSTR(DDSTKL,1,3)  
		LEFT OUTER JOIN LGDAT.CUST ON  
			BVCUST = DCBCUS  
		LEFT OUTER JOIN LGDAT.ARMASC ON  
			ZWCOMP = BVCOMP AND  
			ZWKEY1 = BVARCD AND  
			ZWKEY2 = DDGLC AND  
			ZWPLNT = CASE SUBSTR(BVCOMP,1,1) WHEN '3' THEN '0'||BVCOMP ELSE P.YAPLNT END	  
		LEFT OUTER JOIN LGDAT.MAST ON  
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = DIGITS(ZWSAL#)  
		LEFT OUTER JOIN LGDAT.FGRP ON  
			BQ1GRP = AZGROP  
		LEFT OUTER JOIN RLARP.VW_FFITEMM ON  
			ITEM = DDPART  
		LEFT OUTER JOIN RLARP.VW_FFPLPR PR ON  
			PR.YAPLNT = SUBSTR(DDSTKL,1,3)  
		LEFT OUTER JOIN RLARP.FFCRET IX ON  
			IX.FCUR = DCCURR AND  
			IX.TCUR = 'US' AND  
			IX.PERD = AR AND  
			IX.RTYP = 'ME'  
		LEFT OUTER JOIN RLARP.FFCRET CX ON  
			CX.FCUR = PR.CURR AND  
			CX.TCUR = 'US' AND  
			CX.PERD = PR.AR AND  
			CX.RTYP = 'ME'  
		LEFT OUTER JOIN RLARP.VW_FFICSTX C ON  
			C.V6PART = DDPART AND  
			C.V6PLNT = SUBSTR(DDSTKL,1,3) 
	WHERE  
		DDITST <> 'C' AND  
		DDQTOI - DDQTSI <> 0 ; 
  
LABEL ON TABLE RLARP.VW_FFOPOR 
	IS 'Sales - Open Orders' ; 
  
LABEL ON COLUMN RLARP.VW_FFOPOR 
(DCODAT IS 'Date                Entered', 
	DDQDAT IS 'Request             Date', 
	DCMDAT IS 'Promise             Date', 
	DCPO IS 'Purchase            Order', 
	DCPROM IS 'Promotion Number', 
	DDORD# IS 'Order               Number', 
	DDITM# IS 'Item                Number', 
	DCSTAT IS 'Order               Status', 
	DDITST IS 'Item                Status', 
	DDQTOI IS 'Quantity            Ordered IU', 
	DDQTSI IS 'Quantity            Shipped IU', 
	DCCURR IS 'Currency', 
	DCBCUS IS 'Bill-to             Customer', 
	DCSCUS IS 'Ship-to             Customer', 
	DDPART IS 'Part                Number', 
	DDGLC IS 'G/L                 Code', 
	DDCRRS IS 'Credit              Reason', 
	DCTRCD IS 'Terms               Code', 
	DDTOTI IS 'Item                Net Total', 
	FESVIA IS 'Ship Via') ; 
  
LABEL ON COLUMN RLARP.VW_FFOPOR 
(DCODAT TEXT IS 'Date Entered', 
	DDQDAT TEXT IS 'Request Date', 
	DCMDAT TEXT IS 'Promise Date', 
	DCPO TEXT IS 'Purchase Order', 
	DCPROM TEXT IS 'Promotion Number', 
	DDORD# TEXT IS 'Order Number', 
	DDITM# TEXT IS 'Item Number', 
	DCSTAT TEXT IS 'Status New, A, B/o, Comp', 
	DDITST TEXT IS 'Status Open, B/o, Compl.', 
	DDQTOI TEXT IS 'Quantity Ordered IU', 
	DDQTSI TEXT IS 'Quantity Shipped IU', 
	DCCURR TEXT IS 'Currency', 
	DCBCUS TEXT IS 'Bill-to Customer', 
	DCSCUS TEXT IS 'Ship-to Customer', 
	DDPART TEXT IS 'Part Number', 
	DDGLC TEXT IS 'G/L Code', 
	DDCRRS TEXT IS 'Credit Reason', 
	DCTRCD TEXT IS 'Terms Code', 
	DDTOTI TEXT IS 'Item Net Total', 
	FESVIA TEXT IS 'Ship Via') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFOPOR TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFOPOR TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFORDB (
	DCODAT, 
	ORD_PERD, 
	DDQDAT, 
	DCMDAT, 
	DCPO, 
	DCPROM, 
	DDORD#, 
	DCPPCL, 
	DDITM#, 
	DCSTAT, 
	DDITST, 
	CALC_STATUS FOR COLUMN CALC_00001, 
	DDQTOI, 
	DDQTSI, 
	DDSDAT, 
	DCCURR, 
	PLNT, 
	DDPART, 
	DDGLC, 
	ORD_AMT, 
	ORD_AMT_USD FOR COLUMN ORD_A00001, 
	ACCT, 
	FGRP, 
	BILL_REMIT_TO FOR COLUMN BILL_00001, 
	BILL_CUST_CLASS FOR COLUMN BILL_00002, 
	BILL_CUST, 
	SHIP_CUST_CLASS FOR COLUMN SHIP_00001, 
	SHIP_CUST, 
	"PART", 
	GLDC, 
	GLEC, 
	MAJG, 
	MING, 
	MAJS, 
	MINS, 
	ORD_TERMS, 
	PAYDATE, 
	PAYDAYS, 
	DISCP, 
	DISCDAYS) 
	AS 
	SELECT  
			DCODAT,  
			SUBSTR(CHAR(DCODAT),3,2)||SUBSTR(CHAR(DCODAT),6,2) ORD_PERD,  
			DDQDAT,  
			DCMDAT,  
			DCPO,  
			DCPROM,  
			DDORD#,  
			DCPPCL,  
			DDITM#,  
			DCSTAT,  
			DDITST,  
			CASE DDITST  
				WHEN 'C' THEN  
					CASE DDQTSI  
						WHEN 0 THEN 'CANCELED'  
						ELSE 'CLOSED'  
					END  
				ELSE  
					CASE WHEN DDQTSI >0 THEN 'BACKORDER' ELSE 'OPEN' END  
			END CALC_STATUS,  
			DDQTOI,  
			DDQTSI,  
			DDSDAT,  
			DCCURR,  
			SUBSTR(DDSTKL,1,3) PLNT,  
			DDPART,  
			DDGLC,  
			CASE DDQTOI WHEN 0 THEN 0 ELSE DDTOTI END ORD_AMT,  
			CASE DDQTOI WHEN 0 THEN 0 ELSE DDTOTI END*XO.RATE ORD_AMT_USD,  
			DIGITS(ZWSAL#) ACCT,  
			AZGROP||' - '||RTRIM(BQ1TITL) FGRP,  
			-------------------CUSTOMER INFO--------------------- 
			BC.BVCOMP BILL_REMIT_TO,  
			BC.BVCLAS BILL_CUST_CLASS,  
			BC.BVCUST||' - '||RTRIM(BC.BVNAME) BILL_CUST,  
			SC.BVCLAS SHIP_CUST_CLASS,  
			SC.BVCUST||' - '||RTRIM(SC.BVNAME) SHIP_CUST,  
			DDPART PART,  
			GLDC,  
			GLEC,  
			MAJG, 	MING, 	MAJS, 	MINS,  
			------------------TERMS-------------------------------- 
			DCTRCD||' - '||RTRIM(TC.DESCR) ORD_TERMS,  
			PAYDATE,  
			PAYDAYS,  
			DISCP,  
			DISCDAYS  
		FROM  
			LGDAT.OCRI  
			INNER JOIN LGDAT.OCRH ON  
				DCORD# = DDORD#  
			--------changed below join from inner to left, have ship quantities with no BOL, trying to resolve 
			LEFT OUTER JOIN RLARP.FFCRET XO ON  
				XO.FCUR = DCCURR AND  
				XO.TCUR = 'US' AND  
				XO.RTYP = 'MA' AND  
				XO.PERD = SUBSTR(CHAR(DCODAT),3,2)||SUBSTR(CHAR(DCODAT),6,2)  
			LEFT OUTER JOIN LGDAT.PLNT ON  
				YAPLNT = SUBSTR(DDSTKL,1,3)  
			LEFT OUTER JOIN RLARP.VW_FFCOPR ON  
				COMP = YACOMP  
			LEFT OUTER JOIN LGDAT.CUST BC ON  
				BC.BVCUST = DCBCUS  
			LEFT OUTER JOIN LGDAT.CUST SC ON  
				SC.BVCUST = DCSCUS  
			LEFT OUTER JOIN LGDAT.ARMASC ON  
				ZWCOMP = BC.BVCOMP AND  
				ZWKEY1 = BC.BVARCD AND  
				ZWKEY2 = DDGLC AND  
				ZWPLNT = CASE SUBSTR(BC.BVCOMP,1,1) WHEN '3' THEN '0'||BC.BVCOMP ELSE SUBSTR(DDSTKL,1,3) END  
			LEFT OUTER JOIN LGDAT.MAST ON  
				AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = DIGITS(ZWSAL#)  
			LEFT OUTER JOIN LGDAT.FGRP ON  
				BQ1GRP = AZGROP  
			LEFT OUTER JOIN RLARP.VW_FFITEMM I ON  
				ITEM = DDPART  
			LEFT OUTER JOIN RLARP.VW_FFTMCD TC ON  
				TERM = DCTRCD ; 
  
LABEL ON TABLE RLARP.VW_FFORDB 
	IS 'Sales - Orders Booked' ; 
  
LABEL ON COLUMN RLARP.VW_FFORDB 
(DCODAT IS 'Date                Entered', 
	DDQDAT IS 'Request             Date', 
	DCMDAT IS 'Promise             Date', 
	DCPO IS 'Purchase            Order', 
	DCPROM IS 'Promotion Number', 
	DDORD# IS 'Order               Number', 
	DCPPCL IS 'Prepaid             Collect', 
	DDITM# IS 'Item                Number', 
	DCSTAT IS 'Order               Status', 
	DDITST IS 'Item                Status', 
	DDQTOI IS 'Quantity            Ordered IU', 
	DDQTSI IS 'Quantity            Shipped IU', 
	DDSDAT IS 'Ship                Date', 
	DCCURR IS 'Currency', 
	DDPART IS 'Part                Number', 
	DDGLC IS 'G/L                 Code', 
	BILL_REMIT_TO IS 'Company             Number', 
	BILL_CUST_CLASS IS 'Customer            Class', 
	SHIP_CUST_CLASS IS 'Customer            Class', 
	"PART" IS 'Part                Number') ; 
  
LABEL ON COLUMN RLARP.VW_FFORDB 
(DCODAT TEXT IS 'Date Entered', 
	DDQDAT TEXT IS 'Request Date', 
	DCMDAT TEXT IS 'Promise Date', 
	DCPO TEXT IS 'Purchase Order', 
	DCPROM TEXT IS 'Promotion Number', 
	DDORD# TEXT IS 'Order Number', 
	DCPPCL TEXT IS 'Prepaid Collect', 
	DDITM# TEXT IS 'Item Number', 
	DCSTAT TEXT IS 'Status New, A, B/o, Comp', 
	DDITST TEXT IS 'Status Open, B/o, Compl.', 
	DDQTOI TEXT IS 'Quantity Ordered IU', 
	DDQTSI TEXT IS 'Quantity Shipped IU', 
	DDSDAT TEXT IS 'Ship Date', 
	DCCURR TEXT IS 'Currency', 
	DDPART TEXT IS 'Part Number', 
	DDGLC TEXT IS 'G/L Code', 
	BILL_REMIT_TO TEXT IS 'Company Number', 
	BILL_CUST_CLASS TEXT IS 'Customer Class', 
	SHIP_CUST_CLASS TEXT IS 'Customer Class', 
	"PART" TEXT IS 'Part Number') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFORDB TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFORDB TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFORDD (
	ORDER_COMPONENT FOR COLUMN ORDER00001, 
	ORD_DATE, 
	ORD_PERD, 
	REQ_DATE, 
	CUST_PO, 
	PROMOTION, 
	ORDER_NUMBER FOR COLUMN ORDER00002, 
	ORDER_LINE, 
	HEADER_STAT FOR COLUMN HEADE00001, 
	LINE_STAT, 
	LINE_TOT_ORD FOR COLUMN LINE_00001, 
	LINE_TOT_SHIP FOR COLUMN LINE_00002, 
	CALC_STATUS FOR COLUMN CALC_00001, 
	QUANTITY, 
	CURRENCY, 
	PLANT, 
	ORDER_DIST_CODE FOR COLUMN ORDER00003, 
	RETURN_REASON FOR COLUMN RETUR00001, 
	ORD_AMT, 
	ORD_AMT_USD FOR COLUMN ORD_A00001, 
	BOL_NUMBER, 
	BOL_LINE, 
	MASTER_BOL, 
	CARRIER, 
	BOL_POSTED, 
	BOL_DATE, 
	INVOICE_NUMBER FOR COLUMN INVOI00001, 
	INVOICE_LINE FOR COLUMN INVOI00002, 
	INVOICE_FISC_PERIOD FOR COLUMN INVOI00003, 
	INV_AMT, 
	INV_AMT_USD FOR COLUMN INV_A00001, 
	ACCT, 
	FGRP, 
	BILL_REMIT_TO FOR COLUMN BILL_00001, 
	BILL_CUST_CLASS FOR COLUMN BILL_00002, 
	BILL_CUST, 
	BILL_PROV, 
	BILL_CTRY, 
	BILL_CITY, 
	BILL_POSTAL FOR COLUMN BILL_00003, 
	BILL_AGENT, 
	SHIP_REMIT_TO FOR COLUMN SHIP_00001, 
	SHIP_CUST_CLASS FOR COLUMN SHIP_00002, 
	SHIP_CUST, 
	SHIP_PROV, 
	SHIP_CTRY, 
	SHIP_CITY, 
	SHIP_POSTAL FOR COLUMN SHIP_00003, 
	SHIP_AGENT, 
	"PART", 
	PART_MOLD, 
	PART_MOLD_COLR FOR COLUMN PART_00001, 
	PART_COLOR, 
	PART_DESCR, 
	PART_DIST_CODE FOR COLUMN PART_00002, 
	PART_EXP_CODE FOR COLUMN PART_00003, 
	PART_MAJG, 
	PART_MING, 
	PART_MAJS, 
	PART_MINS, 
	COST_CURR, 
	TOT_COST_USD FOR COLUMN TOT_C00001, 
	MAT_COST_USD FOR COLUMN MAT_C00001, 
	FRT_COST_USD FOR COLUMN FRT_C00001, 
	CUR_COST_USD FOR COLUMN CUR_C00001, 
	LAB_COST_USD FOR COLUMN LAB_C00001, 
	VBR_COST_USD FOR COLUMN VBR_C00001, 
	FBR_COST_USD FOR COLUMN FBR_C00001, 
	OBR_COST_USD FOR COLUMN OBR_C00001, 
	ORD_TERMS, 
	PAYDATE, 
	PAYDAYS, 
	DISCP, 
	DISCDAYS) 
	AS 
	SELECT  
			ORDER_COMPONENT,  
			DCODAT ORD_DATE,  
			COALESCE(ORD_PERD,'NONE') ORD_PERD,  
			DDQDAT REQ_DATE,  
			DCPO CUST_PO,  
			DCPROM PROMOTION,  
			DDORD# ORDER_NUMBER,  
			DDITM# ORDER_LINE,  
			DCSTAT HEADER_STAT,  
			DDITST LINE_STAT,  
			DDQTOI LINE_TOT_ORD,  
			DDQTSI LINE_TOT_SHIP,  
			CASE ORD.DDITST  
				WHEN 'C' THEN  
					CASE ORD.DDQTSI  
						WHEN 0 THEN 'CANCELED'  
						ELSE 'CLOSED'  
					END  
				ELSE  
					CASE ORDER_COMPONENT  
						WHEN 'SHIPMENT' THEN 'CLOSED'  
						ELSE CASE WHEN DDQTSI >0 THEN 'BACKORDER' ELSE 'OPEN' END  
					END  
			END CALC_STATUS,  
			QTY_I QUANTITY,  
			DCCURR CURRENCY,  
			ORD.PLNT PLANT,  
			DDGLC ORDER_DIST_CODE,  
			DDCRRS||' - '||RTRIM(RC.DESCR) RETURN_REASON,  
			ORD_AMT,  
			ORD_AMT*XO.RATE ORD_AMT_USD,  
			BOL BOL_NUMBER,  
			BOLI BOL_LINE,  
			FEMBOL MASTER_BOL,  
			FESVIA CARRIER,  
			FESIND BOL_POSTED,  
			FESDAT BOL_DATE,  
			DIINV# INVOICE_NUMBER,  
			DILIN# INVOICE_LINE,  
			COALESCE(INV_PERD,'NONE') INVOICE_FISC_PERIOD,  
			DIEXT INV_AMT,  
			ORD.DIEXT*XI.RATE INV_AMT_USD,  
			DIGITS(ZWSAL#) ACCT,  
			AZGROP||' - '||RTRIM(BQ1TITL) FGRP,  
			-------------------CUSTOMER INFO--------------------- 
			BC.BVCOMP BILL_REMIT_TO,  
			BC.BVCLAS BILL_CUST_CLASS,  
			BC.BVCUST||' - '||RTRIM(BC.BVNAME) BILL_CUST,  
			BC.BVPRCD BILL_PROV,  
			BC.BVCTRY BILL_CTRY,  
			BC.BVCITY BILL_CITY,  
			BC.BVPOST BILL_POSTAL,  
			BC.BVSALM||' - '||RTRIM(BS.A30) BILL_AGENT,  
			SC.BVCOMP SHIP_REMIT_TO,  
			SC.BVCLAS SHIP_CUST_CLASS,  
			SC.BVCUST||' - '||RTRIM(SC.BVNAME) SHIP_CUST,  
			SC.BVPRCD SHIP_PROV,  
			SC.BVCTRY SHIP_CTRY,  
			SC.BVCITY SHIP_CITY,  
			SC.BVPOST SHIP_POSTAL,  
			SC.BVSALM||' - '||RTRIM(SS.A30) SHIP_AGENT,  
			------------------PART INFO-------------------------- 
			DDPART PART,  
			SUBSTR(DDPART,1,8) PART_MOLD,  
			SUBSTR(DDPART,1,11) PART_MOLD_COLR,  
			CL.DESCR PART_COLOR,  
			I.DESCR1 PART_DESCR,  
			GLDC PART_DIST_CODE,  
			GLEC PART_EXP_CODE,  
			MAJG PART_MAJG, 	MING PART_MING, 	MAJS PART_MAJS, 	MINS PART_MINS,  
			------------------COST INFO--------------------------- 
			CURR COST_CURR,  
			ROUND(TOT*QTY_I*XC.RATE,2) TOT_COST_USD,  
			ROUND(MAT*QTY_I*XC.RATE,2) MAT_COST_USD,  
			ROUND(FRT*QTY_I*XC.RATE,2) FRT_COST_USD,  
			ROUND(CUR*QTY_I*XC.RATE,2) CUR_COST_USD,  
			ROUND(LAB*QTY_I*XC.RATE,2) LAB_COST_USD,  
			ROUND(VBR*QTY_I*XC.RATE,2) VBR_COST_USD,  
			ROUND(FBR*QTY_I*XC.RATE,2) FBR_COST_USD,  
			ROUND(OBR*QTY_I*XC.RATE,2) OBR_COST_USD,  
			------------------TERMS-------------------------------- 
			ORD.DCTRCD||' - '||RTRIM(TC.DESCR) ORD_TERMS,  
			PAYDATE,  
			PAYDAYS,  
			DISCP,  
			DISCDAYS  
			FROM  
			( 
			SELECT  
			'REMAINDER' ORDER_COMPONENT,  
			DCODAT,  
			SUBSTR(CHAR(DCODAT),3,2)||SUBSTR(CHAR(DCODAT),6,2) ORD_PERD,  
			DDQDAT,  
			DCPO,  
			DCPROM,  
			DDORD#,  
			DDITM#,  
			DCSTAT,  
			DDITST,  
			DDQTOI,  
			DDQTSI,  
			DDQTOI - DDQTSI QTY_I,  
			DCCURR,  
			DCBCUS,  
			DCSCUS,  
			SUBSTR(DDSTKL,1,3) PLNT,  
			DDPART,  
			DDGLC,  
			DDCRRS,  
			DCTRCD,  
			CASE DDQTOI WHEN 0 THEN 0 ELSE DDTOTI/DDQTOI END*(DDQTOI - DDQTSI) ORD_AMT,  
			0 BOL,  
			0 BOLI,  
			0 FEMBOL,  
			DCSHVI FESVIA,  
			'' FESIND,  
			DATE(0) FESDAT,  
			0 DIINV#,  
			0 DILIN#,  
			'NONE' INV_PERD,  
			0.0 DIEXT  
		FROM  
			LGDAT.OCRI  
			INNER JOIN LGDAT.OCRH ON  
				DCORD# = DDORD#  
		WHERE  
			DDQTOI - DDQTSI <> 0  
		  
		UNION ALL  
		  
		SELECT  
			'SHIPMENT' ORDER_COMPONENT,  
			DCODAT,  
			SUBSTR(CHAR(DCODAT),3,2)||SUBSTR(CHAR(DCODAT),6,2) ORD_PERD,  
			DDQDAT,  
			CASE COALESCE(DHCPO,'') WHEN '' THEN DCPO ELSE DHCPO END DCPO,  
			DCPROM,  
			DDORD#,  
			DDITM#,  
			DCSTAT,  
			DDITST,  
			DDQTOI,  
			DDQTSI,  
			FGQSHP*CASE FESIND WHEN 'Y' THEN 1 ELSE 0 END QTY_I,  
			DCCURR,  
			DCBCUS,  
			DCSCUS,  
			COALESCE(FGPLNT,SUBSTR(DDSTKL,1,3)) PLNT,  
			DDPART,  
			DDGLC,  
			COALESCE(DIREAS,DDCRRS) DDCRRS,  
			DCTRCD,  
			CASE DDQTOI WHEN 0 THEN 0 ELSE DDTOTI/DDQTOI END*COALESCE(FGQSHP*CASE FESIND WHEN 'Y' THEN 1 ELSE 0 END,DDQTSI) ORD_AMT,  
			FGBOL# BOL,  
			FGENT# BOLI,  
			FEMBOL,  
			FESVIA,  
			FESIND,  
			FESDAT,  
			DIINV#,  
			DILIN#,  
			DIGITS(DHARYR)||DIGITS(DHARPR) INV_PERD,  
			DIEXT*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END DIEXT  
			  
		FROM  
			LGDAT.OCRI  
			INNER JOIN LGDAT.OCRH ON  
				DCORD# = DDORD#  
			  --------changed below join from inner to left, have ship quantities with no BOL, trying to resolve 
			LEFT OUTER JOIN LGDAT.BOLD ON  
				FGORD# = DDORD# AND  
				FGITEM = DDITM#  
			LEFT OUTER JOIN LGDAT.BOLH ON  
				FEBOL# = FGBOL#  
			LEFT OUTER JOIN LGDAT.OID ON  
				DIINV# = FGINV# AND  
				DILIN# = FGLIN#  
			LEFT OUTER JOIN LGDAT.OIH ON  
				DHINV# = DIINV#  
		WHERE  
			DDQTSI <> 0	  
		) ORD  
			LEFT OUTER JOIN RLARP.FFCRET XO ON  
				XO.FCUR = DCCURR AND  
				XO.TCUR = 'US' AND  
				XO.RTYP = 'MA' AND  
				XO.PERD = ORD.ORD_PERD  
			LEFT OUTER JOIN RLARP.FFCRET XI ON  
				XI.FCUR = DCCURR AND  
				XI.TCUR = 'US' AND  
				XI.RTYP = 'MA' AND  
				XI.PERD = ORD.INV_PERD  
			LEFT OUTER JOIN LGDAT.PLNT ON  
				YAPLNT = ORD.PLNT  
			LEFT OUTER JOIN RLARP.VW_FFCOPR ON  
				COMP = YACOMP  
			LEFT OUTER JOIN RLARP.FFCRET XC ON  
				XC.FCUR = CURR AND  
				XC.TCUR = 'US' AND  
				XC.RTYP = 'MA' AND  
				XC.PERD = ORD.ORD_PERD  
			LEFT OUTER JOIN LGDAT.CUST BC ON  
				BC.BVCUST = ORD.DCBCUS  
			LEFT OUTER JOIN LGDAT.CUST SC ON  
				SC.BVCUST = DCSCUS  
			LEFT OUTER JOIN LGDAT.ARMASC ON  
				ZWCOMP = BC.BVCOMP AND  
				ZWKEY1 = BC.BVARCD AND  
				ZWKEY2 = ORD.DDGLC AND  
				ZWPLNT = CASE SUBSTR(BC.BVCOMP,1,1) WHEN '3' THEN '0'||BC.BVCOMP ELSE ORD.PLNT END  
			LEFT OUTER JOIN LGDAT.MAST ON  
				AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = DIGITS(ZWSAL#)  
			LEFT OUTER JOIN LGDAT.FGRP ON  
				BQ1GRP = AZGROP  
			LEFT OUTER JOIN RLARP.VW_FFITEMM I ON  
				ITEM = DDPART  
			LEFT OUTER JOIN QGPL.FFICSTX C ON  
				C.PART = ORD.DDPART AND  
				C.PLNT = ORD.PLNT AND  
				TRI = 'STD'  
			LEFT OUTER JOIN RLARP.FFCOLR "CL" ON  
				COLOR = CASE SUBSTRING(DDPART,1,3)  
						WHEN 'S01' THEN SUBSTRING(DDPART,12,3)  
						WHEN 'S02' THEN SUBSTRING(DDPART,12,3)  
						WHEN 'S21' THEN SUBSTRING(DDPART,12,3)  
						ELSE SUBSTRING(DDPART,9,3)  
					END  
			LEFT OUTER JOIN LGDAT.CODE BS ON  
				BS.A2 = 'MM' AND  
				LTRIM(RTRIM(BS.A9)) = BC.BVSALM  
			LEFT OUTER JOIN LGDAT.CODE SS ON  
				SS.A2 = 'MM' AND  
				LTRIM(RTRIM(SS.A9)) = SC.BVSALM  
			LEFT OUTER JOIN RLARP.VW_FFTMCD TC ON  
				TERM = ORD.DCTRCD  
			LEFT OUTER JOIN RLARP.VW_FFRTCD RC ON  
				CODE = DDCRRS ; 
  
LABEL ON TABLE RLARP.VW_FFORDD 
	IS 'Sales - Order Details' ; 
  
LABEL ON COLUMN RLARP.VW_FFORDD 
(ORD_DATE IS 'Date                Entered', 
	REQ_DATE IS 'Request             Date', 
	CUST_PO IS 'Purchase            Order', 
	PROMOTION IS 'Promotion Number', 
	ORDER_NUMBER IS 'Order               Number', 
	ORDER_LINE IS 'Item                Number', 
	HEADER_STAT IS 'Order               Status', 
	LINE_STAT IS 'Item                Status', 
	LINE_TOT_ORD IS 'Quantity            Ordered IU', 
	LINE_TOT_SHIP IS 'Quantity            Shipped IU', 
	CURRENCY IS 'Currency', 
	ORDER_DIST_CODE IS 'G/L                 Code', 
	BILL_REMIT_TO IS 'Company             Number', 
	BILL_CUST_CLASS IS 'Customer            Class', 
	BILL_PROV IS 'Province            Code', 
	BILL_CTRY IS 'Country', 
	BILL_CITY IS 'City', 
	BILL_POSTAL IS 'Postal              Code', 
	SHIP_REMIT_TO IS 'Company             Number', 
	SHIP_CUST_CLASS IS 'Customer            Class', 
	SHIP_PROV IS 'Province            Code', 
	SHIP_CTRY IS 'Country', 
	SHIP_CITY IS 'City', 
	SHIP_POSTAL IS 'Postal              Code', 
	"PART" IS 'Part                Number') ; 
  
LABEL ON COLUMN RLARP.VW_FFORDD 
(ORD_DATE TEXT IS 'Date Entered', 
	REQ_DATE TEXT IS 'Request Date', 
	CUST_PO TEXT IS 'Purchase Order', 
	PROMOTION TEXT IS 'Promotion Number', 
	ORDER_NUMBER TEXT IS 'Order Number', 
	ORDER_LINE TEXT IS 'Item Number', 
	HEADER_STAT TEXT IS 'Status New, A, B/o, Comp', 
	LINE_STAT TEXT IS 'Status Open, B/o, Compl.', 
	LINE_TOT_ORD TEXT IS 'Quantity Ordered IU', 
	LINE_TOT_SHIP TEXT IS 'Quantity Shipped IU', 
	CURRENCY TEXT IS 'Currency', 
	ORDER_DIST_CODE TEXT IS 'G/L Code', 
	CARRIER TEXT IS 'Ship Via', 
	BILL_REMIT_TO TEXT IS 'Company Number', 
	BILL_CUST_CLASS TEXT IS 'Customer Class', 
	BILL_PROV TEXT IS 'Province Code', 
	BILL_CTRY TEXT IS 'Country', 
	BILL_CITY TEXT IS 'City', 
	BILL_POSTAL TEXT IS 'Postal Code', 
	SHIP_REMIT_TO TEXT IS 'Company Number', 
	SHIP_CUST_CLASS TEXT IS 'Customer Class', 
	SHIP_PROV TEXT IS 'Province Code', 
	SHIP_CTRY TEXT IS 'Country', 
	SHIP_CITY TEXT IS 'City', 
	SHIP_POSTAL TEXT IS 'Postal Code', 
	"PART" TEXT IS 'Part Number') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFORDD TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFORDD TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFPLPR (
	YAPLNT, 
	COMP, 
	DESCR, 
	CURR, 
	GL, 
	AR, 
	AP, 
	FA, 
	IC) 
	AS 
	SELECT  
			YAPLNT,  
			LTRIM(RTRIM(A9)) AS COMP,  
			A30 AS DESCR,  
			SUBSTR(A249,242,2) CURR,  
			SUBSTR(A249,32,4) AS GL,  
			SUBSTR(A249,190,4) AS AR,  
			SUBSTR(A249,182,4) AS AP,  
			SUBSTR(A249,198,4) AS FA,  
			SUBSTR(A249,238,4) AS IC  
		FROM  
			LGDAT.PLNT  
			INNER JOIN LGDAT.CODE ON  
				YACOMP = LTRIM(RTRIM(A9))  
			LEFT OUTER JOIN LGDAT.NAME ON  
				'C0000'||LTRIM(RTRIM(A9)) = A7  
		WHERE  
			A2 = 'AA' OR A2 IS NULL ; 
  
LABEL ON TABLE RLARP.VW_FFPLPR 
	IS 'Mast - Plants & Current Fiscal Periods' ; 
  
LABEL ON COLUMN RLARP.VW_FFPLPR 
(YAPLNT IS 'Plant               Code', 
	DESCR IS 'Description         Usually') ; 
  
LABEL ON COLUMN RLARP.VW_FFPLPR 
(YAPLNT TEXT IS 'Plant Code', 
	DESCR TEXT IS 'Description Usually') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFPLPR TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFPLPR TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFPOAC (
	FSYR, 
	QRTR, 
	FSPR, 
	CAPR, 
	WEEKNUM, 
	COMP, 
	OPSGRP, 
	FGRP, 
	FGRP_DESCR, 
	ACCT, 
	PRIME, 
	MODULE, 
	CUSMOD, 
	TRAN1, 
	TRAN2, 
	STMT, 
	LVL0D, 
	LVL1D, 
	LVL2D, 
	LVL3D, 
	AZFUT3, 
	EBITDA, 
	DEPARTMENT, 
	IC_TYPE, 
	IC_POINTER, 
	ELIM_GRP, 
	FUNCAREA, 
	TRANS_BASE, 
	TRANS_USD) 
	AS 
	SELECT  
		SUBSTR(CHAR(CURRENT_DATE),1,4) FSYR,  
		'' QRTR,  
		AP FSPR,  
		SUBSTR(CHAR(CURRENT_DATE),3,2)||SUBSTR(CHAR(CURRENT_DATE),6,2) CAPR,  
		SUBSTR(CHAR(KRRDAT),3,2)||SUBSTR(DIGITS(WEEK(KRRDAT)),9,2) WEEKNUM,  
		KRCOM# COMP,  
		'' OPSGRP,  
		AZGROP||' - '||RTRIM(BQ1TITL) FGRP,  
		RTRIM(BQ1TITL) FGRP_DESCR,  
		KRCOM#||DIGITS(CASE KRGLVR WHEN 0 THEN KRGLEX ELSE KRGLVR END) ACCT,  
		SUBSTR(KRCOM#||DIGITS(CASE KRGLVR WHEN 0 THEN KRGLEX ELSE KRGLVR END),7,4)||' - '||RTRIM(AZTITL) PRIME,  
		'PORCAP' MODULE,  
		'PORCAP' CUSMOD,  
		'VENDOR - '||RTRIM(BTNAME) TRAN1,  
		DIGITS(KRPO#)||' - '||RTRIM(KCDESC) TRAN2,  
		'' STMT,  
		'' LVL0D,  
		'' LVL1D,  
		'' LVL2D,  
		'' LVL3D,  
		AZFUT3,  
		RTRIM(D35DES1) EBITDA,  
		RTRIM(D35DES2) DEPARTMENT,  
		RTRIM(D35DES3) IC_TYPE,  
		RTRIM(D35USR1) IC_POINTER,  
		RTRIM(D35USR2) ELIM_GRP,  
		RTRIM(D35USR3) FUNCAREA,  
		ROUND(((KREXT+KRPST)/KRBQTY*FLOAT(KRRCVX)-KRSCST)*KRBQTY,2) TRANS_BASE,  
		ROUND(((KREXT+KRPST)/KRBQTY*FLOAT(KRRCVX)-KRSCST)*KRBQTY*RATE,2) TRANS_USD  
	FROM  
		LGDAT.PORCAP  
		INNER JOIN RLARP.VW_FFCOPR ON  
			COMP = KRCOM#  
		LEFT OUTER JOIN LGDAT.MAST ON  
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = KRCOM#||DIGITS(CASE KRGLVR WHEN 0 THEN KRGLEX ELSE KRGLVR END)  
		LEFT OUTER JOIN LGDAT.FGRP ON  
			BQ1GRP = AZGROP  
		LEFT OUTER JOIN LGDAT.VEND ON  
			BTVEND = KRVEN#  
		LEFT OUTER JOIN LGDAT.POD ON  
			KCPO# = KRPO# AND  
			KCITM# = KRPOI# AND  
			KCLIN# = 1  
		LEFT OUTER JOIN LGDAT.GGTP ON  
			D35GCDE = AZFUT3  
		LEFT OUTER JOIN RLARP.FFCRET ON  
			FCUR = CURR AND  
			TCUR = 'US' AND  
			RTYP = 'ME' AND  
			PERD = AP ; 
  
LABEL ON TABLE RLARP.VW_FFPOAC 
	IS 'AP - PORCAP accrual; expense accounts only' ; 
  
LABEL ON COLUMN RLARP.VW_FFPOAC 
(COMP IS 'Company             Code', 
	AZFUT3 IS 'Future Use          Fut3') ; 
  
LABEL ON COLUMN RLARP.VW_FFPOAC 
(COMP TEXT IS 'Company Code', 
	AZFUT3 TEXT IS 'Future Use Fut3') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFPOAC TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFPOAC TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFROWC (
	"TABLE", 
	RECORDS) 
	AS 
	SELECT 'OCRI - ORDER ITEMS' "TABLE", COUNT(*) RECORDS FROM LGDAT.OCRI  
		UNION ALL  
		SELECT 'OCRH - ORDER HEADER' "TABLE", COUNT(*) RECORDS FROM LGDAT.OCRH  
		UNION ALL  
		SELECT 'OID - INVOICE ITEMS' "TABLE", COUNT(*) RECORDS FROM LGDAT.OID  
		UNION ALL  
		SELECT 'OIH - INVOICE HEADER' "TABLE", COUNT(*) RECORDS FROM LGDAT.OIH  
		UNION ALL  
		SELECT 'OIS - DISCOUNT/CHARGE DETAILS' "TABLE", COUNT(*) RECORDS FROM LGDAT.OIS  
		UNION ALL  
		SELECT 'OIX - TAX' "TABLE", COUNT(*) RECORDS FROM LGDAT.OIX  
		UNION ALL  
		SELECT 'OIT - DESCRIPTION' "TABLE", COUNT(*) RECORDS FROM LGDAT.OIT  
		UNION ALL  
		SELECT 'BOLD - BOL ITEMS' "TABLE", COUNT(*) RECORDS FROM LGDAT.BOLD  
		UNION ALL  
		SELECT 'BOLH - BOL HEADER' "TABLE", COUNT(*) RECORDS FROM LGDAT.BOLH  
		UNION ALL  
		SELECT 'POI - PURCHASE ORDER ITEMS' "TABLE", COUNT(*) RECORDS FROM LGDAT.POI  
		UNION ALL  
		SELECT 'POD - PO ITEM DESCRIPTIONS' "TABLE", COUNT(*) RECORDS FROM LGDAT.POD  
		UNION ALL  
		SELECT 'POG - PO ITEM GL ALLOC' "TABLE", COUNT(*) RECORDS FROM LGDAT.POG  
		UNION ALL  
		SELECT 'POH - PURCHASE ORDER HEADER' "TABLE", COUNT(*) RECORDS FROM LGDAT.POH   
	RCDFMT VW_FF00001 ; 
  
LABEL ON TABLE RLARP.VW_FFROWC 
	IS 'Mast - record counts of select files' ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFROWC TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFROWC TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFRTCD (
	CODE, 
	DESCR, 
	INV_GL, 
	INV_QTY, 
	SLS_QTY, 
	COS, 
	QC_INSPECT) 
	AS 
	SELECT  
		LTRIM(RTRIM(A9)) AS CODE,  
		A30 AS DESCR,  
		SUBSTR(A215,5,1) AS INV_GL,  
		SUBSTR(A215,1,1) AS INV_QTY,  
		SUBSTR(A215,2,1) AS SLS_QTY,  
		SUBSTR(A215,3,1) AS COS,  
		SUBSTR(A215,4,1) AS QC_INSPECT  
		FROM  
			LGDAT.CODE  
		WHERE  
			A2 = 'RS' ; 
  
LABEL ON TABLE RLARP.VW_FFRTCD 
	IS 'Sales - Return Reason Codes' ; 
  
LABEL ON COLUMN RLARP.VW_FFRTCD 
(DESCR IS 'Description         Usually') ; 
  
LABEL ON COLUMN RLARP.VW_FFRTCD 
(DESCR TEXT IS 'Description Usually') ; 
  
GRANT ALTER, DELETE, INSERT, REFERENCES, SELECT, UPDATE   
ON RLARP.VW_FFRTCD TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, DELETE, INSERT, REFERENCES, SELECT, UPDATE   
ON RLARP.VW_FFRTCD TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFSTKAX (
	MPART, 
	MPLNT, 
	TLVL, 
	XLVL, 
	"PART", 
	PLNT, 
	STAT, 
	RPLN, 
	TPLN) 
	AS 
	WITH RECURSIVE PPE(MPART, MPLNT, TLVL, LVL,PART, PLNT, STAT, RPLN, TPLN)  
	AS  
	( 
		SELECT  
			V6PART, V6PLNT,  
			DIGITS(INT(ROW_NUMBER() OVER ())),  
			0,  
			V6PART,  
			V6PLNT,  
			V6STAT,  
			V6RPLN,  
			V6TPLN  
		FROM  
			LGDAT.STKA B  
		WHERE  
			B.V6RPLN = 3 AND  
			B.V6STAT = 'A'  
		  
		UNION ALL  
		  
		SELECT  
			MPART, MPLNT,  
			PPE.TLVL,  
			PPE.LVL+1,  
			V6PART,  
			V6PLNT,  
			V6STAT,  
			V6RPLN,  
			V6TPLN  
		FROM  
			PPE PPE  
			INNER JOIN LGDAT.STKA ON  
				V6PART = PPE.PART AND  
				V6PLNT = PPE.TPLN  
		WHERE  
			PPE.LVL < 10  
	)  
	SELECT  
		MPART, MPLNT, TLVL, REPEAT('. ',LVL)|| LVL AS XLVL, PART, PLNT, STAT, RPLN, TPLN  
	FROM  
		PPE ; 
	   
		LABEL ON TABLE RLARP.VW_FFSTKAX 
IS 'Prod - explode stka procurement path' ; 

LABEL ON COLUMN RLARP.VW_FFSTKAX 
(MPART TEXT IS 'Part Number', 
	MPLNT TEXT IS 'Plant Code', 
	"PART" TEXT IS 'Part Number', 
	PLNT TEXT IS 'Plant Code', 
	STAT TEXT IS 'Inventory Item Status', 
	RPLN TEXT IS 'Replenishment Type', 
	TPLN TEXT IS 'Source Plant') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFSTKAX TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFSTKAX TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFSTKB (
	FSPR, 
	ACCT, 
	PRIME, 
	PLANT, 
	BXPART, 
	"PART", 
	ILOC, 
	GLCODE, 
	INVCODE, 
	MAJG, 
	MING, 
	MAJS, 
	MINS, 
	STATUS, 
	PROCUREMENT FOR COLUMN PROCU00001, 
	QTOH, 
	EXTCOST, 
	EXTCOST_USD FOR COLUMN EXTCO00001) 
	AS 
	SELECT  
		P.FSPR FSPR,  
		YACOMP||DIGITS(Y1INVA) ACCT,  
		SUBSTR(YACOMP||DIGITS(Y1INVA),7,4) PRIME,  
		BXPLNT PLANT,  
		BXPART,  
		RTRIM(BXPART)||' - '||RTRIM(COALESCE(AVDES1,AWDES1,'')) PART,  
		BXSTOK||' - '||RTRIM(AXLOCN) ILOC,  
		COALESCE(AWGLDC, AVGLCD) GLCODE,  
		COALESCE(AWGLED, AVGLED) INVCODE,  
		COALESCE(AWMAJG,AVMAJG)||' - '||RTRIM(BQDES) MAJG,  
		COALESCE(AWMING, AVMING)||' - '||RTRIM(BRDES) MING,  
		COALESCE(AWMAJS, AVMAJS)||' - '||RTRIM(SMJ.BSDES1) MAJS,  
		COALESCE(AWMINS, AVMINS)||' - '||RTRIM(SMN.BSDES1) MINS,  
		V6STAT STATUS,  
		V6RPLN PROCUREMENT,  
		BXQTOH QTOH,  
		BXQTOH*TOT EXTCOST,  
		BXQTOH*TOT*RATE EXTCOST_USD  
	FROM  
		LGDAT.STKB  
		LEFT OUTER JOIN LGDAT.STKA ON  
			V6PART = BXPART AND  
			V6PLNT = BXPLNT  
		LEFT OUTER JOIN LGDAT.STKMM ON  
			AVPART = BXPART  
		LEFT OUTER JOIN LGDAT.STKMP ON  
			AWPART = BXPART  
		LEFT OUTER JOIN LGDAT.PLNT ON  
			YAPLNT = BXPLNT  
		LEFT OUTER JOIN LGDAT.GLIE ON  
			Y1PLNT = BXPLNT AND  
			Y1GLEC = COALESCE(AVGLED, AWGLED)  
		LEFT OUTER JOIN LGDAT.MAJG ON  
			BQGRP = COALESCE(AWMAJG, AVMAJG)  
		LEFT OUTER JOIN LGDAT.MMGP ON  
			BRGRP = BQGRP AND  
			BRMGRP = COALESCE(AVMING, AWMING)  
		LEFT OUTER JOIN LGDAT.MMSL SMN ON  
			SMN.BSMJCD = COALESCE(AVMAJS, AWMAJS) AND  
			SMN.BSMNCD = COALESCE(AVMINS, AWMINS)  
		LEFT OUTER JOIN LGDAT.MMSL SMJ ON  
			SMJ.BSMJCD = COALESCE(AVMAJS, AWMAJS) AND  
			SMJ.BSMNCD = ''  
		LEFT OUTER JOIN LGDAT.STKR ON  
			AXSTKL = BXSTOK  
		LEFT OUTER JOIN LGDAT.MAST ON  
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = YACOMP||DIGITS(Y1INVA)  
		LEFT OUTER JOIN RLARP.FFPERD P ON  
			P.CAPR = SUBSTR(CHAR(CURRENT_DATE),3,2)||SUBSTR(CHAR(CURRENT_DATE),6,2)  
		LEFT OUTER JOIN RLARP.FFCRET FX ON  
			FCUR = AZFUT2 AND  
			TCUR = 'US' AND  
			RTYP = 'ME' AND  
			FX.PERD = P.FSPR  
		LEFT OUTER JOIN QGPL.FFICSTX ON  
			PART = BXPART AND  
			PLNT = BXPLNT AND  
			TRI = 'STD'  
	WHERE  
		BXPART <> '' AND  
		BXQTOH<> 0 ; 
  
LABEL ON TABLE RLARP.VW_FFSTKB 
	IS 'Inv - On Hand' ; 
  
LABEL ON COLUMN RLARP.VW_FFSTKB 
(PLANT IS 'Plant               Code', 
	BXPART IS 'Part Number', 
	STATUS IS 'Inventory           Item                Status', 
	PROCUREMENT IS 'Replenishment       Type', 
	QTOH IS 'Quantity            On Hand') ; 
  
LABEL ON COLUMN RLARP.VW_FFSTKB 
(PLANT TEXT IS 'Plant Code', 
	BXPART TEXT IS 'Part Number', 
	STATUS TEXT IS 'Inventory Item Status', 
	PROCUREMENT TEXT IS 'Replenishment Type', 
	QTOH TEXT IS 'Quantity On Hand') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFSTKB TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFSTKB TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFSTKMX (
	AVPART, 
	AVDES1, 
	AVDES2, 
	AVDES3, 
	AVMING, 
	AVUNTI, 
	AVMAJG, 
	AVMAJS, 
	AVMINS, 
	AVGLCD, 
	AVGLED, 
	AVHARM, 
	AVCLSS, 
	AVNWHT, 
	AVNWUN, 
	AVSVOL, 
	AVSVUN, 
	AVENGC, 
	AVREVL, 
	AVRDAT, 
	AVDPLT, 
	AVCPT#, 
	AVASSC, 
	AVTYPE) 
	AS 
	SELECT  
		AVPART,  
		AVDES1,  
		AVDES2,  
		AVDES3,  
		AVMING,  
		AVUNTI,  
		AVMAJG,  
		AVMAJS,  
		AVMINS,  
		AVGLCD,  
		AVGLED,  
		AVHARM,  
		AVCLSS,  
		AVNWHT,  
		AVNWUN,  
		AVSVOL,  
		AVSVUN,  
		AVENGC,  
		AVREVL,  
		AVRDAT,  
		AVDPLT,  
		AVCPT#,  
		AVASSC,  
		AVTYPE  
	FROM  
		LGDAT.STKMM  
	  
	UNION ALL  
	  
	SELECT  
		AWPART,  
		AWDES1,  
		AWDES2,  
		AWDES3,  
		AWMING,  
		AWUNTI,  
		AWMAJG,  
		AWMAJS,  
		AWMINS,  
		AWGLDC,  
		AWGLED,  
		AWHARM,  
		AWCLSS,  
		AWNWHT,  
		AWNWUN,  
		AWSVOL,  
		AWSVUN,  
		AWENGC,  
		AWREVL,  
		AWRDAT,  
		AWDPLT,  
		'',  
		AWASSC,  
		AWTYPE  
	FROM  
		LGDAT.STKMP ; 
  
LABEL ON TABLE RLARP.VW_FFSTKMX 
	IS 'Inv - stacked part master' ; 
  
LABEL ON COLUMN RLARP.VW_FFSTKMX 
(AVPART IS 'Part                Number', 
	AVDES1 IS 'Description 1', 
	AVDES2 IS 'Description 2', 
	AVDES3 IS 'Description 3', 
	AVMING IS 'Minor               Group', 
	AVUNTI IS 'Dft                 Unit of             Issue', 
	AVMAJG IS 'Major               Group', 
	AVMAJS IS 'Major               Sales Code', 
	AVMINS IS 'Minor               Sales Code', 
	AVGLCD IS 'G/L Distribution    Code', 
	AVGLED IS 'G/L Expense         Code', 
	AVHARM IS 'Harmonization #', 
	AVCLSS IS 'Inventory           Class               Code', 
	AVNWHT IS 'Net Weight', 
	AVNWUN IS 'Net Weight          Unit', 
	AVSVOL IS 'Shipping            Volume', 
	AVSVUN IS 'Shipping            Volume              Unit', 
	AVENGC IS 'Engineering         Change #', 
	AVREVL IS 'Revision            Level', 
	AVRDAT IS 'Revision            Date', 
	AVDPLT IS 'Default             Plant               Code', 
	AVCPT# IS 'Customer            Part #', 
	AVASSC IS 'Assembly            Code', 
	AVTYPE IS 'Stock               Type') ; 
  
LABEL ON COLUMN RLARP.VW_FFSTKMX 
(AVPART TEXT IS 'Part Number', 
	AVDES1 TEXT IS 'Description 1', 
	AVDES2 TEXT IS 'Description 2', 
	AVDES3 TEXT IS 'Description 3', 
	AVMING TEXT IS 'Minor Group', 
	AVUNTI TEXT IS 'Dft Unit of Issue', 
	AVMAJG TEXT IS 'Major Group', 
	AVMAJS TEXT IS 'Major Sales Code', 
	AVMINS TEXT IS 'Minor Sales Code', 
	AVGLCD TEXT IS 'G/L Distribution Code', 
	AVGLED TEXT IS 'G/L Expense Code', 
	AVHARM TEXT IS 'Harmonization #', 
	AVCLSS TEXT IS 'Inventory Class Code', 
	AVNWHT TEXT IS 'Net Weight', 
	AVNWUN TEXT IS 'Net Weight Unit', 
	AVSVOL TEXT IS 'Shipping Volume', 
	AVSVUN TEXT IS 'Shipping Volume Unit', 
	AVENGC TEXT IS 'Engineering Change #', 
	AVREVL TEXT IS 'Revision Level', 
	AVRDAT TEXT IS 'Revision Date', 
	AVDPLT TEXT IS 'Default Plant Code', 
	AVCPT# TEXT IS 'Customer Part #', 
	AVASSC TEXT IS 'Assembly Code', 
	AVTYPE TEXT IS 'Stock Type') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFSTKMX TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFSTKMX TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFTB (
	COMP, 
	PLNT, 
	ACCOUNT, 
	TITLE, 
	PRIME, 
	INACTIVE, 
	FGRP, 
	GLCC, 
	EBITDA, 
	DEPARTMENT, 
	ELIM_TYPE, 
	IC_POINTER, 
	ELIM_GRP, 
	FUNC_AREA, 
	CONSOL_LEVEL FOR COLUMN CONSO00001, 
	FSPR, 
	CAPR, 
	OPNB, 
	NETT, 
	ENDB, 
	OPNB_USD, 
	NETT_USD, 
	ENDB_USD, 
	BGT, 
	BGT_USD) 
	AS 
	SELECT  
		SUBSTR(ACC,1,2) AS COMP,  
		SUBSTR(ACC,3,2) AS PLNT,  
		ACC ACCOUNT,  
		AZTITL TITLE,  
		SUBSTR(ACC,7,4) PRIME,  
		AZSTAT INACTIVE,  
		AZGROP||' - '||RTRIM(BQ1TITL) FGRP,  
		AZFUT3,  
		RTRIM(D35DES1) EBITDA,  
		SUBSTR(ACC,5,2)||CASE WHEN LENGTH(RTRIM(D35DES2)) > 0 THEN ' - '||RTRIM(D35DES2) ELSE '' END DEPARTMENT,  
		RTRIM(D35DES3) ELIM_TYPE,  
		RTRIM(D35USR1) IC_POINTER,  
		RTRIM(D35USR2) ELIM_GRP,  
		RTRIM(D35USR3) FUNC_AREA,  
		D35USR4 CONSOL_LEVEL,  
		PERIOD FSPR, P.CAPR,  
		OPNB,  
		NETT,  
		ENDB,  
		ROUND(OPNB*RATE,2) OPNB_USD,  
		ROUND(NETT*RATE,2) NETT_USD,  
		ROUND(ENDB*RATE,2) ENDB_USD,  
		BGT,  
		ROUND(BGT*RATE,2) BGT_USD  
	FROM  
		( 
		SELECT 	 				 
		AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'01' AS PERIOD, AJ4OB01 AS OPNB, AJ4TT01 AS NETT, AJ4OB01+AJ4TT01 AS ENDB, AJ4CB01 BGT  
		FROM  
			LGDAT.GLMT GLMT 	  
	  
		UNION ALL  
  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'02' AS PERIOD, AJ4OB02 AS OPNB, AJ4TT02 AS NETT, AJ4OB02+AJ4TT02 AS ENDB, AJ4CB02 BGT  
		FROM  
			LGDAT.GLMT GLMT  
		  
			  
		  
		UNION ALL  
		  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'03' AS PERIOD, AJ4OB03 AS OPNB, AJ4TT03 AS NETT, AJ4OB03+AJ4TT03 AS ENDB, AJ4CB03 BGT  
		FROM  
			LGDAT.GLMT GLMT  
		  
			  
  
		UNION ALL  
  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'04' AS PERIOD, AJ4OB04 AS OPNB, AJ4TT04 AS NETT, AJ4OB04+AJ4TT04 AS ENDB, AJ4CB04 BGT  
		FROM  
			LGDAT.GLMT GLMT  
		  
			  
  
		UNION ALL  
  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'05' AS PERIOD, AJ4OB05 AS OPNB, AJ4TT05 AS NETT, AJ4OB05+AJ4TT05 AS ENDB, AJ4CB05 BGT  
		FROM  
			LGDAT.GLMT GLMT  
		  
			  
  
		UNION ALL  
		  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'06' AS PERIOD, AJ4OB06 AS OPNB, AJ4TT06 AS NETT, AJ4OB06+AJ4TT06 AS ENDB, AJ4CB06 BGT  
		FROM  
			LGDAT.GLMT GLMT  
		  
			  
  
		UNION ALL  
  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'07' AS PERIOD, AJ4OB07 AS OPNB, AJ4TT07 AS NETT, AJ4OB07+AJ4TT07 AS ENDB, AJ4CB07 BGT  
		FROM  
			LGDAT.GLMT GLMT  
		  
		UNION ALL  
  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'08' AS PERIOD, AJ4OB08 AS OPNB, AJ4TT08 AS NETT, AJ4OB08+AJ4TT08 AS ENDB, AJ4CB08 BGT  
		FROM  
			LGDAT.GLMT GLMT  
		  
	  
		UNION ALL  
  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'09' AS PERIOD, AJ4OB09 AS OPNB, AJ4TT09 AS NETT, AJ4OB09+AJ4TT09 AS ENDB, AJ4CB09 BGT  
		FROM  
			LGDAT.GLMT GLMT  
		  
  
		UNION ALL  
		  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'10' AS PERIOD, AJ4OB10 AS OPNB, AJ4TT10 AS NETT, AJ4OB10+AJ4TT10 AS ENDB, AJ4CB10 BGT  
		FROM  
			LGDAT.GLMT GLMT  
		  
		  
		UNION ALL  
		  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'11' AS PERIOD, AJ4OB11 AS OPNB, AJ4TT11 AS NETT, AJ4OB11+AJ4TT11 AS ENDB, AJ4CB11 BGT  
		FROM  
			LGDAT.GLMT GLMT  
		  
  
		UNION ALL  
  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'12' AS PERIOD, AJ4OB12 AS OPNB, AJ4TT12 AS NETT, AJ4OB12+AJ4TT12 AS ENDB, AJ4CB12 BGT  
		FROM  
			LGDAT.GLMT GLMT  
		  
  
		UNION ALL  
		  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'13' AS PERIOD, AJ4OB13 AS OPNB, AJ4TT13 AS NETT, AJ4OB13+AJ4TT13 AS ENDB, AJ4CB13 BGT  
		FROM  
			LGDAT.GLMT GLMT  
		  
  
		UNION ALL  
  
		SELECT  
			AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC, SUBSTR(AJ4CCYY,3,2)||'14' AS PERIOD, AJ4OB14 AS OPNB, AJ4TT14 AS NETT, AJ4OB14+AJ4TT14 AS ENDB, AJ4CB14 BGT  
		FROM  
			LGDAT.GLMT GLMT  
								  
		) "STACKED"  
		INNER JOIN LGDAT.MAST ON  
			DIGITS(AZCOMP)||DIGITS(AZGL#1)||DIGITS(AZGL#2) = STACKED.ACC  
		LEFT OUTER JOIN LGDAT.FGRP ON  
			BQ1GRP = AZGROP  
		LEFT OUTER JOIN LGDAT.GGTP ON  
			D35GCDE = AZFUT3  
		LEFT OUTER JOIN RLARP.VW_FFGLPD P ON  
			COMP = SUBSTR(ACC,1,2) AND  
			P.FSPR = PERIOD  
		LEFT OUTER JOIN RLARP.FFCRET X ON  
			FCUR = AZFUT2 AND  
			TCUR = 'US' AND  
			RTYP = CASE WHEN AZATYP <= '3' THEN 'ME' ELSE 'MA' END AND  
			X.PERD = PERIOD  
	WHERE  
		(OPNB <> 0 OR NETT <> 0 OR ENDB <> 0) ; 
  
LABEL ON TABLE RLARP.VW_FFTB 
	IS 'Acct - Trial Balance' ; 
  
LABEL ON COLUMN RLARP.VW_FFTB 
(TITLE IS 'Account Title', 
	INACTIVE IS 'Account             Status              Code', 
	GLCC IS 'Future Use          Fut3', 
	CONSOL_LEVEL IS 'User Field 4') ; 
  
LABEL ON COLUMN RLARP.VW_FFTB 
(TITLE TEXT IS 'Account Title', 
	INACTIVE TEXT IS 'Account Status Code', 
	GLCC TEXT IS 'Future Use Fut3', 
	CONSOL_LEVEL TEXT IS 'User Field 4', 
	OPNB TEXT IS 'Opening Balance (Period 1)', 
	NETT TEXT IS 'Actual Tran. This Year (Period 1)', 
	BGT TEXT IS 'Current Budget (Period 1)') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFTB TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFTB TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFTBLCS (
	COMP, 
	PLNT, 
	ACC, 
	PRIME, 
	AZTITL, 
	INACTIVE, 
	GLCC, 
	ELIM_TYPE, 
	ELIM_REL, 
	ELIM_DFGRP, 
	ELIM_CO, 
	FSPR, 
	CAPR, 
	SDAT, 
	EDAT, 
	FGRP, 
	STMT, 
	LVL0, 
	LVL1, 
	LVL2, 
	LVL3, 
	EBITDA, 
	DEPARTMENT, 
	DEP_GRP, 
	CURR, 
	OPEN_LOCAL, 
	NET_LOCAL, 
	END_LOCAL, 
	BDGT_LOCAL, 
	USD_OPEN, 
	USD_NET, 
	USD_END, 
	USD_BDGT) 
	AS 
	SELECT  
			SUBSTR(ACC,1,2) AS COMP,  
			SUBSTR(ACC,3,2) PLNT,  
			ACC,  
			SUBSTR(ACC,7,4) PRIME,  
			AZTITL,  
			AZSTAT INACTIVE,  
			AZFUT3 GLCC,  
			RTRIM(D35DES3) ELIM_TYPE,  
			RTRIM(D35USR1) ELIM_REL,  
			RTRIM(D35USR2) ELIM_DFGRP, 
			SUBSTR(DIGITS(D35USR4),9,2) ELIM_CO, 
			PERIOD FSPR,  
			CAPR,  
			SDAT,  
			EDAT,  
			SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)||' - '||RTRIM(TL.BQ1TITL) FGRP,  
			CASE WHEN AZATYP <= 3  
				THEN 'BALANCE SHEET'  
				ELSE 'INCOME STATEMENT'  
			END STMT,  
			SUBSTR(SUBSTR(LTRIM(D35USR2)||AZGROP,1,7),1,1)||' - '||RTRIM(SUBSTR(A249,1,30)) LVL0,  
			CASE LENGTH(RTRIM(SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)))  
			WHEN 3 THEN SUBSTR(TL.BQ1GRP,2,2)||' - '||RTRIM(TL.BQ1TITL)  
			ELSE SUBSTR(FA.BQ1GRP,2,2)||' - '||RTRIM(FA.BQ1TITL)  
			END LVL1,  
			CASE LENGTH(RTRIM(SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)))  
			WHEN 3 THEN ''  
			WHEN 5 THEN SUBSTR(TL.BQ1GRP,4,2)||' - '||RTRIM(TL.BQ1TITL)  
			ELSE SUBSTR(FB.BQ1GRP,4,2)||' - '||RTRIM(FB.BQ1TITL)  
			END LVL2,  
			CASE LENGTH(RTRIM(SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)))  
			WHEN 3 THEN ''  
			WHEN 5 THEN ''  
			ELSE SUBSTR(TL.BQ1GRP,6,2)||' - '||RTRIM(TL.BQ1TITL)  
			END LVL3,  
			RTRIM(D35DES1) EBITDA,  
			RTRIM(SUBSTR(ACC,5,2)||CASE WHEN LENGTH(RTRIM(D35DES2)) >0 THEN ' - '||D35DES2 ELSE '' END) DEPARTMENT,  
			RTRIM(D35USR3) DEP_GRP,  
			AZFUT2 CURR, 
			OPEN OPEN_LOCAL,  
			NET NET_LOCAL,  
			END END_LOCAL,  
			BDGT BDGT_LOCAL,  
			OPEN * RATE USD_OPEN,  
			NET * RATE USD_NET,  
			END * RATE USD_END,  
			BDGT * RATE USD_BDGT  
		FROM 	  
			( 
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'01' AS PERIOD,  
					AJ4OB01 AS OPEN,  
					AJ4TT01 AS NET,  
					AJ4OB01+AJ4TT01 AS END, AJ4CB01 BDGT  
				FROM  
					LGDAT.GLMT GLMT  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'02' AS PERIOD,  
					AJ4OB02 AS OPEN,  
					AJ4TT02 AS NET,  
					AJ4OB02+AJ4TT02 AS END, AJ4CB02 BDGT  
				  
				FROM  
					LGDAT.GLMT GLMT  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'03' AS PERIOD,  
					AJ4OB03 AS OPEN,  
					AJ4TT03 AS NET,  
					AJ4OB03+AJ4TT03 AS END, AJ4CB03 BDGT  
				  
				FROM  
					LGDAT.GLMT GLMT  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'04' AS PERIOD,  
					AJ4OB04 AS OPEN,  
					AJ4TT04 AS NET,  
					AJ4OB04+AJ4TT04 AS END, AJ4CB04 BDGT  
				  
				  
				FROM  
					LGDAT.GLMT GLMT  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'05' AS PERIOD,  
					AJ4OB05 AS OPEN,  
					AJ4TT05 AS NET,  
					AJ4OB05+AJ4TT05 AS END, AJ4CB05 BDGT  
				  
				FROM  
					LGDAT.GLMT GLMT  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'06' AS PERIOD,  
					AJ4OB06 AS OPEN,  
					AJ4TT06 AS NET,  
					AJ4OB06+AJ4TT06 AS END,AJ4CB06 BDGT  
				  
				  
				FROM  
					LGDAT.GLMT GLMT  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'07' AS PERIOD,  
					AJ4OB07 AS OPEN,  
					AJ4TT07 AS NET,  
					AJ4OB07+AJ4TT07 AS END,AJ4CB07 BDGT  
				  
				  
				FROM  
					LGDAT.GLMT GLMT  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'08' AS PERIOD,  
					AJ4OB08 AS OPEN,  
					AJ4TT08 AS NET,  
					AJ4OB08+AJ4TT08 AS END, AJ4CB08 BDGT  
				  
				  
				FROM  
					LGDAT.GLMT GLMT  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'09' AS PERIOD,  
					AJ4OB09 AS OPEN,  
					AJ4TT09 AS NET,  
					AJ4OB09+AJ4TT09 AS END, AJ4CB09 BDGT  
				  
				FROM  
					LGDAT.GLMT GLMT  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'10' AS PERIOD,  
					AJ4OB10 AS OPEN,  
					AJ4TT10 AS NET,  
					AJ4OB10+AJ4TT10 AS END, AJ4CB10 BDGT  
				  
				  
				FROM  
					LGDAT.GLMT GLMT  
				  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'11' AS PERIOD,  
					AJ4OB11 AS OPEN,  
					AJ4TT11 AS NET,  
					AJ4OB11+AJ4TT11 AS END, AJ4CB11 BDGT  
				  
				FROM  
					LGDAT.GLMT GLMT  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'12' AS PERIOD,  
					AJ4OB12 AS OPEN,  
					AJ4TT12 AS NET,  
					AJ4OB12+AJ4TT12 AS END, AJ4CB12 BDGT  
				  
				FROM  
					LGDAT.GLMT GLMT  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'13' AS PERIOD,  
					AJ4OB13 AS OPEN,  
					AJ4TT13 AS NET,  
					AJ4OB13+AJ4TT13 AS END, AJ4CB13 BDGT  
				  
				FROM  
					LGDAT.GLMT GLMT  
				  
				UNION ALL  
				  
				SELECT  
					AJ4COMP||DIGITS(AJ4GL#1)||DIGITS(AJ4GL#2) AS ACC,  
					SUBSTR(AJ4CCYY,3,2)||'14' AS PERIOD,  
					AJ4OB14 AS OPEN,  
					AJ4TT14 AS NET,  
					AJ4OB14+AJ4TT14 AS END, AJ4CB14 BDGT  
				FROM  
					LGDAT.GLMT GLMT  
			) "STACKED"  
			INNER JOIN LGDAT.MAST ON  
				DIGITS(AZCOMP)||DIGITS(AZGL#1)||DIGITS(AZGL#2) = STACKED.ACC  
			LEFT OUTER JOIN LGDAT.GGTP ON  
				D35GCDE = AZFUT3  
			LEFT OUTER JOIN LGDAT.NAME N ON  
				SUBSTR(N.A7,7,1) = SUBSTR(LTRIM(D35USR2)||AZGROP,1,1) AND  
				SUBSTR(N.A7,1,1) = 'A'  
			LEFT OUTER JOIN LGDAT.FGRP TL ON  
				TL.BQ1GRP = SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)  
			LEFT OUTER JOIN LGDAT.FGRP FA ON  
				FA.BQ1GRP = SUBSTR(TL.BQ1GRP,1,3) AND  
				LENGTH(RTRIM(TL.BQ1GRP)) >=5  
			LEFT OUTER JOIN LGDAT.FGRP FB ON  
				FB.BQ1GRP = SUBSTR(TL.BQ1GRP,1,5) AND  
				LENGTH(RTRIM(TL.BQ1GRP)) >=7  
			LEFT OUTER JOIN RLARP.FFCRET X ON  
				X.PERD = PERIOD AND  
				X.FCUR = AZFUT2 AND  
				X.TCUR = 'US' AND  
				X.RTYP = CASE WHEN AZATYP <= 3 THEN 'ME' ELSE 'MA' END  
			LEFT OUTER JOIN RLARP.VW_FFGLPD ON  
				COMP = SUBSTR(ACC,1,2) AND  
				FSPR = PERIOD  
		WHERE  
			( 
			OPEN <> 0 OR  
			NET <> 0 OR  
			END <> 0  
			) ; 
  
LABEL ON TABLE RLARP.VW_FFTBLCS 
	IS 'Acct - Trial Balance - Logical Consolidation' ; 
  
LABEL ON COLUMN RLARP.VW_FFTBLCS 
(COMP IS 'Company', 
	PLNT IS 'Plant', 
	ACC IS 'Accoun', 
	PRIME IS 'Prime', 
	AZTITL IS 'Title', 
	INACTIVE IS 'Status', 
	GLCC IS 'GL Category Code', 
	ELIM_TYPE IS 'Elimiatation Type', 
	ELIM_REL IS 'Elimination Relationship', 
	ELIM_DFGRP IS 'Destination Account Group', 
	ELIM_CO IS 'Eliminating Company', 
	FSPR IS 'Fiscal Period', 
	CAPR IS 'Calendar Period', 
	SDAT IS 'Start Date', 
	EDAT IS 'End Date', 
	FGRP IS 'Account Group', 
	STMT IS 'Statement', 
	LVL0 IS 'Level 0', 
	LVL1 IS 'Level 1', 
	LVL2 IS 'Level 2', 
	LVL3 IS 'Level 3', 
	EBITDA IS 'EBITDA Categorization', 
	DEPARTMENT IS 'Department & Description', 
	DEP_GRP IS 'Department Group', 
	CURR IS 'Currency', 
	OPEN_LOCAL IS 'Openign Balance in Local Currency', 
	NET_LOCAL IS 'Net Activity in Local Currency', 
	END_LOCAL IS 'Ending Balance in Local Currency', 
	BDGT_LOCAL IS 'Budget in Local Currency', 
	USD_OPEN IS 'Openign Balance in USD', 
	USD_NET IS 'Net Activtiy in USD', 
	USD_END IS 'Ending Balance in USD', 
	USD_BDGT IS 'Budget in USD') ; 
  
LABEL ON COLUMN RLARP.VW_FFTBLCS 
(COMP TEXT IS 'Company', 
	PLNT TEXT IS 'Plant', 
	ACC TEXT IS 'Accoun', 
	PRIME TEXT IS 'Prime', 
	AZTITL TEXT IS 'Title', 
	INACTIVE TEXT IS 'Status', 
	GLCC TEXT IS 'GL Category Code', 
	ELIM_TYPE TEXT IS 'Elimiatation Type', 
	ELIM_REL TEXT IS 'Elimination Relationship', 
	ELIM_DFGRP TEXT IS 'Destination Account Group', 
	ELIM_CO TEXT IS 'Eliminating Company', 
	FSPR TEXT IS 'Fiscal Period', 
	CAPR TEXT IS 'Calendar Period', 
	SDAT TEXT IS 'Start Date', 
	EDAT TEXT IS 'End Date', 
	FGRP TEXT IS 'Account Group', 
	STMT TEXT IS 'Statement', 
	LVL0 TEXT IS 'Level 0', 
	LVL1 TEXT IS 'Level 1', 
	LVL2 TEXT IS 'Level 2', 
	LVL3 TEXT IS 'Level 3', 
	EBITDA TEXT IS 'EBITDA Categorization', 
	DEPARTMENT TEXT IS 'Department & Description', 
	DEP_GRP TEXT IS 'Department Group', 
	CURR TEXT IS 'Currency', 
	OPEN_LOCAL TEXT IS 'Openign Balance in Local Currency', 
	NET_LOCAL TEXT IS 'Net Activity in Local Currency', 
	END_LOCAL TEXT IS 'Ending Balance in Local Currency', 
	BDGT_LOCAL TEXT IS 'Budget in Local Currency', 
	USD_OPEN TEXT IS 'Openign Balance in USD', 
	USD_NET TEXT IS 'Net Activtiy in USD', 
	USD_END TEXT IS 'Ending Balance in USD', 
	USD_BDGT TEXT IS 'Budget in USD') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFTBLCS TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFTBLCS TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFTMCD (
	TERM, 
	DESCR, 
	PAYPERC, 
	PAYDATE, 
	PAYDAYS, 
	DISCP, 
	DISCDAYS, 
	VATPWACC) 
	AS 
	SELECT  
		LTRIM(RTRIM(A9)) TERM,  
		LTRIM(RTRIM(A30)) DESCR,  
		FLOAT(SUBSTR(A215,10,3)) PAYPERC,  
		CASE INT(SUBSTR(A215,28,6)) WHEN 0 THEN '' ELSE '20'||SUBSTR(A215,32,2)||'-'||SUBSTR(A215,28,2)||'-'||SUBSTR(A215,30,2) END PAYDATE,  
		INT(SUBSTR(A215,64,3)) PAYDAYS,  
		ROUND(FLOAT(SUBSTR(A215,102,4))/FLOAT(10000),2) DISCP,  
		INT(SUBSTR(A215,84,3)) DISCDAYS, 
		-MIN(
			FLOAT(
				(
					30.0- 
					CASE  
						CASE INT(SUBSTR(A215,28,6))  
							WHEN 0 THEN ''  
							ELSE '20'||SUBSTR(A215,32,2)||'-'||SUBSTR(A215,28,2)||'-'||SUBSTR(A215,30,2)  
						END  
					WHEN '' THEN INT(SUBSTR(A215,64,3))  
					ELSE  
						DAYS(
						CASE INT(SUBSTR(A215,28,6))  
							WHEN 0 THEN ''  
							ELSE '20'||SUBSTR(A215,32,2)||'-'||SUBSTR(A215,28,2)||'-'||SUBSTR(A215,30,2)  
						END 
						) -  
						DAYS(
							CURRENT_DATE 
						)  
					END 
				)/30.0 
			)*.01, 
			FLOAT(30.0 - INT(SUBSTR(A215,84,3)))/30.0*.01-COALESCE(ROUND(FLOAT(SUBSTR(A215,102,4))/FLOAT(10000),2),0.0) 
		) VATPWACC 
	FROM  
		LGDAT.CODE  
	WHERE  
		A2 = 'NN' ; 
  
LABEL ON TABLE RLARP.VW_FFTMCD 
	IS 'Mast - Term Codes' ; 
  
GRANT ALTER, DELETE, REFERENCES, SELECT   
ON RLARP.VW_FFTMCD TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, DELETE, REFERENCES, SELECT   
ON RLARP.VW_FFTMCD TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFUNIT (
	IHPART, 
	IHUNT1, 
	IHUNT2, 
	FACTOR) 
	AS 
	SELECT  
			IHPART, IHUNT1, IHUNT2, IHCNV2/IHCNV1 FACTOR  
		FROM  
			LGDAT.PUNIT  
		  
		UNION ALL  
		  
		SELECT  
			IHPART, IHUNT2, IHUNT1, IHCNV1/IHCNV2 FACTOR  
		FROM  
			LGDAT.PUNIT ; 
  
LABEL ON TABLE RLARP.VW_FFUNIT 
	IS 'Inv - stacked unit of measure conversions' ; 
  
LABEL ON COLUMN RLARP.VW_FFUNIT 
(IHPART IS 'Part                Number', 
	IHUNT1 IS 'Unit1', 
	IHUNT2 IS 'Unit2') ; 
  
LABEL ON COLUMN RLARP.VW_FFUNIT 
(IHPART TEXT IS 'Part Number', 
	IHUNT1 TEXT IS 'Unit1', 
	IHUNT2 TEXT IS 'Unit2') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFUNIT TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFUNIT TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_FFWFACM (
	MODULE, 
	BATCH, 
	PERD, 
	TDATE, 
	PDATE, 
	ACCT, 
	AMT, 
	KBPRJ#, 
	USRN, 
	REV, 
	CUSMOD, 
	CUSKEY1, 
	CUSKEY1D, 
	CUSKEY2, 
	CUSKEY2D, 
	D07RKEY, 
	CUSKEY3D, 
	CUSKEY4, 
	CUSKEY4D, 
	CUSVEND, 
	CUSCUST, 
	RECID) 
	AS 
	SELECT  
			'APMA' MODULE,  
			BATCH,  
			PERD,  
			TDATE,  
			PDATE,  
			KRCOM#||DIGITS(D07GLAC) ACCT,  
			D07AMT*CASE SUBSTR(CUSMOD,1,3) WHEN 'REV' THEN -1 ELSE 1 END AMT,  
			KBPRJ#,  
			USRN,  
			REV,  
			CUSMOD,  
			DIGITS(KRPO#)||DIGITS(KRPOI#)||' - '||RTRIM(KRDESC) CUSKEY1,  
			'PO-ITEM-DESCR' CUSKEY1D,  
			KRPT# CUSKEY2,  
			'PART' CUSKEY2D,  
			D07RKEY,  
			'MASTER RECEIPT KEY' CUSKEY3D,  
			KRQREC CUSKEY4,  
			'QTY' CUSKEY4D,  
			KRVEN# CUSVEND,  
			'' CUSCUST,  
			DIGITS(D07TXN) RECID  
		FROM  
			( 
			SELECT DISTINCT  
				MODULE, BATCH, PERD, TDATE, PDATE, SUBSTR(ACCT,1,2) COMP, USRN, REV, CUSMOD, PRIORP RPERD  
			FROM  
				RLARP.FFSBGLWF  
				LEFT OUTER JOIN RLARP.VW_PRFSPR PP ON  
					PP.COMP = SUBSTR(ACCT,1,2) AND  
					PP.CURRP = PERD  
				  --Changed this to pull in the view PRFSPR to grab the prior period without having to rebuild the function FSPR_OFFSET which doesn't work with 13 periods 
			WHERE  
				MODULE = 'APAC'  
			) X  
			INNER JOIN RLARP.FFPORCAG G ON  
				G.D07FSPR = CASE SUBSTR(CUSMOD,1,1) WHEN 'A' THEN '20'||X.PERD ELSE '20'||X.RPERD END  
			INNER JOIN RLARP.FFPORCAP C ON  
				KRRKEY = D07RKEY AND  
				FISC = SUBSTR(D07FSPR,3,4) AND  
				KRCOM# = X.COMP  
			INNER JOIN LGDAT.POI ON  
				KBPO# = KRPO# AND  
				KBITM# = KRPOI# ; 
  
LABEL ON TABLE RLARP.VW_FFWFACM 
	IS 'Acct - Modified accrual, swap out with APAC' ; 
  
LABEL ON COLUMN RLARP.VW_FFWFACM 
(KBPRJ# IS 'Project             Number', 
	D07RKEY IS 'Master              Receipt Key') ; 
  
LABEL ON COLUMN RLARP.VW_FFWFACM 
(KBPRJ# TEXT IS 'Project Number', 
	D07RKEY TEXT IS 'Master Receipt Key') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFWFACM TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_FFWFACM TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_GLJCS (
	COMP, 
	PLNT, 
	ACCT, 
	PRIME, 
	AZTITL, 
	INACTIVE, 
	GLCC, 
	ELIM_TYPE, 
	ELIM_REL, 
	ELIM_DFGRP, 
	ELIM_CO, 
	FSPR, 
	CAPR, 
	SDAT, 
	EDAT, 
	FGRP, 
	STMT, 
	LVL0, 
	LVL1, 
	LVL2, 
	LVL3, 
	BATCH, 
	PROJ, 
	USRN, 
	MODULE, 
	CUSMOD, 
	CUSKEY1, 
	CUSKEY1D, 
	CUSKEY2, 
	CUSKEY2D, 
	CUSKEY3, 
	CUSKEY3D, 
	CUSKEY4, 
	CUSKEY4D, 
	PARTY, 
	RECID, 
	TDATE, 
	EBITDA, 
	DEPARTMENT, 
	DEP_GRP, 
	CURR, 
	AMOUNT) 
	AS 
	SELECT  
		SUBSTR(ACCT,1,2) AS COMP,  
		SUBSTR(ACCT,3,2) PLNT,  
		ACCT,  
		SUBSTR(ACCT,7,4) PRIME,  
		AZTITL,  
		AZSTAT INACTIVE,  
		AZFUT3 GLCC,  
		RTRIM(D35DES3) ELIM_TYPE,  
		RTRIM(D35USR1) ELIM_REL,  
		RTRIM(D35USR2) ELIM_DFGRP,  
		SUBSTR(DIGITS(D35USR4),9,2) ELIM_CO, 
		D.PERD FSPR,  
		CAPR,  
		SDAT,  
		EDAT,  
		AZGROP||' - '||RTRIM(TL.BQ1TITL) FGRP,  
		CASE WHEN AZATYP <= 3  
			THEN 'BALANCE SHEET'  
			ELSE 'INCOME STATEMENT'  
		END STMT,  
		SUBSTR(AZGROP,1,1)||' - '||RTRIM(SUBSTR(A249,1,30)) LVL0,  
		CASE LENGTH(RTRIM(AZGROP))  
		WHEN 3 THEN SUBSTR(TL.BQ1GRP,2,2)||' - '||RTRIM(TL.BQ1TITL)  
		ELSE SUBSTR(FA.BQ1GRP,2,2)||' - '||RTRIM(FA.BQ1TITL)  
		END LVL1,  
		CASE LENGTH(RTRIM(AZGROP))  
		WHEN 3 THEN ''  
		WHEN 5 THEN SUBSTR(TL.BQ1GRP,4,2)||' - '||RTRIM(TL.BQ1TITL)  
		ELSE SUBSTR(FB.BQ1GRP,4,2)||' - '||RTRIM(FB.BQ1TITL)  
		END LVL2,  
		CASE LENGTH(RTRIM(AZGROP))  
		WHEN 3 THEN ''  
		WHEN 5 THEN ''  
		ELSE SUBSTR(TL.BQ1GRP,6,2)||' - '||RTRIM(TL.BQ1TITL)  
		END LVL3,  
		BATCH, PROJ, USRN, 
		MODULE, 
		CUSMOD, 
		CUSKEY1, CUSKEY1D, 
		CUSKEY2, CUSKEY2D,  
		CUSKEY3, CUSKEY3D,  
		CUSKEY4, CUSKEY4D,  
		COALESCE(BTVEND, BVCUST)||' - '||COALESCE(BTNAME, BVNAME) PARTY, RECID, 
		TDATE, 
		RTRIM(D35DES1) EBITDA,  
		RTRIM(SUBSTR(ACCT,5,2)||CASE WHEN LENGTH(RTRIM(D35DES2)) >0 THEN ' - '||D35DES2 ELSE '' END) DEPARTMENT,  
		RTRIM(D35USR3) DEP_GRP,  
		AZFUT2 CURR, 
		AMT AMOUNT 
	FROM 
		RLARP.FFSBGLR1 D 
		INNER JOIN LGDAT.MAST ON  
		DIGITS(AZCOMP)||DIGITS(AZGL#1)||DIGITS(AZGL#2) = D.ACCT 
		LEFT OUTER JOIN LGDAT.GGTP ON  
		D35GCDE = AZFUT3  
		LEFT OUTER JOIN LGDAT.NAME N ON  
		SUBSTR(N.A7,7,1) = SUBSTR(AZGROP,1,1) AND  
		SUBSTR(N.A7,1,1) = 'A'  
		LEFT OUTER JOIN LGDAT.FGRP TL ON 
			TL.BQ1GRP = AZGROP 
		LEFT OUTER JOIN LGDAT.FGRP FA ON  
			FA.BQ1GRP = SUBSTR(TL.BQ1GRP,1,3) AND  
			LENGTH(RTRIM(TL.BQ1GRP)) >=5  
		LEFT OUTER JOIN LGDAT.FGRP FB ON  
			FB.BQ1GRP = SUBSTR(TL.BQ1GRP,1,5) AND  
			LENGTH(RTRIM(TL.BQ1GRP)) >=7  
		LEFT OUTER JOIN RLARP.VW_FFGLPD ON  
			COMP = SUBSTR(ACCT,1,2) AND  
			FSPR = D.PERD 
		LEFT OUTER JOIN LGDAT.VEND ON	 
			BTVEND = CUSVEND 
		LEFT OUTER JOIN LGDAT.CUST ON 
			BVCUST = CUSCUST ; 
  
LABEL ON TABLE RLARP.VW_GLJCS 
	IS 'Acct - Ledger Activity - journal consolidation' ; 
  
LABEL ON COLUMN RLARP.VW_GLJCS 
(AZTITL IS 'Account Title', 
	INACTIVE IS 'Account             Status              Code', 
	GLCC IS 'Future Use          Fut3', 
	SDAT IS 'Starting            Date ', 
	EDAT IS 'Ending              Date ', 
	CURR IS 'Currency            Code') ; 
  
LABEL ON COLUMN RLARP.VW_GLJCS 
(AZTITL TEXT IS 'Account Title', 
	INACTIVE TEXT IS 'Account Status Code', 
	GLCC TEXT IS 'Future Use Fut3', 
	SDAT TEXT IS 'Starting Date', 
	EDAT TEXT IS 'Ending Date', 
	CURR TEXT IS 'Currency Code') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_GLJCS TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_GLJCS TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_GLLCS (
	COMP, 
	PLNT, 
	ACCT, 
	PRIME, 
	AZTITL, 
	INACTIVE, 
	GLCC, 
	ELIM_TYPE, 
	ELIM_REL, 
	ELIM_DFGRP, 
	ELIM_CO, 
	FSPR, 
	CAPR, 
	SDAT, 
	EDAT, 
	FGRP, 
	STMT, 
	LVL0, 
	LVL1, 
	LVL2, 
	LVL3, 
	BATCH, 
	PROJ, 
	USRN, 
	MODULE, 
	CUSMOD, 
	CUSKEY1, 
	CUSKEY1D, 
	CUSKEY2, 
	CUSKEY2D, 
	CUSKEY3, 
	CUSKEY3D, 
	CUSKEY4, 
	CUSKEY4D, 
	PARTY, 
	RECID, 
	TDATE, 
	EBITDA, 
	DEPARTMENT, 
	DEP_GRP, 
	CURR, 
	COMPONENT, 
	AMOUNT) 
	AS 
	SELECT  
		SUBSTR(ACCT,1,2) AS COMP,  
		SUBSTR(ACCT,3,2) PLNT,  
		ACCT,  
		SUBSTR(ACCT,7,4) PRIME,  
		AZTITL,  
		AZSTAT INACTIVE,  
		AZFUT3 GLCC,  
		RTRIM(D35DES3) ELIM_TYPE,  
		RTRIM(D35USR1) ELIM_REL,  
		RTRIM(D35USR2) ELIM_DFGRP,  
		SUBSTR(DIGITS(D35USR4),9,2) ELIM_CO,  
		D.PERD FSPR,  
		CAPR,  
		SDAT,  
		EDAT,  
		SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)||' - '||RTRIM(TL.BQ1TITL) FGRP,  
		CASE WHEN AZATYP <= 3  
			THEN 'BALANCE SHEET'  
			ELSE 'INCOME STATEMENT'  
		END STMT,  
		SUBSTR(SUBSTR(LTRIM(D35USR2)||AZGROP,1,7),1,1)||' - '||RTRIM(SUBSTR(A249,1,30)) LVL0,  
		CASE LENGTH(RTRIM(SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)))  
		WHEN 3 THEN SUBSTR(TL.BQ1GRP,2,2)||' - '||RTRIM(TL.BQ1TITL)  
		ELSE SUBSTR(FA.BQ1GRP,2,2)||' - '||RTRIM(FA.BQ1TITL)  
		END LVL1,  
		CASE LENGTH(RTRIM(SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)))  
		WHEN 3 THEN ''  
		WHEN 5 THEN SUBSTR(TL.BQ1GRP,4,2)||' - '||RTRIM(TL.BQ1TITL)  
		ELSE SUBSTR(FB.BQ1GRP,4,2)||' - '||RTRIM(FB.BQ1TITL)  
		END LVL2,  
		CASE LENGTH(RTRIM(SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)))  
		WHEN 3 THEN ''  
		WHEN 5 THEN ''  
		ELSE SUBSTR(TL.BQ1GRP,6,2)||' - '||RTRIM(TL.BQ1TITL)  
		END LVL3,  
		BATCH,  
		PROJ,  
		USRN, 
		MODULE,  
		CUSMOD,  
		CUSKEY1, CUSKEY1D,  
		CUSKEY2, CUSKEY2D,  
		CUSKEY3, CUSKEY3D,  
		CUSKEY4, CUSKEY4D,  
		COALESCE(BTVEND, BVCUST)||' - '||COALESCE(BTNAME, BVNAME) PARTY,  
		RECID, 
		TDATE,  
		RTRIM(D35DES1) EBITDA,  
		RTRIM(SUBSTR(ACCT,5,2)||CASE WHEN LENGTH(RTRIM(D35DES2)) >0 THEN ' - '||D35DES2 ELSE '' END) DEPARTMENT,  
		RTRIM(D35USR3) DEP_GRP,  
		AZFUT2 CURR,  
		'NET' COMPONENT,  
		AMT*RATE AMOUNT  
	FROM  
		RLARP.FFSBGLR1 D  
		INNER JOIN LGDAT.MAST ON  
			DIGITS(AZCOMP)||DIGITS(AZGL#1)||DIGITS(AZGL#2) = D.ACCT  
		LEFT OUTER JOIN LGDAT.GGTP ON  
			D35GCDE = AZFUT3  
		LEFT OUTER JOIN LGDAT.NAME N ON  
			SUBSTR(N.A7,7,1) = SUBSTR(LTRIM(D35USR2)||AZGROP,1,1) AND  
			SUBSTR(N.A7,1,1) = 'A'  
		LEFT OUTER JOIN LGDAT.FGRP TL ON  
			TL.BQ1GRP = SUBSTR(LTRIM(D35USR2)||AZGROP,1,7)  
		LEFT OUTER JOIN LGDAT.FGRP FA ON  
			FA.BQ1GRP = SUBSTR(TL.BQ1GRP,1,3) AND  
			LENGTH(RTRIM(TL.BQ1GRP)) >=5  
		LEFT OUTER JOIN LGDAT.FGRP FB ON  
			FB.BQ1GRP = SUBSTR(TL.BQ1GRP,1,5) AND  
			LENGTH(RTRIM(TL.BQ1GRP)) >=7  
		LEFT OUTER JOIN RLARP.FFCRET X ON  
			X.PERD = D.PERD AND  
			X.FCUR = AZFUT2 AND  
			X.TCUR = 'US' AND  
			X.RTYP = CASE WHEN AZATYP <= 3 THEN 'ME' ELSE 'MA' END  
		LEFT OUTER JOIN RLARP.VW_FFGLPD ON  
			COMP = SUBSTR(ACCT,1,2) AND  
			FSPR = D.PERD  
		LEFT OUTER JOIN LGDAT.VEND ON	  
			BTVEND = CUSVEND  
		LEFT OUTER JOIN LGDAT.CUST ON  
			BVCUST = CUSCUST  
	WHERE  
		SUBSTR(ACCT,1,2) > '19' ; 
  
LABEL ON TABLE RLARP.VW_GLLCS 
	IS 'Acct - Ledger Activity - Logical Consolidation' ; 
  
LABEL ON COLUMN RLARP.VW_GLLCS 
(AZTITL IS 'Account Title', 
	INACTIVE IS 'Account             Status              Code', 
	GLCC IS 'Future Use          Fut3', 
	SDAT IS 'Starting            Date', 
	EDAT IS 'Ending              Date', 
	CURR IS 'Currency            Code') ; 
  
LABEL ON COLUMN RLARP.VW_GLLCS 
(COMP TEXT IS 'Company', 
	PLNT TEXT IS 'Plant', 
	ACCT TEXT IS 'Account', 
	PRIME TEXT IS 'Prime', 
	AZTITL TEXT IS 'Account Title', 
	INACTIVE TEXT IS 'Status', 
	GLCC TEXT IS 'GL Category Code', 
	ELIM_TYPE TEXT IS 'Elimiation Type', 
	ELIM_REL TEXT IS 'Elimination Relationship', 
	ELIM_DFGRP TEXT IS 'Elimination Destination Account Group', 
	ELIM_CO TEXT IS 'Elimination Company', 
	FSPR TEXT IS 'F TEXT IScal Period', 
	CAPR TEXT IS 'Calendar Period', 
	SDAT TEXT IS 'Start Date', 
	EDAT TEXT IS 'End Date', 
	FGRP TEXT IS 'Account Group', 
	STMT TEXT IS 'Statement', 
	LVL0 TEXT IS 'Level 0', 
	LVL1 TEXT IS 'Level 1', 
	LVL2 TEXT IS 'Level 2', 
	LVL3 TEXT IS 'Level 3', 
	MODULE TEXT IS 'Module', 
	CUSMOD TEXT IS 'Custom Module', 
	CUSKEY1 TEXT IS 'Custom Key 1', 
	CUSKEY1D TEXT IS 'Custom Key 1 Type', 
	CUSKEY2 TEXT IS 'Custom Key 2', 
	CUSKEY2D TEXT IS 'Custom Key 2 Type', 
	CUSKEY3 TEXT IS 'Custom Key 3', 
	CUSKEY3D TEXT IS 'Custom Key 3 Type', 
	CUSKEY4 TEXT IS 'Custom Key 4', 
	CUSKEY4D TEXT IS 'Custom Key 4 Type', 
	EBITDA TEXT IS 'EBITDA Categorization', 
	DEPARTMENT TEXT IS 'Department & Description', 
	DEP_GRP TEXT IS 'Department Group', 
	CURR TEXT IS 'Local Curreny', 
	COMPONENT TEXT IS 'Roll-Forward Component', 
	AMOUNT TEXT IS 'Amount') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_GLLCS TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_GLLCS TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_INVACCT (
	YAPLNT, 
	INVACCT, 
	AZSTAT) 
	AS 
	SELECT DISTINCT 
		YAPLNT, YACOMP||Y1INVA INVACCT, AZSTAT 
	FROM 
		LGDAT.PLNT 
		INNER JOIN LGDAT.GLIE ON 
			Y1PLNT = YAPLNT 
		INNER JOIN LGDAT.MAST ON 
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = YACOMP||Y1INVA ; 
  
LABEL ON TABLE RLARP.VW_INVACCT 
	IS 'Acct - Unique Inventory Accounts' ; 
  
LABEL ON COLUMN RLARP.VW_INVACCT 
(YAPLNT IS 'Plant               Code', 
	AZSTAT IS 'Account             Status              Code') ; 
  
LABEL ON COLUMN RLARP.VW_INVACCT 
(YAPLNT TEXT IS 'Plant Code', 
	AZSTAT TEXT IS 'Account Status Code') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_INVACCT TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_INVACCT TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_INVD1 (
	FSPR, 
	CAPR, 
	FSYR, 
	QRTR, 
	INV_COMP, 
	INV_PLNT, 
	INV_CURR, 
	COMP_CURR, 
	BILL_REMIT_TO FOR COLUMN BILL_00001, 
	BILL_CUST_CLASS FOR COLUMN BILL_00002, 
	BILL_CUST, 
	BILL_PROV, 
	BILL_CTRY, 
	SHIP_REMIT_TO FOR COLUMN SHIP_00001, 
	SHIP_CUST_CLASS FOR COLUMN SHIP_00002, 
	SHIP_CUST, 
	SHIP_PROV, 
	SHIP_CTRY, 
	INVOICE#, 
	CUSPO, 
	GLDC, 
	GLEC, 
	REAS, 
	PROMOTION, 
	INV_TYPE, 
	TRADE_NAME, 
	"PART", 
	MOLD, 
	MAJG, 
	MING, 
	MAJS, 
	MINS, 
	CMSGL, 
	FGRP, 
	QTY_SHIP, 
	COST, 
	INVOICE, 
	COST_USD, 
	INVOICE_USD FOR COLUMN INVOI00001, 
	TERMS) 
	AS 
	SELECT  
		DIGITS(DHARYR)||DIGITS(DHARPR) FSPR,  
		CAPR,  
		FSYR,  
		QRTR,  
		DHCOMP INV_COMP,  
		DHPLNT INV_PLNT,  
		DHCURR INV_CURR,  
		CURR COMP_CURR,  
		BC.BVCOMP BILL_REMIT_TO,  
		BC.BVCLAS BILL_CUST_CLASS,  
		BC.BVCUST||' - '||RTRIM(BC.BVNAME) BILL_CUST,  
		BC.BVPRCD BILL_PROV,  
		BC.BVCTRY BILL_CTRY,  
		SC.BVCOMP SHIP_REMIT_TO,  
		SC.BVCLAS SHIP_CUST_CLASS,  
		SC.BVCUST||' - '||RTRIM(SC.BVNAME) SHIP_CUST,  
		SC.BVPRCD SHIP_PROV,  
		SC.BVCTRY SHIP_CTRY,  
		DHINV# INVOICE,  
		DHCPO CUSPO,  
		DIGLCD||' - '||RTRIM(G.A30) GLCODE,  
		GLEC,  
		DIREAS||' - '||RTRIM(R.A30) REAS,  
		RTRIM(DCPROM) PROMOTION,  
		DHINCR INV_TYPE,  
		SUBSTR(CUSTPART,1,1) TRADE_NAME,  
		DIPART PART,  
		SUBSTR(DIPART,1,8) MOLD,  
		MAJG,  
		MING,  
		MAJS,  
		MINS,  
		DIGITS(ZWSAL#) CMSGL,  
		AZGROP||' - '||RTRIM(BQ1TITL) FGRP,  
		SUM(DIQTSH*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END) QTY_SHIP,  
		ROUND(SUM(DICTEX*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END),2) COST,  
		ROUND(SUM(DIEXT*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END),2) INVOICE,  
		ROUND(SUM(DICTEX*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END*CX.RATE),2) COST_USD,  
		ROUND(SUM(DIEXT*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END*IX.RATE),2) INVOICE_USD,  
		T.DESCR  
	FROM  
		LGDAT.OIH  
		INNER JOIN LGDAT.OID ON  
			DIINV# = DHINV#  
		LEFT OUTER JOIN LGDAT.OCRH ON  
			DCORD# = DHORD#  
		LEFT OUTER JOIN LGDAT.CODE G ON  
			G.A2 = 'EE' AND  
			LTRIM(RTRIM(G.A9)) = DIGLCD  
		LEFT OUTER JOIN LGDAT.CODE R ON  
			R.A2 = 'RS' AND  
			LTRIM(RTRIM(R.A9)) = DIREAS  
		LEFT OUTER JOIN LGDAT.CUST BC ON  
			BC.BVCUST = DHBCS#  
		LEFT OUTER JOIN LGDAT.CUST SC ON  
			SC.BVCUST = DHSCS#  
		LEFT OUTER JOIN RLARP.VW_FFITEMM ON  
			ITEM = DIPART  
		LEFT OUTER JOIN LGDAT.PLNT ON  
			YAPLNT = DHPLNT  
		LEFT OUTER JOIN LGDAT.GLIE ON  
			Y1PLNT = DHPLNT AND  
			Y1GLEC = GLEC  
		LEFT OUTER JOIN LGDAT.ARMASC ON  
			ZWCOMP = BC.BVCOMP AND  
			ZWKEY1 = BC.BVARCD AND  
			ZWKEY2 = DIGLCD  
		LEFT OUTER JOIN RLARP.FFCRET IX ON  
			IX.PERD = DIGITS(DHARYR)||DIGITS(DHARPR) AND  
			IX.FCUR = DHCURR AND  
			IX.TCUR = 'US' AND  
			IX.RTYP = 'MA'  
		LEFT OUTER JOIN RLARP.VW_FFCOPR ON  
			COMP = DHCOMP  
		LEFT OUTER JOIN RLARP.FFCRET CX ON  
			CX.PERD = DIGITS(DHARYR)||DIGITS(DHARPR) AND  
			CX.FCUR = CURR AND  
			CX.TCUR = 'US' AND  
			CX.RTYP = 'MA'  
		LEFT OUTER JOIN LGDAT.MAST ON  
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = DIGITS(ZWSAL#) 	  
		LEFT OUTER JOIN LGDAT.FGRP ON  
			BQ1GRP = AZGROP  
		LEFT OUTER JOIN RLARP.FFPERD ON  
			FSPR = DIGITS(DHARYR)||DIGITS(DHARPR)  
		LEFT OUTER JOIN RLARP.VW_FFTMCD T ON  
			TERM = DHTRCD  
	GROUP BY  
		DIGITS(DHARYR)||DIGITS(DHARPR), 	  
		CAPR,  
		FSYR,  
		QRTR,  
		DHCOMP,  
		DHPLNT,  
		DHCURR,  
		CURR,  
		BC.BVCOMP,  
		BC.BVCLAS,  
		BC.BVCUST||' - '||RTRIM(BC.BVNAME),  
		BC.BVPRCD, 	 	 	 		 
		BC.BVCTRY, 	 	 	 		 
		SC.BVCOMP, 	 	 	 		 
		SC.BVCLAS, 	 	 	 		 
		SC.BVCUST||' - '||RTRIM(SC.BVNAME), 	 	 	 	 
		SC.BVPRCD, 	 	 	 		 
		SC.BVCTRY,  
		DHINV#,  
		DHCPO, 	 	 	 		 
		DIGLCD||' - '||RTRIM(G.A30), 	 	 	 	 
		GLEC, 	 	 	 		 
		DIREAS||' - '||RTRIM(R.A30), 	 	 	 	 
		RTRIM(DCPROM), 	 	 	 	 
		DHINCR, 	 	 	 		 
		SUBSTR(CUSTPART,1,1), 	 	 	 	 
		DIPART,  
		SUBSTR(DIPART,1,8),  
		MAJG, 	 	 	 	 				 
		MING, 	 	 	 		 
		MAJS, 	 	 	 		 
		MINS, 	 	 	 		 
		DIGITS(ZWSAL#), 	 	 	 		 
		AZGROP||' - '||RTRIM(BQ1TITL), 	 			 
		T.DESCR ; 

		LABEL ON TABLE RLARP.VW_INVD1 
		IS 'Sales - Invoice Detail 1' ; 

LABEL ON COLUMN RLARP.VW_INVD1 
(INV_COMP IS 'Company             Number', 
	INV_PLNT IS 'Plant               Code', 
	INV_CURR IS 'Currency            Code', 
	BILL_REMIT_TO IS 'Company             Number', 
	BILL_CUST_CLASS IS 'Customer            Class', 
	BILL_PROV IS 'Province            Code', 
	BILL_CTRY IS 'Country', 
	SHIP_REMIT_TO IS 'Company             Number', 
	SHIP_CUST_CLASS IS 'Customer            Class', 
	SHIP_PROV IS 'Province            Code', 
	SHIP_CTRY IS 'Country', 
	INVOICE# IS 'Invoice             Number', 
	CUSPO IS 'Customer            P/O Number', 
	INV_TYPE IS 'Invoice             Credit', 
	"PART" IS 'Part                Number') ; 
  
LABEL ON COLUMN RLARP.VW_INVD1 
(INV_COMP TEXT IS 'Company Number', 
	INV_PLNT TEXT IS 'Plant Code', 
	INV_CURR TEXT IS 'Currency Code', 
	BILL_REMIT_TO TEXT IS 'Company Number', 
	BILL_CUST_CLASS TEXT IS 'Customer Class', 
	BILL_PROV TEXT IS 'Province Code', 
	BILL_CTRY TEXT IS 'Country', 
	SHIP_REMIT_TO TEXT IS 'Company Number', 
	SHIP_CUST_CLASS TEXT IS 'Customer Class', 
	SHIP_PROV TEXT IS 'Province Code', 
	SHIP_CTRY TEXT IS 'Country', 
	INVOICE# TEXT IS 'Invoice Number', 
	CUSPO TEXT IS 'Customer P/O Number', 
	INV_TYPE TEXT IS 'Invoice Credit', 
	"PART" TEXT IS 'Part Number') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_INVD1 TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_INVD1 TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_INVD2 (
	FSPR, 
	IDATE, 
	IWEEK, 
	CAPR, 
	FSYR, 
	QRTR, 
	INV_COMP, 
	INV_PLNT, 
	INV_CURR, 
	COMP_CURR, 
	BILL_REMIT_TO FOR COLUMN BILL_00001, 
	BILL_CUST_CLASS FOR COLUMN BILL_00002, 
	BILL_CUST, 
	BILL_PROV, 
	BILL_CTRY, 
	SHIP_REMIT_TO FOR COLUMN SHIP_00001, 
	SHIP_CUST_CLASS FOR COLUMN SHIP_00002, 
	SHIP_CUST, 
	SHIP_PROV, 
	SHIP_CTRY, 
	INVOICE#, 
	CUSPO, 
	GLDC, 
	GLEC, 
	REAS, 
	PROMOTION, 
	INV_TYPE, 
	TRADE_NAME, 
	"PART", 
	MOLD, 
	MAJG, 
	MING, 
	MAJS, 
	MINS, 
	CMSGL, 
	FGRP, 
	QTY_SHIP, 
	COST, 
	INVOICE, 
	COST_USD, 
	INVOICE_USD FOR COLUMN INVOI00001, 
	TERMS) 
	AS 
	SELECT  
		DIGITS(DHARYR)||DIGITS(DHARPR) FSPR,  
		DHIDAT IDATE, 
		SUBSTR(CHAR(DHIDAT),3,2)||SUBSTR(DIGITS(WEEK(DHIDAT)),9,2) IWEEK, 
		CAPR,  
		FSYR,  
		QRTR,  
		DHCOMP INV_COMP,  
		DHPLNT INV_PLNT,  
		DHCURR INV_CURR,  
		CURR COMP_CURR,  
		BC.BVCOMP BILL_REMIT_TO,  
		BC.BVCLAS BILL_CUST_CLASS,  
		BC.BVCUST||' - '||RTRIM(BC.BVNAME) BILL_CUST,  
		BC.BVPRCD BILL_PROV,  
		BC.BVCTRY BILL_CTRY,  
		SC.BVCOMP SHIP_REMIT_TO,  
		SC.BVCLAS SHIP_CUST_CLASS,  
		SC.BVCUST||' - '||RTRIM(SC.BVNAME) SHIP_CUST,  
		SC.BVPRCD SHIP_PROV,  
		SC.BVCTRY SHIP_CTRY,  
		DHINV# INVOICE,  
		DHCPO CUSPO,  
		DIGLCD||' - '||RTRIM(G.A30) GLCODE,  
		GLEC,  
		DIREAS||' - '||RTRIM(R.A30) REAS,  
		RTRIM(DCPROM) PROMOTION,  
		DHINCR INV_TYPE,  
		SUBSTR(CUSTPART,1,1) TRADE_NAME,  
		DIPART PART,  
		SUBSTR(DIPART,1,8) MOLD,  
		MAJG,  
		MING,  
		MAJS,  
		MINS,  
		DIGITS(ZWSAL#) CMSGL,  
		AZGROP||' - '||RTRIM(BQ1TITL) FGRP,  
		SUM(DIQTSH*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END) QTY_SHIP,  
		ROUND(SUM(DICTEX*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END),2) COST,  
		ROUND(SUM(DIEXT*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END),2) INVOICE,  
		ROUND(SUM(DICTEX*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END*CX.RATE),2) COST_USD,  
		ROUND(SUM(DIEXT*CASE DHINCR WHEN 'C' THEN -1 ELSE 1 END*IX.RATE),2) INVOICE_USD,  
		T.DESCR  
	FROM  
		LGDAT.OIH  
		INNER JOIN LGDAT.OID ON  
			DIINV# = DHINV#  
		LEFT OUTER JOIN LGDAT.OCRH ON  
			DCORD# = DHORD#  
		LEFT OUTER JOIN LGDAT.CODE G ON  
			G.A2 = 'EE' AND  
			LTRIM(RTRIM(G.A9)) = DIGLCD  
		LEFT OUTER JOIN LGDAT.CODE R ON  
			R.A2 = 'RS' AND  
			LTRIM(RTRIM(R.A9)) = DIREAS  
		LEFT OUTER JOIN LGDAT.CUST BC ON  
			BC.BVCUST = DHBCS#  
		LEFT OUTER JOIN LGDAT.CUST SC ON  
			SC.BVCUST = DHSCS#  
		LEFT OUTER JOIN RLARP.VW_FFITEMM ON  
			ITEM = DIPART  
		LEFT OUTER JOIN LGDAT.PLNT ON  
			YAPLNT = DHPLNT  
		LEFT OUTER JOIN LGDAT.GLIE ON  
			Y1PLNT = DHPLNT AND  
			Y1GLEC = GLEC  
		LEFT OUTER JOIN LGDAT.ARMASC ON  
			ZWCOMP = BC.BVCOMP AND  
			ZWKEY1 = BC.BVARCD AND  
			ZWKEY2 = DIGLCD  
		LEFT OUTER JOIN RLARP.FFCRET IX ON  
			IX.PERD = DIGITS(DHARYR)||DIGITS(DHARPR) AND  
			IX.FCUR = DHCURR AND  
			IX.TCUR = 'US' AND  
			IX.RTYP = 'MA'  
		LEFT OUTER JOIN RLARP.VW_FFCOPR ON  
			COMP = DHCOMP  
		LEFT OUTER JOIN RLARP.FFCRET CX ON  
			CX.PERD = DIGITS(DHARYR)||DIGITS(DHARPR) AND  
			CX.FCUR = CURR AND  
			CX.TCUR = 'US' AND  
			CX.RTYP = 'MA'  
		LEFT OUTER JOIN LGDAT.MAST ON  
			AZCOMP||DIGITS(AZGL#1)||DIGITS(AZGL#2) = DIGITS(ZWSAL#) 	  
		LEFT OUTER JOIN LGDAT.FGRP ON  
			BQ1GRP = AZGROP  
		LEFT OUTER JOIN RLARP.FFPERD ON  
			FSPR = DIGITS(DHARYR)||DIGITS(DHARPR)  
		LEFT OUTER JOIN RLARP.VW_FFTMCD T ON  
			TERM = DHTRCD  
	WHERE 
		DHARYR = 16 AND DHARPR = 8  
	GROUP BY  
		DIGITS(DHARYR)||DIGITS(DHARPR), 	 
		DHIDAT,  
		SUBSTR(CHAR(DHIDAT),3,2)||SUBSTR(DIGITS(WEEK(DHIDAT)),9,2), 
		CAPR,  
		FSYR,  
		QRTR,  
		DHCOMP,  
		DHPLNT,  
		DHCURR,  
		CURR,  
		BC.BVCOMP,  
		BC.BVCLAS,  
		BC.BVCUST||' - '||RTRIM(BC.BVNAME),  
		BC.BVPRCD, 	 	 	 		 
		BC.BVCTRY, 	 	 	 		 
		SC.BVCOMP, 	 	 	 		 
		SC.BVCLAS, 	 	 	 		 
		SC.BVCUST||' - '||RTRIM(SC.BVNAME), 	 	 	 	 
		SC.BVPRCD, 	 	 	 		 
		SC.BVCTRY,  
		DHINV#,  
		DHCPO, 	 	 	 		 
		DIGLCD||' - '||RTRIM(G.A30), 	 	 	 	 
		GLEC, 	 	 	 		 
		DIREAS||' - '||RTRIM(R.A30), 	 	 	 	 
		RTRIM(DCPROM), 	 	 	 	 
		DHINCR, 	 	 	 		 
		SUBSTR(CUSTPART,1,1), 	 	 	 	 
		DIPART,  
		SUBSTR(DIPART,1,8),  
		MAJG, 	 	 	 	 				 
		MING, 	 	 	 		 
		MAJS, 	 	 	 		 
		MINS, 	 	 	 		 
		DIGITS(ZWSAL#), 	 	 	 		 
		AZGROP||' - '||RTRIM(BQ1TITL), 	 			 
		T.DESCR ; 

		LABEL ON COLUMN RLARP.VW_INVD2 
		(IDATE IS 'Invoice             Date', 
	INV_COMP IS 'Company             Number', 
	INV_PLNT IS 'Plant               Code', 
	INV_CURR IS 'Currency            Code', 
	BILL_REMIT_TO IS 'Company             Number', 
	BILL_CUST_CLASS IS 'Customer            Class', 
	BILL_PROV IS 'Province            Code', 
	BILL_CTRY IS 'Country', 
	SHIP_REMIT_TO IS 'Company             Number', 
	SHIP_CUST_CLASS IS 'Customer            Class', 
	SHIP_PROV IS 'Province            Code', 
	SHIP_CTRY IS 'Country', 
	INVOICE# IS 'Invoice             Number', 
	CUSPO IS 'Customer            P/O Number', 
	INV_TYPE IS 'Invoice             Credit', 
	"PART" IS 'Part                Number') ; 
  
LABEL ON COLUMN RLARP.VW_INVD2 
(IDATE TEXT IS 'Invoice Date', 
	INV_COMP TEXT IS 'Company Number', 
	INV_PLNT TEXT IS 'Plant Code', 
	INV_CURR TEXT IS 'Currency Code', 
	BILL_REMIT_TO TEXT IS 'Company Number', 
	BILL_CUST_CLASS TEXT IS 'Customer Class', 
	BILL_PROV TEXT IS 'Province Code', 
	BILL_CTRY TEXT IS 'Country', 
	SHIP_REMIT_TO TEXT IS 'Company Number', 
	SHIP_CUST_CLASS TEXT IS 'Customer Class', 
	SHIP_PROV TEXT IS 'Province Code', 
	SHIP_CTRY TEXT IS 'Country', 
	INVOICE# TEXT IS 'Invoice Number', 
	CUSPO TEXT IS 'Customer P/O Number', 
	INV_TYPE TEXT IS 'Invoice Credit', 
	"PART" TEXT IS 'Part Number') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_INVD2 TO PTROWBRIDG WITH GRANT OPTION ; 
  
CREATE VIEW RLARP.VW_PRFSPR (
	COMP, 
	CURRP, 
	PRIORP) 
	AS 
	SELECT  
			B.COMP, B.FSPR CURRP, O.FSPR PRIORP  
		FROM  
			RLARP.VW_FFGLPD B  
			LEFT OUTER JOIN RLARP.VW_FFGLPD O ON  
				DAYS(O.EDAT) = DAYS(B.SDAT) -1 AND  
				O.COMP = B.COMP ; 
  
LABEL ON TABLE RLARP.VW_PRFSPR 
	IS 'Acct - Prior Periods by Company' ; 
  
LABEL ON COLUMN RLARP.VW_PRFSPR 
(COMP IS 'Company') ; 
  
LABEL ON COLUMN RLARP.VW_PRFSPR 
(COMP TEXT IS 'Company') ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_PRFSPR TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, REFERENCES, SELECT   
ON RLARP.VW_PRFSPR TO PUBLIC ; 
  
CREATE VIEW RLARP.VW_RTNREAS (
	CODE, 
	DESCR, 
	INV_GL, 
	INV_QTY, 
	SALES_QTY, 
	COS, 
	CST) 
	AS 
	SELECT  
		LTRIM(RTRIM(A9)) CODE, 
		LTRIM(RTRIM(A30)) DESCR, 
		SUBSTRING(A215,5,1) INV_GL, 
		SUBSTRING(A215,1,1) INV_QTY,	 
		SUBSTRING(A215,2,1) SALES_QTY,	 
		SUBSTRING(A215,3,1) COS,	 
		SUBSTRING(A215,4,1) CST 
	FROM  
		LGDAT.CODE  
	WHERE  
		A2 = 'RS' ; 
  
LABEL ON TABLE RLARP.VW_RTNREAS 
	IS 'Sales - Return Reason Codes' ; 
  
GRANT ALTER, DELETE, REFERENCES, SELECT   
ON RLARP.VW_RTNREAS TO PTROWBRIDG WITH GRANT OPTION ; 
  
GRANT ALTER, DELETE, REFERENCES, SELECT   
ON RLARP.VW_RTNREAS TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.COST_UPDATE (
	F_DATE VARCHAR(10)) 
	RETURNS TABLE (
	"PART" VARCHAR(20), 
	PLNT VARCHAR(3))   
	LANGUAGE SQL 
	SPECIFIC RLARP.COST_UPDATE 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT CGPART PART, CGPLNT PLNT FROM LGDAT.ICSTM WHERE CGSDAT >= CAST (F_DATE AS DATE) 
UNION 
SELECT CHPART PART, CHPLNT PLNT FROM LGDAT.ICSTP WHERE CHSDAT >= CAST (F_DATE AS DATE) 
UNION 
SELECT Y0PART PART, Y0PLNT PLNT FROM LGDAT.ICSTR WHERE Y0SDAT >= CAST (F_DATE AS DATE)  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.COST_UPDATE 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.COST_UPDATE 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.CRE () 
	RETURNS VARCHAR(12)   
	LANGUAGE SQL 
	SPECIFIC RLARP.CRE 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
DECLARE C INTEGER ; 
DECLARE RE VARCHAR (12) ; 
SET C = (SELECT A84MAXL + A84FLG1 FROM LGDAT.GLDFT) ; 
SET RE = (SELECT SUBSTR (A249, 202 + C, C) FROM LGDAT.NAME WHERE A7 = 'C000093') ; 
RETURN RE ; 
END  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.CRE 
	IS 'Retained Earnings Account' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.CRE 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.CRE 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_ABSFPV (
	VPERD VARCHAR(4)) 
	RETURNS TABLE (
	PERD CHAR(4), 
	RDAT CHAR(10), 
	PRIME CHAR(4), 
	ACTN VARCHAR(4), 
	ADEP VARCHAR(6), 
	"GROUP" VARCHAR(30), 
	ARSC VARCHAR(6), 
	SRSC VARCHAR(6), 
	EMH DOUBLE PRECISION, 
	FPV DOUBLE PRECISION, 
	ABS DOUBLE PRECISION)   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_ABS00001 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
  
SELECT 
	NWFSYY || DIGITS (NWFSPP) PERD, CHAR (NWRDAT) RDAT, 
	SUBSTR (ACCT, 7, 4), 
	ACTN, 
	ADEP, GROUP, 
	ARSC, SRSC, 
	SUM (CASE ACTN WHEN 'AFG' THEN RHRS WHEN 'AFS' THEN RHRS ELSE 0 END) EMH, 
	SUM (CASE SUBSTR (ACCT, 7, 4) WHEN '1220' THEN AMNT ELSE 0 END) FPV, 
	SUM (CASE SUBSTR (ACCT, 7, 2) WHEN '60' THEN AMNT ELSE 0 END) ABS 
FROM 
	RLARP.FFPDGLR1 
	INNER JOIN LGDAT.RPRH ON 
		NWBTID = BTID 
	LEFT OUTER JOIN RLARP.FFRGRP ON 
		DEPT = ADEP AND 
		RESC = ARSC 
WHERE 
	DIGITS (NWFSYY) || DIGITS (NWFSPP) = VPERD AND 
	SUBSTR (ACCT, 7, 4) IN ('1220', '6010', '6020', '6030', '6040', '6042') 
GROUP BY 
	NWFSYY || DIGITS (NWFSPP), 
	CHAR (NWRDAT), 
	SUBSTR (ACCT, 7, 4), 
	ACTN, 
	ADEP, GROUP, 
	ARSC, SRSC  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.F_ABS00001 
	IS 'Absorption & FPV dataset' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_ABS00001 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_ABS00001 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_CHILD_TB (
	PARENT VARCHAR(2)) 
	RETURNS TABLE (
	COMP VARCHAR(2))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_CHILD_TB 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
WITH RECURSIVE CH 
(PRNT, CHLD, LVL, IDX) 
  
AS 
(
	SELECT 
		0, CAST (MAX (DW6COMN) AS VARCHAR (100)), 0, CAST ('00' AS VARCHAR (100)) 
	FROM 
		LGDAT.GLCA 
	WHERE 
		DW6COMN = PARENT 
  
	UNION ALL 
	 
	SELECT	 
		CHLD, CAST (DW6SCOM AS VARCHAR (100)), LVL + 1, IDX || '.' || CAST (DW6SCOM AS VARCHAR (100)) 
	FROM	 
		LGDAT.GLCA 
		INNER JOIN CH ON 
			DW6COMN = CHLD 
	WHERE 
		LVL < 10 
) 
  
SELECT 
	CHLD COMP 
FROM 
	CH 
	LEFT OUTER JOIN RLARP.VW_FFCOPR ON 
		COMP = CHLD 
WHERE 
	LVL <> 0  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_CHILD_TB 
TO PTROWBRIDG ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_CONS_CURR_J (
	VFP VARCHAR(4), 
	VTP VARCHAR(4)) 
	RETURNS TABLE (
	FSPR VARCHAR(4), 
	JRNL VARCHAR(5), 
	CACCT VARCHAR(12), 
	CFGRP VARCHAR(7), 
	AMT DECIMAL(18, 2), 
	ADJ DECIMAL(18, 2))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_CONS_CURR_J 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
			B.FSPR, 
			CASE WHEN SUBSTR (FGRP, 1, 1) <= '3' THEN '395' ELSE '396' END || SUBSTRING (B.FSPR, 3, 2) JRNL, 
			CACCT, 
			CFGRP, 
			SUM (AMT) AMT, 
			SUM (CASE 
				WHEN SUBSTRING (B.ACCT, 1, 2) = '11' THEN	
					ROUND (- AMT, 2) * 
					CASE FLAG 
						WHEN 'OFFSET' THEN - 1 
						ELSE 1 
					END 
				ELSE ROUND (AMT * RATE - AMT, 2) * CASE FLAG WHEN 'OFFSET' THEN - 1 ELSE 1 END 
				END 
			) ADJ 
		FROM 
			(
				SELECT 
					B.ACCT, 
					B.CURR, 
					CJ.FLAG, 
					SUBSTRING (B.ACCT, 1, 2) COMP, 
					B.FSPR, 
					B.FGRP, 
					B.GLCC, 
					ELIM_TYPE,	 
					ELIM_REL, 
					ELIM_DFGRP, 
					ELIM_CO, 
					CACCT, 
					CASE CJ.FLAG WHEN 'ADJ' THEN RTRIM (SUBSTR (B.FGRP, 1, 7)) ELSE '33020' END CFGRP, 
					SUM (CASE WHEN SUBSTRING (B.FGRP, 1, 1) <= '3' THEN END_LOCAL ELSE NET_LOCAL END * CASE FLAG WHEN 'CLEAR' THEN - 1 ELSE 1 END) AMT 
				FROM 
					RLARP.V_TBJCS B 
					CROSS JOIN (SELECT 'ADJ' FLAG FROM RLARP.FF UNION ALL SELECT 'OFFSET' FLAG FROM RLARP.FF) CJ 
					LEFT OUTER JOIN RLARP.VCONS_ACCT X ON 
						X.COMP = '11' AND 
						X.FGRP = CASE CJ.FLAG WHEN 'ADJ' THEN RTRIM (SUBSTR (B.FGRP, 1, 7)) ELSE '33020' END AND 
						X.GLCD = CASE CJ.FLAG WHEN 'ADJ' THEN B.GLCC ELSE 'E00' END 
				WHERE 
					(B.CURR <> 'US' OR SUBSTRING (B.ACCT, 1, 2) = '11') AND 
					B.FSPR >= VFP AND B.FSPR <= VTP AND 
					CASE WHEN SUBSTRING (B.FGRP, 1, 1) <= '3' THEN END_LOCAL ELSE NET_LOCAL END <> 0 
				GROUP BY 
					B.ACCT, B.CURR, CJ.FLAG, SUBSTRING (B.ACCT, 1, 2), B.FSPR, 
					B.FGRP, B.GLCC, ELIM_TYPE, ELIM_REL, ELIM_DFGRP, ELIM_CO, CACCT, 
					CASE CJ.FLAG WHEN 'ADJ' THEN RTRIM (SUBSTR (B.FGRP, 1, 7)) ELSE '33020' END 
			) B 
		LEFT OUTER JOIN RLARP.FFCRET E ON 
				FCUR = CURR AND 
				TCUR = 'US' AND 
				RTYP = CASE WHEN SUBSTRING (FGRP, 1, 1) <= '3' THEN 'ME' ELSE 'MA' END AND 
				E.PERD = B.FSPR 
		GROUP BY 
			B.FSPR, 
			CASE WHEN SUBSTR (FGRP, 1, 1) <= '3' THEN '395' ELSE '396' END || SUBSTRING (B.FSPR, 3, 2), 
			CACCT, 
			CFGRP  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_CONS_CURR_J 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_CONS_CURR_J 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_CONS_ELIM (
	VPF VARCHAR(4), 
	VPT VARCHAR(4)) 
	RETURNS TABLE (
	SRCE VARCHAR(60), 
	FSPR CHAR(4), 
	CACCT VARCHAR(20), 
	ELIM_CO INTEGER, 
	GLCC VARCHAR(10), 
	FGRP VARCHAR(7), 
	JRNL VARCHAR(5), 
	AMT DECIMAL(18, 2))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_CON00001 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
  
SELECT 
	'ELIMINATING ENTRY' SRCE, 
	FSPR, CACCT, ELIM_CO, GLCD, C.FGRP, 
	CASE WHEN SUBSTRING (B.FGRP, 1, 1) <= '3' THEN '390' ELSE '391' END || SUBSTR (FSPR, 3, 2) JRNL, 
	SUM (CASE WHEN SUBSTRING (B.FGRP, 1, 1) <= '3' THEN END_LOCAL ELSE NET_LOCAL END * CASE FLAG WHEN 'CLEAR' THEN - 1 ELSE 1 END) AMT 
FROM 
	RLARP.V_TBJCS B 
	CROSS JOIN (SELECT 'CLEAR' FLAG FROM RLARP.FF UNION ALL SELECT 'OFFSET' FLAG FROM RLARP.FF) CJ 
	LEFT OUTER JOIN RLARP.VCONS_ACCT C ON 
		C.COMP = B.ELIM_CO AND 
		C.FGRP = CASE FLAG WHEN 'CLEAR' THEN RTRIM (SUBSTR (B.FGRP, 1, 7)) ELSE B.ELIM_DFGRP END AND 
		C.GLCD = B.GLCC 
WHERE 
	B.FSPR >= VPF AND B.FSPR <= VPT AND 
	B.ELIM_DFGRP <> '' AND 
	CASE WHEN SUBSTRING (B.FGRP, 1, 1) <= '3' THEN END_LOCAL ELSE NET_LOCAL END <> 0 
GROUP BY 
	FSPR, 
	CACCT, ELIM_CO, GLCD, C.FGRP, 
	CASE WHEN SUBSTRING (B.FGRP, 1, 1) <= '3' THEN '390' ELSE '391' END || SUBSTR (FSPR, 3, 2) 
HAVING 
	SUM (CASE WHEN SUBSTRING (B.FGRP, 1, 1) <= '3' THEN END_LOCAL ELSE NET_LOCAL END * CASE FLAG WHEN 'CLEAR' THEN - 1 ELSE 1 END) <> 0 
  
  
UNION ALL 
  
SELECT 
	'NO CONS TB ACCT' SRCE, 
	FSPR, B.ACCT, B.ELIM_CO, B.GLCC, CASE FLAG WHEN 'CLEAR' THEN RTRIM (SUBSTR (B.FGRP, 1, 7)) ELSE B.ELIM_DFGRP END, 
	'XXXXX' JRNL, 
	SUM (CASE WHEN SUBSTRING (B.FGRP, 1, 1) <= '3' THEN END_LOCAL ELSE NET_LOCAL END) AMT 
FROM 
	RLARP.V_TBJCS B 
	CROSS JOIN (SELECT 'CLEAR' FLAG FROM RLARP.FF UNION ALL SELECT 'OFFSET' FLAG FROM RLARP.FF) CJ 
	LEFT OUTER JOIN RLARP.VCONS_ACCT C ON 
		C.COMP = B.ELIM_CO AND 
		C.FGRP = CASE FLAG WHEN 'CLEAR' THEN RTRIM (SUBSTR (B.FGRP, 1, 7)) ELSE B.ELIM_DFGRP END AND 
		C.GLCD = B.GLCC 
WHERE 
	B.FSPR >= VPF AND B.FSPR <= VPT AND 
	B.ELIM_DFGRP <> '' AND 
	CASE WHEN SUBSTRING (B.FGRP, 1, 1) <= '3' THEN END_LOCAL ELSE NET_LOCAL END <> 0 AND 
	C.CACCT IS NULL 
GROUP BY 
	FSPR, 
	B.ACCT, B.ELIM_CO, B.GLCC, CASE FLAG WHEN 'CLEAR' THEN RTRIM (SUBSTR (B.FGRP, 1, 7)) ELSE B.ELIM_DFGRP END  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.F_CON00001 
	IS 'Eliminating entries for period range' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_CON00001 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_CON00001 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_CONS_SEQ () 
	RETURNS TABLE (
	TB VARCHAR(2), 
	CONS VARCHAR(5))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_CONS_SEQ 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
WITH RECURSIVE CH 
(PRNT, CHLD, LVL, IDX) 
AS 
(
	SELECT 
		0, CAST (MAX (DW6COMN) AS VARCHAR (100)), 0, CAST ('00' AS VARCHAR (100)) 
	FROM 
		LGDAT.GLCA 
  
	UNION ALL 
	 
	SELECT	 
		CHLD, CAST (DW6SCOM AS VARCHAR (100)), LVL + 1, IDX || '.' || CAST (DW6SCOM AS VARCHAR (100)) 
	FROM	 
		LGDAT.GLCA 
		INNER JOIN CH ON 
			DW6COMN = CHLD 
	WHERE 
		LVL < 10 
) 
SELECT 
	CHLD, CONS 
FROM 
	CH 
	LEFT OUTER JOIN RLARP.VW_FFCOPR ON 
		COMP = CHLD 
WHERE 
	 -----this is brittle logic---- 
	CONS NOT LIKE 'TB%' 
ORDER BY 
	LVL DESC  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_CONS_SEQ 
TO PTROWBRIDG ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_CONSH (
	VLVL INTEGER) 
	RETURNS TABLE (
	TB VARCHAR(100), 
	LVL INTEGER, 
	IDX VARCHAR(100), 
	L1 VARCHAR(35), 
	L2 VARCHAR(35), 
	L3 VARCHAR(35), 
	L4 VARCHAR(35), 
	L5 VARCHAR(35), 
	DESCR VARCHAR(30), 
	CURR VARCHAR(2), 
	CONS VARCHAR(5))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_CON00002 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN	 
WITH RECURSIVE CH 
(PRNT, CHLD, LVL, IDX, L1, L2, L3, L4, L5) 
  
AS 
(
	SELECT DISTINCT 
		0, 
		CAST (DW6COMN AS VARCHAR (100)), 
		0, 
		CAST (DW6COMN AS VARCHAR (100)), 
		RTRIM (SUBSTR (N.A249, 1, 30)), 
		CASE SUBSTR (C.CONS, 1, 2) WHEN 'TB' THEN '' ELSE RTRIM (C.DESCR) END, 
		'', 
		'', 
		'' 
	FROM 
		LGDAT.GLCA 
		INNER JOIN RLARP.VW_FFCOPR C ON 
			C.COMP = DW6COMN 
		INNER JOIN LGDAT.NAME N ON 
			A7 = 'C0000' || DW6COMN 
	WHERE 
		DW6COMN = VLVL 
  
	UNION ALL 
	 
	SELECT	 
		CHLD, 
		CAST (DW6SCOM AS VARCHAR (100)), 
		LVL + 1, 
		IDX || '.' || CAST (DW6SCOM AS VARCHAR (100)), 
		 --------------LEVEL 1---------------------- 
		L1, 
		 --------------LEVEL 2---------------------- 
		CASE LVL + 1 
			WHEN 1 THEN RTRIM (SUBSTR (N.A249, 1, 30)) 
			ELSE L2 
		END L2, 
		 --------------LEVEL 3---------------------- 
		CASE LVL + 1 
			WHEN 2 THEN RTRIM (SUBSTR (N.A249, 1, 30)) 
			WHEN 1 THEN CASE SUBSTR (C.CONS, 1, 2) WHEN 'TB' THEN L3 ELSE RTRIM (C.DESCR) END 
			ELSE L3 
		END L3, 
		 --------------LEVEL 4---------------------- 
		CASE LVL + 1 
			WHEN 3 THEN RTRIM (SUBSTR (N.A249, 1, 30)) 
			WHEN 2 THEN CASE SUBSTR (C.CONS, 1, 2) WHEN 'TB' THEN L4 ELSE RTRIM (C.DESCR) END 
			ELSE L4 
		END L4, 
		 --------------LEVEL 5---------------------- 
		CASE LVL + 1 
			WHEN 4 THEN RTRIM (SUBSTR (N.A249, 1, 30)) 
			WHEN 3 THEN CASE SUBSTR (C.CONS, 1, 2) WHEN 'TB' THEN L5 ELSE RTRIM (C.DESCR) END 
			ELSE L5 
		END L5 
	FROM	 
		LGDAT.GLCA 
		INNER JOIN CH ON 
			DW6COMN = CHLD 
		INNER JOIN RLARP.VW_FFCOPR C ON 
			C.COMP = DW6SCOM 
		INNER JOIN LGDAT.NAME N ON 
			A7 = 'C0000' || DW6SCOM 
		 
	WHERE 
		LVL < 10 
) 
  
SELECT 
	CHLD TB, LVL, IDX, L1, L2, L3, L4, L5, DESCR, CURR, CONS 
FROM 
	CH 
	LEFT OUTER JOIN RLARP.VW_FFCOPR ON 
		COMP = CHLD 
ORDER BY 
	IDX  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_CON00002 
TO PTROWBRIDG ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_CONSH (
	VLVL VARCHAR(100)) 
	RETURNS TABLE (
	TB VARCHAR(100), 
	LVL INTEGER, 
	IDX VARCHAR(100), 
	L1 VARCHAR(35), 
	L2 VARCHAR(35), 
	L3 VARCHAR(35), 
	L4 VARCHAR(35), 
	L5 VARCHAR(35), 
	DESCR VARCHAR(30), 
	CURR VARCHAR(2), 
	CONS VARCHAR(5))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_CONSH 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN	 
WITH RECURSIVE CH 
(PRNT, CHLD, LVL, IDX, L1, L2, L3, L4, L5) 
  
AS 
(
	SELECT DISTINCT 
		0, 
		CAST (DW6COMN AS VARCHAR (100)), 
		0, 
		CAST (DW6COMN AS VARCHAR (100)), 
		RTRIM (SUBSTR (N.A249, 1, 30)), 
		CASE SUBSTR (C.CONS, 1, 2) WHEN 'TB' THEN '' ELSE RTRIM (C.DESCR) END, 
		'', 
		'', 
		'' 
	FROM 
		LGDAT.GLCA 
		INNER JOIN RLARP.VW_FFCOPR C ON 
			C.COMP = DW6COMN 
		INNER JOIN LGDAT.NAME N ON 
			A7 = 'C0000' || DW6COMN 
	WHERE 
		DW6COMN = VLVL 
  
	UNION ALL 
	 
	SELECT	 
		CHLD, 
		CAST (DW6SCOM AS VARCHAR (100)), 
		LVL + 1, 
		IDX || '.' || CAST (DW6SCOM AS VARCHAR (100)), 
		 --------------LEVEL 1---------------------- 
		L1, 
		 --------------LEVEL 2---------------------- 
		CASE LVL + 1 
			WHEN 1 THEN RTRIM (SUBSTR (N.A249, 1, 30)) 
			ELSE L2 
		END L2, 
		 --------------LEVEL 3---------------------- 
		CASE LVL + 1 
			WHEN 2 THEN RTRIM (SUBSTR (N.A249, 1, 30)) 
			WHEN 1 THEN CASE SUBSTR (C.CONS, 1, 2) WHEN 'TB' THEN L3 ELSE RTRIM (C.DESCR) END 
			ELSE L3 
		END L3, 
		 --------------LEVEL 4---------------------- 
		CASE LVL + 1 
			WHEN 3 THEN RTRIM (SUBSTR (N.A249, 1, 30)) 
			WHEN 2 THEN CASE SUBSTR (C.CONS, 1, 2) WHEN 'TB' THEN L4 ELSE RTRIM (C.DESCR) END 
			ELSE L4 
		END L4, 
		 --------------LEVEL 5---------------------- 
		CASE LVL + 1 
			WHEN 4 THEN RTRIM (SUBSTR (N.A249, 1, 30)) 
			WHEN 3 THEN CASE SUBSTR (C.CONS, 1, 2) WHEN 'TB' THEN L5 ELSE RTRIM (C.DESCR) END 
			ELSE L5 
		END L5 
	FROM	 
		LGDAT.GLCA 
		INNER JOIN CH ON 
			DW6COMN = CHLD 
		INNER JOIN RLARP.VW_FFCOPR C ON 
			C.COMP = DW6SCOM 
		INNER JOIN LGDAT.NAME N ON 
			A7 = 'C0000' || DW6SCOM 
		 
	WHERE 
		LVL < 10 
) 
  
SELECT 
	CHLD TB, LVL, IDX, L1, L2, L3, L4, L5, DESCR, CURR, CONS 
FROM 
	CH 
	LEFT OUTER JOIN RLARP.VW_FFCOPR ON 
		COMP = CHLD 
ORDER BY 
	IDX  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_CONSH 
TO PTROWBRIDG ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_GLMT (
	VPF VARCHAR(4), 
	VPT VARCHAR(4)) 
	RETURNS TABLE (
	AJ4CCYY VARCHAR(4), 
	ACCT VARCHAR(12), 
	AZTITL VARCHAR(30), 
	AZSTAT VARCHAR(1), 
	AZATYP VARCHAR(1), 
	AZGROP VARCHAR(7), 
	AZFUT3 VARCHAR(10), 
	AZFUT2 VARCHAR(2), 
	PERD VARCHAR(4), 
	OB DECIMAL(18, 2), 
	NT DECIMAL(18, 2), 
	EB DECIMAL(18, 2), 
	BG DECIMAL(18, 2), 
	FC DECIMAL(18, 2))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_GLM00001 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	AJ4CCYY, P.ACCT, AZTITL, AZSTAT, AZATYP, AZGROP, AZFUT3, AZFUT2, P.PERD, P.OB, P.NT, P.EB, P.BG, P.FC 
FROM 
		LGDAT.GLMT B, 
		LGDAT.MAST M, 
		TABLE (VALUES 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '01', AJ4OB01, AJ4TT01, AJ4OB01 + AJ4TT01, AJ4CB01, AJ4FR01), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '02', AJ4OB02, AJ4TT02, AJ4OB02 + AJ4TT02, AJ4CB02, AJ4FR02), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '03', AJ4OB03, AJ4TT03, AJ4OB03 + AJ4TT03, AJ4CB03, AJ4FR03), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '04', AJ4OB04, AJ4TT04, AJ4OB04 + AJ4TT04, AJ4CB04, AJ4FR04), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '05', AJ4OB05, AJ4TT05, AJ4OB05 + AJ4TT05, AJ4CB05, AJ4FR05), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '06', AJ4OB06, AJ4TT06, AJ4OB06 + AJ4TT06, AJ4CB06, AJ4FR06), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '07', AJ4OB07, AJ4TT07, AJ4OB07 + AJ4TT07, AJ4CB07, AJ4FR07), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '08', AJ4OB08, AJ4TT08, AJ4OB08 + AJ4TT08, AJ4CB08, AJ4FR08), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '09', AJ4OB09, AJ4TT09, AJ4OB09 + AJ4TT09, AJ4CB09, AJ4FR09), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '10', AJ4OB10, AJ4TT10, AJ4OB10 + AJ4TT10, AJ4CB10, AJ4FR0A), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '11', AJ4OB11, AJ4TT11, AJ4OB11 + AJ4TT11, AJ4CB11, AJ4FR0B), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '12', AJ4OB12, AJ4TT12, AJ4OB12 + AJ4TT12, AJ4CB12, AJ4FR0C), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '13', AJ4OB13, AJ4TT13, AJ4OB13 + AJ4TT13, AJ4CB13, AJ4FR0D), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '14', AJ4OB14, AJ4TT14, AJ4OB14 + AJ4TT14, AJ4CB14, AJ4FR0E), 
			(AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2), SUBSTR (DIGITS (AJ4CCYY), 3, 2) || '15', AJ4OB15, AJ4TT15, AJ4OB15 + AJ4TT15, AJ4CB15, AJ4FR0F) 
		) AS P (ACCT, PERD, OB, NT, EB, BG, FC) 
	WHERE 
		AJ4CCYY >= 2015 AND 
		AZCOMP = AJ4COMP AND 
		AZGL#1 = AJ4GL#1 AND 
		AZGL#2 = AJ4GL#2 AND 
		(P.OB <> 0 OR P.NT <> 0 OR P.EB <> 0 OR P.BG <> 0 OR P.FC <> 0) AND 
		P.PERD >= VPF AND 
		P.PERD <= VPT  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_GLM00001 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_GLM00001 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_GLMT_RANGE (
	VPF VARCHAR(4), 
	VPT VARCHAR(4)) 
	RETURNS TABLE (
	ACCT VARCHAR(12), 
	PERD VARCHAR(4), 
	OPNB DECIMAL(18, 2), 
	NETT DECIMAL(18, 2), 
	ENDB DECIMAL(18, 2), 
	BDGT DECIMAL(18, 2))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_GLMT_RANGE 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '01' AS PERIOD, 
		AJ4OB01 AS OPEN, 
		AJ4TT01 AS NET, 
		AJ4OB01 + AJ4TT01 AS END, 
		AJ4CB01 BDGT 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '01' >= '20' || VPF AND 
		AJ4CCYY || '01' <= '20' || VPT 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '02' AS PERIOD, 
		AJ4OB02 AS OPEN, 
		AJ4TT02 AS NET, 
		AJ4OB02 + AJ4TT02 AS END, AJ4CB02 BDGT 
	 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '02' >= '20' || VPF AND 
		AJ4CCYY || '02' <= '20' || VPT 
		 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '03' AS PERIOD, 
		AJ4OB03 AS OPEN, 
		AJ4TT03 AS NET, 
		AJ4OB03 + AJ4TT03 AS END, AJ4CB03 BDGT 
	 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '03' >= '20' || VPF AND 
		AJ4CCYY || '03' <= '20' || VPT 
	 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '04' AS PERIOD, 
		AJ4OB04 AS OPEN, 
		AJ4TT04 AS NET, 
		AJ4OB04 + AJ4TT04 AS END, AJ4CB04 BDGT 
	 
	 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '04' >= '20' || VPF AND 
		AJ4CCYY || '04' <= '20' || VPT 
	 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '05' AS PERIOD, 
		AJ4OB05 AS OPEN, 
		AJ4TT05 AS NET, 
		AJ4OB05 + AJ4TT05 AS END, AJ4CB05 BDGT 
	 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '05' >= '20' || VPF AND 
		AJ4CCYY || '05' <= '20' || VPT 
	 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '06' AS PERIOD, 
		AJ4OB06 AS OPEN, 
		AJ4TT06 AS NET, 
		AJ4OB06 + AJ4TT06 AS END, AJ4CB06 BDGT 
	 
	 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '06' >= '20' || VPF AND 
		AJ4CCYY || '06' <= '20' || VPT	 
	 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '07' AS PERIOD, 
		AJ4OB07 AS OPEN, 
		AJ4TT07 AS NET, 
		AJ4OB07 + AJ4TT07 AS END, AJ4CB07 BDGT 
	 
	 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '07' >= '20' || VPF AND 
		AJ4CCYY || '07' <= '20' || VPT 
	 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '08' AS PERIOD, 
		AJ4OB08 AS OPEN, 
		AJ4TT08 AS NET, 
		AJ4OB08 + AJ4TT08 AS END, AJ4CB08 BDGT 
	 
	 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '08' >= '20' || VPF AND 
		AJ4CCYY || '08' <= '20' || VPT	 
	 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '09' AS PERIOD, 
		AJ4OB09 AS OPEN, 
		AJ4TT09 AS NET, 
		AJ4OB09 + AJ4TT09 AS END, AJ4CB09 BDGT 
	 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '09' >= '20' || VPF AND 
		AJ4CCYY || '09' <= '20' || VPT 
	 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '10' AS PERIOD, 
		AJ4OB10 AS OPEN, 
		AJ4TT10 AS NET, 
		AJ4OB10 + AJ4TT10 AS END, AJ4CB10 BDGT 
	 
	 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '10' >= '20' || VPF AND 
		AJ4CCYY || '10' <= '20' || VPT 
	 
	 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '11' AS PERIOD, 
		AJ4OB11 AS OPEN, 
		AJ4TT11 AS NET, 
		AJ4OB11 + AJ4TT11 AS END, AJ4CB11 BDGT 
	 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '11' >= '20' || VPF AND 
		AJ4CCYY || '11' <= '20' || VPT 
	 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '12' AS PERIOD, 
		AJ4OB12 AS OPEN, 
		AJ4TT12 AS NET, 
		AJ4OB12 + AJ4TT12 AS END, AJ4CB12 BDGT 
	 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '12' >= '20' || VPF AND 
		AJ4CCYY || '12' <= '20' || VPT 
	 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '13' AS PERIOD, 
		AJ4OB13 AS OPEN, 
		AJ4TT13 AS NET, 
		AJ4OB13 + AJ4TT13 AS END, AJ4CB13 BDGT 
	 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '13' >= '20' || VPF AND 
		AJ4CCYY || '13' <= '20' || VPT 
	 
	UNION ALL 
	 
	SELECT 
		AJ4COMP || DIGITS (AJ4GL#1) || DIGITS (AJ4GL#2) AS ACC, 
		SUBSTR (AJ4CCYY, 3, 2) || '14' AS PERIOD, 
		AJ4OB14 AS OPEN, 
		AJ4TT14 AS NET, 
		AJ4OB14 + AJ4TT14 AS END, AJ4CB14 BDGT 
	FROM 
		LGDAT.GLMT GLMT 
	WHERE 
		AJ4CCYY || '14' >= '20' || VPF AND 
		AJ4CCYY || '14' <= '20' || VPT  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_GLMT_RANGE 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_GLMT_RANGE 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_PD_STK (
	VPERD CHAR(4)) 
	RETURNS TABLE (
	ACCT CHAR(12), 
	PERD CHAR(4), 
	PRIME CHAR(4), 
	PERPETUAL DECIMAL(16, 2), 
	PDGLR1 DECIMAL(16, 2), 
	DIFF DECIMAL(16, 2))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_PD_STK 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	NO EXTERNAL ACTION 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
	SELECT 
		ACCT, 
		PERD, 
		PRIME, 
		ROUND (SUM (PERPETUAL), 0) PERPETUAL, 
		ROUND (SUM (PDGLR1), 0) PDGLR1, 
		ROUND (SUM (PDGLR1 - PERPETUAL), 0) DIFF 
	FROM 
		(	 
		SELECT 
			ACCT, 
			NWFSYY || DIGITS (NWFSPP) PERD, 
			SUBSTR (ACCT, 7, 4) PRIME, 
			0 PERPETUAL, 
			SUM (AMNT) PDGLR1 
		FROM 
			RLARP.FFPDGLR1 
			INNER JOIN LGDAT.RPRH ON 
				NWBTID = BTID 
		WHERE 
			SUBSTR (ACCT, 7, 4) IN ('1200', '1220') AND 
			DIGITS (NWFSYY) || DIGITS (NWFSPP) = VPERD 
		GROUP BY 
			ACCT, 
			NWFSYY || DIGITS (NWFSPP), 
			SUBSTR (ACCT, 7, 4) 
  
		UNION ALL 
  
		SELECT 
			YACOMP || Y1INVA AS ACCT, 
			SUBSTR (STKT.BYFSYY, 3, 2) || DIGITS (STKT.BYFSPR) AS PERD, 
			SUBSTR (YACOMP || Y1INVA, 7, 4) AS PRIME, 
			ROUND (SUM (STKT.BYQTY * COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS) * CASE STKT.BYACTN WHEN 'R' THEN 1 ELSE - 1 END), 2) AS PERPETUAL, 
			0 PDGLR1 
		FROM 
			LGDAT.STKT STKT 
			LEFT OUTER JOIN LGDAT.ICSTP P ON 
				CHPART = STKT.BYPART AND 
				CHPLNT = STKT.BYPLNT 
			LEFT OUTER JOIN LGDAT.ICSTM M ON 
				CGPART = STKT.BYPART AND 
				CGPLNT = STKT.BYPLNT 
			LEFT OUTER JOIN LGDAT.ICSTR R ON 
				Y0PART = STKT.BYPART AND 
				Y0PLNT = STKT.BYPLNT 
			LEFT OUTER JOIN QGPL.FFCOSTEFFD ON 
				PART = BYPART AND 
				PLNT = BYPLNT AND 
				CHAR (FDT) || CHAR (FTM) < CHAR (BYSDAT) || CHAR (BYSTIM) AND 
				CHAR (TDT) || CHAR (TTM) > CHAR (BYSDAT) || CHAR (BYSTIM) 
			LEFT OUTER JOIN LGDAT.STKMP MP ON 
				MP.AWPART = BYPART 
			LEFT OUTER JOIN LGDAT.STKMM MM ON 
				MM.AVPART = BYPART 
			LEFT OUTER JOIN LGDAT.GLIE A ON 
				Y1GLEC = COALESCE (AVGLED, AWGLED) AND 
				Y1PLNT = BYPLNT 
			LEFT OUTER JOIN LGDAT.PLNT L ON 
				YAPLNT = BYPLNT 
		WHERE 
			STKT.BYFSYY = 20 || SUBSTR (VPERD, 1, 2) AND 
			BYSRC = 'PD ' AND BYFSPR = SUBSTR (VPERD, 3, 2) 
		GROUP BY 
			YACOMP || Y1INVA, 
			SUBSTR (STKT.BYFSYY, 3, 2) || DIGITS (STKT.BYFSPR), 
			SUBSTR (YACOMP || Y1INVA, 7, 4) 
		) X 
	GROUP BY 
		ACCT, PERD, PRIME  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_PD_STK 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_PD_STK 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_PRWD (
	VPERD VARCHAR(4)) 
	RETURNS TABLE (
	PAY_DATE VARCHAR(6), 
	ADP_COMP VARCHAR(3), 
	PMNT VARCHAR(30), 
	TB VARCHAR(2), 
	JRNLT VARCHAR(6), 
	ACCT BIGINT, 
	DEBIT DECIMAL(18, 2), 
	CREDIT DECIMAL(18, 2), 
	GL_DESCR VARCHAR(255))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_PRWD 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	NO EXTERNAL ACTION 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *CHG, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = RLARP, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	PAY_DATE, ADP_COMP, PMNT, TB, JRNLT, 
	CAST (SUBSTR (CASE JRNLT WHEN 'PRIMAR' THEN A.ACCT ELSE COALESCE (TB, '00') || '0000101002' END, 3, 10) AS BIGINT) ACCT, 
	CASE WHEN SUM (A.AMOUNT * CASE JRNLT WHEN 'PRIMAR' THEN - 1 ELSE 1 END) >= 0 THEN SUM (A.AMOUNT * CASE JRNLT WHEN 'PRIMAR' THEN - 1 ELSE 1 END) ELSE 0 END DEBIT, 
	CASE WHEN SUM (A.AMOUNT * CASE JRNLT WHEN 'PRIMAR' THEN - 1 ELSE 1 END) < 0 THEN - SUM (A.AMOUNT * CASE JRNLT WHEN 'PRIMAR' THEN - 1 ELSE 1 END) ELSE 0 END CREDIT, 
	PAY_DATE || '-' || ADP_COMP || '-' || CASE JRNLT WHEN 'PRIMAR' THEN R.DESCR ELSE PMNT END GL_DESCR 
FROM 
	RLARP.FFPRRP R, 
	RLARP.FFPRCD C, 
	TABLE (VALUES 
		(ACCT, 'PRIMAR', AMOUNT), 
		(ACCT, 'OFFSET', AMOUNT) 
	) AS A (ACCT, JRNLT, AMOUNT) 
WHERE 
	R.DESCR = C.CODE AND 
	R.PO = C.PO AND 
	SUBSTR (PAY_DATE, 1, 4) = VPERD AND 
	PMNT IN ('ADP_TAX', 'PRINCIPAL_401K', 'ADP_GARNISHMENTS', 'ADP_DIRDEP') 
GROUP BY 
	PAY_DATE, ADP_COMP, PMNT, TB, 
	CAST (SUBSTR (CASE JRNLT WHEN 'PRIMAR' THEN A.ACCT ELSE COALESCE (TB, '00') || '0000101002' END, 3, 10) AS BIGINT), 
	JRNLT, 
	PAY_DATE || '-' || ADP_COMP || '-' || CASE JRNLT WHEN 'PRIMAR' THEN R.DESCR ELSE PMNT END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_PRWD 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_PRWD 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_PRWD_JE (
	VPDF VARCHAR(6), 
	VPDT VARCHAR(6)) 
	RETURNS TABLE (
	FLAG VARCHAR(3), 
	ACCT BIGINT, 
	GL_DESCR VARCHAR(60), 
	DEBIT DECIMAL(18, 2), 
	CREDT DECIMAL(18, 2), 
	REV VARCHAR(1), 
	JRNL VARCHAR(5), 
	CURR VARCHAR(2))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_PRWD_JE 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	 --TB, 
	FLAG, ACCT, GL_DESCR, 
	CASE FLAG WHEN 'HDR' THEN 5 ELSE DEBIT END DEBIT, 
	CREDIT, 
	CASE FLAG WHEN 'HDR' THEN 'N' ELSE '' END REV, 
	CASE FLAG WHEN 'HDR' THEN '120' || TB END JRNL, 
	CASE FLAG WHEN 'HDR' THEN 'US' ELSE '' END CURR 
FROM	 
	(
	SELECT 
		TB, 
		CASE JRNLT WHEN 'HEADER' THEN 'HDR' ELSE 'DTL' END FLAG, 
		CASE JRNLT WHEN 'HEADER' THEN TB ELSE CAST (SUBSTR (CASE JRNLT WHEN 'PRIMAR' THEN A.ACCT ELSE COALESCE (TB, '00') || '0000101002' END, 3, 10) AS BIGINT) END ACCT, 
		CASE JRNLT 
			WHEN 'HEADER' THEN 'ADP WITHHOLDING WITHDRAWEL' 
			ELSE PAY_DATE || '-' || ADP_COMP || '-' || 
				CASE JRNLT 
					WHEN 'PRIMAR' THEN R.DESCR ELSE 
					PMNT 
				END 
		END GL_DESCR, 
		CASE WHEN SUM (A.AMOUNT * CASE JRNLT WHEN 'PRIMAR' THEN - 1 ELSE 1 END) >= 0 THEN SUM (A.AMOUNT * CASE JRNLT WHEN 'PRIMAR' THEN - 1 ELSE 1 END) ELSE 0 END DEBIT, 
		CASE WHEN SUM (A.AMOUNT * CASE JRNLT WHEN 'PRIMAR' THEN - 1 ELSE 1 END) < 0 THEN - SUM (A.AMOUNT * CASE JRNLT WHEN 'PRIMAR' THEN - 1 ELSE 1 END) ELSE 0 END CREDIT 
	FROM 
		RLARP.FFPRRP R, 
		RLARP.FFPRCD C, 
		TABLE (VALUES 
			(ACCT, 'PRIMAR', AMOUNT), 
			(ACCT, 'OFFSET', AMOUNT), 
			(ACCT, 'HEADER', AMOUNT) 
		) AS A (ACCT, JRNLT, AMOUNT) 
	WHERE 
		R.DESCR = C.CODE AND 
		R.PO = C.PO AND 
		PAY_DATE >= VPDF AND 
		PAY_DATE <= VPDT AND 
		PMNT IN ('ADP_TAX', 'PRINCIPAL_401K', 'ADP_GARNISHMENTS') 
	GROUP BY	 
		TB, 
		CASE JRNLT WHEN 'HEADER' THEN 'HDR' ELSE 'DTL' END, 
		CASE JRNLT WHEN 'HEADER' THEN TB ELSE CAST (SUBSTR (CASE JRNLT WHEN 'PRIMAR' THEN A.ACCT ELSE COALESCE (TB, '00') || '0000101002' END, 3, 10) AS BIGINT) END, 
		CASE JRNLT 
			WHEN 'HEADER' THEN 'ADP WITHHOLDING WITHDRAWEL' 
			ELSE PAY_DATE || '-' || ADP_COMP || '-' || 
				CASE JRNLT 
					WHEN 'PRIMAR' THEN R.DESCR ELSE 
					PMNT 
				END 
		END 
	) X 
ORDER BY X.TB ASC, X.FLAG DESC  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_PRWD_JE 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_PRWD_JE 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_PRWD_RP (
	VPDF VARCHAR(6), 
	VPDT VARCHAR(6)) 
	RETURNS TABLE (
	PAY_DATE VARCHAR(6), 
	PMNT VARCHAR(60), 
	CODE VARCHAR(30), 
	ACCT VARCHAR(6), 
	UDV DECIMAL(18, 2), 
	B3X DECIMAL(18, 2), 
	U7H DECIMAL(18, 2), 
	U7E DECIMAL(18, 2), 
	U7J DECIMAL(18, 2))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_PRWD_RP 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	PAY_DATE, 
	PMNT, 
	CASE FLAG WHEN 'D' THEN R.DESCR ELSE 'TOTALS' END CODE, 
	CASE FLAG WHEN 'D' THEN SUBSTR (R.ACCT, 7, 6) ELSE '101002' END ACCT, 
	SUM (CASE ADP_COMP WHEN 'UDV' THEN AMOUNT * CASE FLAG WHEN 'D' THEN - 1 ELSE 1 END END) UDV, 
	SUM (CASE ADP_COMP WHEN 'B3X' THEN AMOUNT * CASE FLAG WHEN 'D' THEN - 1 ELSE 1 END END) B3X, 
	SUM (CASE ADP_COMP WHEN 'U7H' THEN AMOUNT * CASE FLAG WHEN 'D' THEN - 1 ELSE 1 END END) U7H, 
	SUM (CASE ADP_COMP WHEN 'U7E' THEN AMOUNT * CASE FLAG WHEN 'D' THEN - 1 ELSE 1 END END) U7E, 
	SUM (CASE ADP_COMP WHEN 'U7J' THEN AMOUNT * CASE FLAG WHEN 'D' THEN - 1 ELSE 1 END END) U7J 
	 
FROM 
	RLARP.FFPRRP R, 
	RLARP.FFPRCD C, 
	TABLE (VALUES 
		('D'), 
		('T') 
	) AS X (FLAG) 
  
WHERE 
	R.DESCR = C.CODE AND 
	R.PO = C.PO AND 
	PAY_DATE >= VPDF AND 
	PAY_DATE <= VPDT AND 
	PMNT IN ('ADP_TAX', 'PRINCIPAL_401K', 'ADP_GARNISHMENTS') 
GROUP BY 
	PAY_DATE, 
	PMNT, 
	CASE FLAG WHEN 'D' THEN R.DESCR ELSE 'TOTALS' END, 
	CASE FLAG WHEN 'D' THEN SUBSTR (R.ACCT, 7, 6) ELSE '101002' END 
ORDER BY 
	PAY_DATE, PMNT, CODE, ACCT  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_PRWD_RP 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_PRWD_RP 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_PSXD_PTPL () 
	RETURNS TABLE (
	MAST VARCHAR(20), 
	MPLT CHAR(3), 
	TLVL VARCHAR(20), 
	TPART VARCHAR(60), 
	DESCR VARCHAR(60), 
	PLINE VARCHAR(60), 
	CLINE VARCHAR(60), 
	"PART" VARCHAR(20), 
	CPLNT CHAR(3), 
	STAT CHAR(1), 
	REPL CHAR(1), 
	SPLNT CHAR(3), 
	SEQ INTEGER, 
	OUTS CHAR(1), 
	DEP VARCHAR(5), 
	RESC VARCHAR(5), 
	OPC VARCHAR(20), 
	AOREPP CHAR(1), 
	REFF INTEGER, 
	XREFF INTEGER, 
	RQBY CHAR(1), 
	BACK CHAR(1), 
	MAJG VARCHAR(60), 
	MING VARCHAR(60), 
	GLCD VARCHAR(60), 
	GLED VARCHAR(60), 
	SCRP DOUBLE PRECISION, 
	RQTY DOUBLE PRECISION, 
	ERQTY DOUBLE PRECISION, 
	ERQTYS DOUBLE PRECISION, 
	UNTI VARCHAR(3), 
	BUOM VARCHAR(3), 
	CONV DOUBLE PRECISION, 
	CPC CHAR(2), 
	SPC CHAR(2), 
	DT CHAR(10), 
	BASE DOUBLE PRECISION, 
	FRT DOUBLE PRECISION, 
	DUTY DOUBLE PRECISION, 
	MISC1 DOUBLE PRECISION, 
	MISC2 DOUBLE PRECISION, 
	CURR DOUBLE PRECISION, 
	"S&H" DOUBLE PRECISION, 
	"FRT-TO" DOUBLE PRECISION, 
	"FRT-FROM" DOUBLE PRECISION, 
	SUBC DOUBLE PRECISION, 
	RUNTIME DOUBLE PRECISION, 
	RUNCREW DOUBLE PRECISION, 
	SETTIME DOUBLE PRECISION, 
	RUNSIZE DOUBLE PRECISION, 
	SETCREW DOUBLE PRECISION, 
	LABRATE DOUBLE PRECISION, 
	FIXRATE DOUBLE PRECISION, 
	VARRATE DOUBLE PRECISION, 
	LABRUN DOUBLE PRECISION, 
	FIXRUN DOUBLE PRECISION, 
	VARRUN DOUBLE PRECISION, 
	LABSET DOUBLE PRECISION, 
	FIXSET DOUBLE PRECISION, 
	VARSET DOUBLE PRECISION, 
	BASEX DOUBLE PRECISION, 
	FRTX DOUBLE PRECISION, 
	CURRX DOUBLE PRECISION, 
	OTHMX DOUBLE PRECISION, 
	SUBCX DOUBLE PRECISION, 
	LABRX DOUBLE PRECISION, 
	FIXRX DOUBLE PRECISION, 
	VARRX DOUBLE PRECISION, 
	LABSX DOUBLE PRECISION, 
	FIXSX DOUBLE PRECISION, 
	VARSX DOUBLE PRECISION, 
	BASEXS DOUBLE PRECISION, 
	FRTXS DOUBLE PRECISION, 
	CURRXS DOUBLE PRECISION, 
	OTHMXS DOUBLE PRECISION, 
	SUBCXS DOUBLE PRECISION, 
	LABRXS DOUBLE PRECISION, 
	FIXRXS DOUBLE PRECISION, 
	VARRXS DOUBLE PRECISION, 
	LABSXS DOUBLE PRECISION, 
	FIXSXS DOUBLE PRECISION, 
	VARSXS DOUBLE PRECISION)   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_PSXD_PTPL 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
	 
--PRODUCT STRUCTURE EXPLOSION DETAILS-- 
--REVISION LEVEL 1 
---------------------------------------------------------------------------------------------------------------------------------------- 
--This result set explodes the METHDM bill of materials along the STKA.V6RPLN procurement path and 
--links in the routings & burden rates to get to a detailed rebuild of the product cost. 
--The explosion method is a recursive CTE (common table expression) that operates like a self join. 
--the explosion stops if it encounters a replenishment type 2 or exceeds 10 levels which is interpreted as an infinite loop somewhere 
--the last select breaks out all possible data points 
--duty, shipping and warehousing on the ICSTR file and the misc1 & 2 cost categories functions are not known but included here anyways 
--it is assumed any conversion issues are handled in a single step by the PUNIT file, which doesn't always have a single step conversion 
---------------------------------------------------------------------------------------------------------------------------------------- 
WITH RECURSIVE PSE 
	(
		 ------------EXPLOSION TRACKING---------------- 
		LVL, PLINE, CLINE, MAST, MPLT, PRNT, CHLD, 
		 ------------PROCUREMENT----------------------- 
		STAT, REPL, 
		 ------------ROUTING--------------------------- 
		SEQ, DEP, RESC, OPC, REPP, REFF, XREFF, 
		 ------------BILL OF MATERIALS----------------- 
		RQBY, BACK, SCRP, EFF, QTY, BQTY, RQTY, ERQTY, 
		 ------------UOM CONVERSIONS------------------- 
		UNTI, BUOM, CONV, 
		 ------------SOURCING-------------------------- 
		CPLNT, SPLNT, 
		 ------------CURRENCY-------------------------- 
		CPC, SPC, FXR 
	) AS 
(
SELECT 
	0, 
	VARCHAR (SUBSTR (DIGITS (INT (RANK () OVER (ORDER BY A.V6PART ASC, A.V6PLNT ASC))), 6, 5), 100) || 
	CASE WHEN AOSEQ# < 10 
		THEN SUBSTR (DIGITS (- AOSEQ# + 9), 2, 3) 
		ELSE '' 
	END AS PLINE, 
	VARCHAR (SUBSTR (DIGITS (INT (RANK () OVER (ORDER BY A.V6PART ASC, A.V6PLNT ASC))), 6, 5), 100) || SUBSTR (DIGITS (- AOSEQ# + 10), 2, 3) AS CLINE, 
	A.V6PART, 
	A.V6PLNT, 
	A.V6PART, 
	A.V6PART, 
	A.V6STAT, 
	A.V6RPLN, 
	AOSEQ#, 
	AODEPT, 
	COALESCE (APVEND, AORESC), 
	COALESCE (APODES, AOOPNM), 
	AOREPP, 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	'R', 
	' ', 
	1, 
	1, 
	1, 
	1, 
	1, 
	1, 
	A.V6UNTI, 
	A.V6UNTI, 
	FLOAT (1), 
	A.V6PLNT, 
	CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END, 
	SUBSTR (CC.A215, 152, 2), 
	SUBSTR (SC.A215, 152, 2), 
	B86SRTE 
FROM 
	RLARP.FFPTPL P 
	INNER JOIN LGDAT.STKA A ON 
		A.V6PART = P.PART AND 
		A.V6PLNT = P.PLNT 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = A.V6PART AND 
		AOPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = A.V6PART AND 
		APPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END AND 
		A.V6RPLN = 1 
	LEFT OUTER JOIN LGDAT.PLNT CP ON 
		CP.YAPLNT = A.V6PLNT 
	LEFT OUTER JOIN LGDAT.PLNT SP ON 
		SP.YAPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END 
	LEFT OUTER JOIN LGDAT.CODE CC ON 
		LTRIM (RTRIM (CC.A9)) = CP.YACOMP AND 
		CC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CODE SC ON 
		LTRIM (RTRIM (SC.A9)) = SP.YACOMP AND 
		SC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CRET ON 
		B86COMN = SP.YACOMP AND 
		B86CURC = SUBSTR (CC.A215, 152, 2) AND 
		B86RTTY = 'S' 
  
UNION ALL 
  
SELECT 
	PSE.LVL + 1, 
	CASE WHEN AOSEQ# < 10 
		THEN PSE.CLINE || '-' || REPEAT ('0', 3 - LENGTH (VARCHAR (M.AQLIN#))) || VARCHAR (M.AQLIN#) || SUBSTR (DIGITS (COALESCE (- AOSEQ# + 9, AQSEQ#)), 2, 3) 
		ELSE VARCHAR (PSE.CLINE, 100) 
	END, 
	PSE.CLINE || '-' || REPEAT ('0', 3 - LENGTH (VARCHAR (M.AQLIN#))) || VARCHAR (M.AQLIN#) || SUBSTR (DIGITS (COALESCE (- AOSEQ# + 10, AQSEQ#)), 2, 3), 
	PSE.MAST, 
	PSE.MPLT, 
	PSE.CHLD, 
	M.AQMTLP, 
	A.V6STAT, 
	A.V6RPLN, 
	COALESCE (AOSEQ#, AQSEQ#), 
	AODEPT, 
	COALESCE (APVEND, AORESC), 
	COALESCE (APODES, AOOPNM), 
	AOREPP, 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8) * PSE.XREFF, 
	M.AQRQBY, 
	M.AQBACK, 
	FLOAT (1 - M.AQSCRP / 100), 
	1, 
	M.AQQPPC, 
	M.AQQTYM, 
	FLOAT (M.AQQPPC / M.AQQTYM) / FLOAT (1 - M.AQSCRP / 100) * CASE M.AQRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
	FLOAT (M.AQQPPC / M.AQQTYM) * FLOAT (PSE.ERQTY) / FLOAT (1 - M.AQSCRP / 100) * CASE M.AQRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
	A.V6UNTI, 
	M.AQUNIT, 
	FLOAT (COALESCE (U.MULT_BY, 1)) * FLOAT (COALESCE (U2.MULT_BY, 1)) * PSE.CONV, 
	M.AQPLNT, 
	CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE M.AQPLNT END, 
	SUBSTR (CC.A215, 152, 2), 
	SUBSTR (SC.A215, 152, 2), 
	B86SRTE * PSE.FXR 
FROM 
	PSE PSE 
	INNER JOIN LGDAT.METHDM M ON 
		M.AQPART = PSE.CHLD AND 
		M.AQPLNT = PSE.SPLNT AND 
		M.AQSEQ# = IFNULL (PSE.SEQ, M.AQSEQ#) AND 
		 ----------MOD 10/20/15------------- 
		PSE.REPL <> '2' 
	LEFT OUTER JOIN LGDAT.STKA A ON 
		A.V6PART = M.AQMTLP AND 
		A.V6PLNT = M.AQPLNT 
	LEFT OUTER JOIN LGDAT.STKA A2 ON 
		A2.V6PART = M.AQMTLP AND 
		A2.V6PLNT = A.V6TPLN 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = M.AQMTLP AND 
		AOPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = M.AQMTLP AND 
		APPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END AND 
		A.V6RPLN = 1 
	LEFT OUTER JOIN 
	(
	SELECT 
		IHUNT1 AS UNT1, IHUNT2 AS UNT2, IHCNV2 / IHCNV1 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
  
	UNION ALL 
  
	SELECT 
		IHUNT2 AS UNT1, IHUNT1 AS UNT2, IHCNV1 / IHCNV2 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
	) U ON 
		U.UNT1 = M.AQUNIT AND 
		U.UNT2 = A.V6UNTI 
	LEFT OUTER JOIN 
	(
	SELECT 
		IHUNT1 AS UNT1, IHUNT2 AS UNT2, IHCNV2 / IHCNV1 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
  
	UNION ALL 
  
	SELECT 
		IHUNT2 AS UNT1, IHUNT1 AS UNT2, IHCNV1 / IHCNV2 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
	) U2 ON 
		LTRIM (RTRIM (U2.UNT1)) = A.V6UNTI AND 
		LTRIM (RTRIM (U2.UNT2)) = A2.V6UNTI 
	LEFT OUTER JOIN LGDAT.PLNT CP ON 
		CP.YAPLNT = M.AQPLNT 
	LEFT OUTER JOIN LGDAT.PLNT SP ON 
		SP.YAPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE M.AQPLNT END 
	LEFT OUTER JOIN LGDAT.CODE CC ON 
		LTRIM (RTRIM (CC.A9)) = CP.YACOMP AND 
		CC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CODE SC ON 
		LTRIM (RTRIM (SC.A9)) = SP.YACOMP AND 
		SC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CRET ON 
		B86COMN = SP.YACOMP AND 
		B86CURC = SUBSTR (CC.A215, 152, 2) AND 
		B86RTTY = 'S'		 
WHERE 
	LVL <= 10 
	AND PSE.REPL <> '4' 
) 
  
SELECT 
	MAST, 
	MPLT, 
	REPEAT ('.  ', LVL) || LVL AS TLVL, 
	REPEAT ('.  ', LVL) || CHLD TPART, 
	REPEAT ('.  ', LVL) || COALESCE (AWDES1, AVDES1) DESCR, 
	PLINE, 
	CLINE, 
	PSE.CHLD PART, 
	CPLNT, 
	STAT, REPL, SPLNT, SEQ, AAOSRV OUTS, DEP, RESC, OPC, AOREPP, 
	REFF, XREFF, 
	RQBY, BACK, 
	IFNULL (MM.AVMAJG, MP.AWMAJG) MAJG, 
	IFNULL (MM.AVMING, MP.AWMING) || ' - ' || RTRIM (MMGP.BRDES) MING, 
	IFNULL (MM.AVGLCD, MP.AWGLDC) GLCD, 
	IFNULL (MM.AVGLED, MP.AWGLED) GLED, 
	SCRP, 
	 --QTY, BQTY, 
	RQTY, 
	ERQTY, 
	ERQTY * (1 / XREFF - 1) ERQTYS, 
	UNTI, BUOM, CONV, 
	CPC, SPC, 
	 --FXR, 
	 --COALESCE(IP.CHCURR, IR.Y0FUT1) AS CURR, 
	CHAR (COALESCE (IP.CHSDAT, IR.Y0SDAT, IM.CGSDAT)) DT, 
	IP.CHSUC BASE, 
	IP.CHSFC FRT, 
	IP.CHSDC DUTY, 
	IP.CHS1C MISC1, 
	IP.CHS2C MISC2, 
	 -------------------------MOD 10/20/15----------------------------- 
	CASE REPL WHEN '2' THEN IP.CHSCC WHEN '3' THEN IR.Y0SOC ELSE 0 END AS CURR, 
	IR.Y0SSHC "S&H", 
	APFCSO "FRT-TO", 
	APFCSI "FRT-FROM", 
	APUNCS SUBC, 
	AORUNS RUNTIME, 
	AO#MEN / AO#MCH RUNCREW, 
	AOSETP SETTIME, 
	V6OPTR RUNSIZE, 
	AOSCRW SETCREW, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END LABRATE, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END FIXRATE, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END VARRATE, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH LABRUN, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS FIXRUN, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS VARRUN, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR LABSET, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR FIXSET, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR VARSET, 
	 ----------EXTENDED VALUES---------- 
	IP.CHSUC * ERQTY BASEX, 
	IP.CHSFC * ERQTY FRTX, 
	CASE REPL WHEN '2' THEN IP.CHSCC WHEN '3' THEN IR.Y0SOC ELSE 0 END * ERQTY AS CURRX, 
	(IP.CHSDC + IP.CHS1C + IP.CHS2C + IR.Y0SSHC + APFCSO + APFCSI) * ERQTY OTHMX, 
	APUNCS * ERQTY SUBCX, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH * ERQTY LABRX, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS * ERQTY FIXRX, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS * ERQTY VARRX, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR * ERQTY LABSX, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR * ERQTY FIXSX, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR * ERQTY VARSX, 
	 --------SCRAP---------- 
	IP.CHSUC * ERQTY * (1 / XREFF - 1) BASEXS, 
	IP.CHSFC * ERQTY * (1 / XREFF - 1) FRTXS, 
	CASE PSE.LVL WHEN '0' THEN 0 ELSE CASE REPL WHEN '2' THEN IP.CHSCC WHEN '3' THEN IR.Y0SOC ELSE 0 END * ERQTY * (1 / XREFF - 1) END AS CURRXS, 
	(IP.CHSDC + IP.CHS1C + IP.CHS2C + IR.Y0SSHC + APFCSO + APFCSI) * ERQTY * (1 / XREFF - 1) OTHMXS, 
	APUNCS * ERQTY * (1 / XREFF - 1) SUBCXS, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH * ERQTY * (1 / XREFF - 1) LABRXS, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS * ERQTY * (1 / XREFF - 1) FIXRXS, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS * ERQTY * (1 / XREFF - 1) VARRXS, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR * ERQTY * (1 / XREFF - 1) LABSXS, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR * ERQTY * (1 / XREFF - 1) FIXSXS, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR * ERQTY * (1 / XREFF - 1) VARSXS 
FROM 
	PSE PSE 
	LEFT OUTER JOIN LGDAT.ICSTM IM ON 
		IM.CGPART = PSE.CHLD AND 
		IM.CGPLNT = PSE.SPLNT 
	LEFT OUTER JOIN LGDAT.ICSTP IP ON 
		IP.CHPART = PSE.CHLD AND 
		IP.CHPLNT = PSE.SPLNT 
	LEFT OUTER JOIN LGDAT.ICSTR IR ON 
		IR.Y0PART = PSE.CHLD AND 
		IR.Y0PLNT = PSE.CPLNT 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = CHLD AND 
		APPLNT = SPLNT AND 
		APSEQ# = SEQ AND 
		APVEND = RESC 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = CHLD AND 
		AOPLNT = SPLNT AND 
		AOSEQ# = SEQ 
	LEFT OUTER JOIN LGDAT.STKA ON 
		V6PART = CHLD AND 
		V6PLNT = SPLNT 
	LEFT OUTER JOIN LGDAT.RESRE ON 
		ABPLNT = SPLNT AND 
		ABDEPT = PSE.DEP AND 
		ABRESC = RESC 
	LEFT OUTER JOIN LGDAT.DEPTS ON 
		ABDEPT = AADEPT 
	LEFT OUTER JOIN LGDAT.STKMM MM ON 
		MM.AVPART = PSE.CHLD 
	LEFT OUTER JOIN LGDAT.STKMP MP ON 
		MP.AWPART = PSE.CHLD 
	LEFT OUTER JOIN LGDAT.MMGP MMGP ON 
		MMGP.BRMGRP = COALESCE (AWMING, AVMING) AND 
		MMGP.BRGRP = COALESCE (AWMAJG, AVMAJG) 
ORDER BY CLINE ASC  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.F_PSXD_PTPL 
	IS 'Product structure explosion for items in FFPTPL' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_PSXD_PTPL 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_PSXD_PTPL 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_SB_GLMT (
	VPERD VARCHAR(4)) 
	RETURNS TABLE (
	PERD VARCHAR(4), 
	ACCT VARCHAR(12), 
	TRANS DECIMAL(18, 2), 
	GLMT DECIMAL(18, 2), 
	DIFF DECIMAL(18, 2))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_SB_GLMT 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	D.PERD, D.ACCT, D.AMT TRANS, X.NT GLMT, D.AMT - X.NT DIFF 
FROM 
	(
		SELECT 
			PERD, ACCT, SUM (AMT) AMT 
		FROM 
			RLARP.FFSBGLR1 D 
		WHERE 
			D.PERD = VPERD 
		GROUP BY 
			PERD, ACCT 
	) D 
	FULL OUTER JOIN TABLE (RLARP.F_GLMT (VPERD, VPERD)) X ON 
		X.PERD = D.PERD AND 
		X.ACCT = D.ACCT 
WHERE 
	ROUND (D.AMT - X.NT, 0) <> 0  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_SB_GLMT 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_SB_GLMT 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.F_UP_SBGL (
	VPERD VARCHAR(4)) 
	RETURNS TABLE (
	DKBTC# BIGINT, 
	DKPOST VARCHAR(1), 
	MODULE VARCHAR(4))   
	LANGUAGE SQL 
	SPECIFIC RLARP.F_UP_SBGL 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	L.DKBTC#, L.DKPOST, L.MODULE 
FROM 
	(
		SELECT DISTINCT 
			DKBTC#, DKPOST, DKSRCE || DKQUAL MODULE 
		FROM 
			LGDAT.GTRAN 
		WHERE 
			DKFSYR = 20 AND 
			DKFSYY = SUBSTR (VPERD, 1, 2) AND 
			DKFSPR = SUBSTR (VPERD, 3, 2) 
		 
		UNION	 
		 
		SELECT DISTINCT 
			DKBTC#, DKPOST, DKSRCE || DKQUAL MODULE 
		FROM 
			LGDAT.GTLYN 
		WHERE 
			DKFSYR = 20 AND 
			DKFSYY = SUBSTR (VPERD, 1, 2) AND 
			DKFSPR = SUBSTR (VPERD, 3, 2) 
		 
		UNION 
			 
		SELECT DISTINCT 
			DKBTC#, DKPOST, DKSRCE || DKQUAL MODULE 
		FROM 
			LGDAT.GNYTR 
		WHERE 
			DKFSYR = 20 AND 
			DKFSYY = SUBSTR (VPERD, 1, 2) AND 
			DKFSPR = SUBSTR (VPERD, 3, 2) 
	) L 
	EXCEPTION JOIN RLARP.FFSBGLR1 D ON 
		D.BATCH = L.DKBTC#  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_UP_SBGL 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.F_UP_SBGL 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.FN_CONSH () 
	RETURNS TABLE (
	COMP VARCHAR(100), 
	DESCR VARCHAR(100), 
	CURR VARCHAR(2), 
	CONS VARCHAR(100))   
	LANGUAGE SQL 
	SPECIFIC RLARP.FN_CONSH 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
WITH RECURSIVE CH 
(PRNT, CHLD, LVL, IDX) 
  
AS 
(
	SELECT 
		0, CAST (MAX (DW6COMN) AS VARCHAR (100)), 0, CAST ('00' AS VARCHAR (100)) 
	FROM 
		LGDAT.GLCA 
  
	UNION ALL 
	 
	SELECT	 
		CHLD, CAST (DW6SCOM AS VARCHAR (100)), LVL + 1, IDX || '.' || CAST (DW6SCOM AS VARCHAR (100)) 
	FROM	 
		LGDAT.GLCA 
		INNER JOIN CH ON 
			DW6COMN = CHLD 
	WHERE 
		LVL < 10 
) 
  
SELECT 
	REPEAT ('. ', LVL) || CHLD, DESCR, CURR, CONS 
FROM 
	CH 
	LEFT OUTER JOIN RLARP.VW_FFCOPR ON 
		COMP = CHLD 
ORDER BY 
	IDX  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.FN_CONSH 
	IS 'Complete Consolidation hierarchy' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FN_CONSH 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FN_CONSH 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.FN_CONSHS (
	TCOM VARCHAR(2)) 
	RETURNS TABLE (
	COMP VARCHAR(100), 
	CHLD VARCHAR(100), 
	LVL INTEGER, 
	IDX VARCHAR(100))   
	LANGUAGE SQL 
	SPECIFIC RLARP.FN_CONSHS 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
WITH RECURSIVE CH 
(PRNT, CHLD, LVL, IDX) 
  
AS 
(
	SELECT 
		0, CAST (DW6COMN AS VARCHAR (100)), 0, CAST ('00' AS VARCHAR (100)) 
	FROM 
		LGDAT.GLCA 
	WHERE 
		DW6COMN = TCOM 
  
	UNION ALL 
	 
	SELECT	 
		CHLD, CAST (DW6SCOM AS VARCHAR (100)), LVL + 1, IDX || '.' || CAST (DW6SCOM AS VARCHAR (100)) 
	FROM	 
		LGDAT.GLCA 
		INNER JOIN CH ON 
			DW6COMN = CHLD 
	WHERE 
		LVL < 10 
) 
  
SELECT 
	PRNT, CHLD, LVL, IDX 
FROM 
	CH  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.FN_CONSHS 
	IS 'Consolidation Hierarchy from starting point' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FN_CONSHS 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FN_CONSHS 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.FN_ISB (
	VPERD VARCHAR(4)) 
	RETURNS TABLE (
	PERD VARCHAR(4), 
	ACCT VARCHAR(12), 
	TRANS DOUBLE PRECISION, 
	GLMT DOUBLE PRECISION, 
	DIFF DOUBLE PRECISION)   
	LANGUAGE SQL 
	SPECIFIC RLARP.FN_ISB 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
	 
	RETURN 
	SELECT 
		PERD, ACCT, SUM (TRANS) TRANS, SUM (GLMT) GLMT, SUM (TRANS) - SUM (GLMT) DIFF 
	FROM 
		(
		SELECT 
			'GLMT' SRCE, FSPR PERD, ACCOUNT ACCT, 0 TRANS, NETT GLMT 
		FROM 
			RLARP.VW_FFTB 
		WHERE 
			FSPR = VPERD 
		 
  
		UNION ALL 
  
		SELECT 
			'TRANS' SRCE, PERD, ACCT, SUM (AMT) TRANS, 0 GLMT 
		FROM 
			RLARP.FFSBGLR1 
		WHERE 
			PERD = VPERD AND 
			MODULE <> 'APVM' 
		GROUP BY 
			PERD, ACCT 
		) X 
	GROUP BY 
		PERD, ACCT 
	HAVING 
		ABS (ROUND (SUM (TRANS) - SUM (GLMT), 0)) > 1 ; 
  
	END  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.FN_ISB 
	IS 'FFSBGLR1 - test if matches GLMT NETT' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FN_ISB 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FN_ISB 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.FN_NWFUT9 (
	FUT9 DECIMAL(15, 5)) 
	RETURNS CHAR(19)   
	LANGUAGE SQL 
	SPECIFIC RLARP.FN_NWFUT9 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
	 
	RETURN SUBSTR (CHAR (FUT9), 1, 4) || '-' || SUBSTR (CHAR (FUT9), 5, 2) || '-' || SUBSTR (CHAR (FUT9), 7, 2) || ' ' || SUBSTR (CHAR (FUT9), 9, 1) || SUBSTR (CHAR (FUT9), 11, 1) || ':' || SUBSTR (CHAR (FUT9), 12, 2) || ':' || SUBSTR (CHAR (FUT9), 14, 2) ; 
  
	END  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.FN_NWFUT9 
	IS 'Parse RPRH.NWFUT9 field' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FN_NWFUT9 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FN_NWFUT9 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.FSTKBP (
	VPER VARCHAR(4), 
	YYYYHMMHDD VARCHAR(10)) 
	RETURNS TABLE (
	"PART" VARCHAR(20), 
	PLNT VARCHAR(3), 
	STOK VARCHAR(6), 
	PERD VARCHAR(4), 
	QTOH DOUBLE PRECISION, 
	COST DOUBLE PRECISION)   
	LANGUAGE SQL 
	SPECIFIC RLARP.FSTKBP 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	BYPART PART, 
	BYPLNT PLNT, 
	BYSTOK STOK, 
	VPER PERD, 
	QTOH QTOG, 
	COALESCE (FCOST, STDCOST) COST 
FROM 
	(
	SELECT 
		BYPLNT, BYPART, BYSTOK, SUM (QTOH) QTOH 
	FROM 
		(
		SELECT 
			BYPLNT, BYPART, BYSTOK, 
			- SUM (BYQTY * CASE BYACTN WHEN 'I' THEN - 1 ELSE 1 END) QTOH 
		FROM 
			LGDAT.STKT STKT 
		WHERE 
			BYFSYY || DIGITS (BYFSPR) > '20' || VPER 
		GROUP BY 
			BYPLNT, BYPART, BYSTOK 
  
		UNION ALL 
  
		SELECT 
			BXPLNT BYPLNT, BXPART BYPART, BXSTOK BYSTOK, 
			SUM (BXQTOH) QTOH 
		FROM 
			LGDAT.STKB 
		WHERE 
			BXPART <> '' AND 
			BXQTOH <> 0 
		GROUP BY 
			BXPLNT, BXPART, BXSTOK 
		) X 
	GROUP BY 
		BYPLNT, BYPART, BYSTOK 
	) BEFP  ----BALANCE EFFECTIVE FISCAL PERIOD 
	LEFT OUTER JOIN RLARP.FFCOSTEFFD C ON 
		PART = BYPART AND 
		PLNT = BYPLNT AND 
		CHAR (FDT) || ' ' || CHAR (FTM) < YYYYHMMHDD || ' 23:59:59' AND 
		CHAR (TDT) || ' ' || CHAR (TTM) > YYYYHMMHDD || ' 23:59:59' 
	LEFT OUTER JOIN RLARP.VW_FFICSTX ON 
		V6PART = BYPART AND 
		V6PLNT = BYPLNT  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.FSTKBP 
	IS 'Rebuild STKB effective fiscal & cost date' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FSTKBP 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FSTKBP 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.FSTMTAE (
	VSTMT VARCHAR(255)) 
	RETURNS TABLE (
	STMT VARCHAR(255), 
	MAST INTEGER, 
	PLINE INTEGER, 
	CLINE INTEGER, 
	AF VARCHAR(255))   
	LANGUAGE SQL 
	SPECIFIC RLARP.FSTMTAE 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
WITH H (STMT, MAST, PLINE, CLIN, AF) AS 
(
	SELECT DISTINCT 
		STMT, LINE, 0, LINE, 'N' 
	FROM 
		RLARP.VSTMTH 
	WHERE 
		STMT = VSTMT AND 
		AGG_FLG = 'X' 
	 
	UNION ALL 
  
	SELECT 
		H.STMT, MAST, H.CLIN, V.LINE, COALESCE (V.AGG_FLG, 'N') 
	FROM 
		H 
		INNER JOIN RLARP.VSTMTH V ON 
			V.STMT = H.STMT AND 
			V.PLINE = H.CLIN 
  
) 
	SELECT * FROM H WHERE COALESCE (AF, '') <> 'X' AND PLINE <> 0  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.FSTMTAE 
	IS 'Give each child leaf node for each parent line' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FSTMTAE 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FSTMTAE 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.FSTMTIP (
	VFP VARCHAR(4), 
	VTP VARCHAR(4), 
	VSTMT VARCHAR(255)) 
	RETURNS TABLE (
	STMT VARCHAR(255), 
	LINE INTEGER, 
	L_DESCR VARCHAR(255), 
	AGG_FLG VARCHAR(255), 
	PLINE INTEGER, 
	PRE_SIGN INTEGER, 
	POST_SIGN INTEGER, 
	STAT VARCHAR(255), 
	NODEV DOUBLE PRECISION)   
	LANGUAGE SQL 
	SPECIFIC RLARP.FSTMTIP 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	S.STMT, S.LINE, S.L_DESCR, S.AGG_FLG, S.PLINE, S.PRE_SIGN, S.POST_SIGN, S.STAT, SUM (A.NODEV) NODEV 
FROM 
	RLARP.FFSTMTD S 
	LEFT OUTER JOIN 
	(
		 --------EBITDA components pull if listed-------- 
		SELECT 
			S.STMT, SEQ, S.FGRP, EFLAG, LINE, L_DESCR, PLINE, PRE_SIGN, SUM (NT) NODEV, SUM (NT) AGGV 
		FROM 
			RLARP.FFSTMTD S 
			INNER JOIN TABLE (RLARP.F_GLMT (VFP, VTP)) B ON 
				SUBSTR (B.AZFUT3, 1, 1) = S.EFLAG 
		WHERE 
			S.STMT = VSTMT 
		GROUP BY 
			S.STMT, SEQ, S.FGRP, EFLAG, LINE, L_DESCR, PLINE, PRE_SIGN 
  
		UNION ALL 
  
		 ------pull account group balances where EBITDA column on statement is null 
		SELECT 
			S.STMT, SEQ, S.FGRP, EFLAG, LINE, L_DESCR, PLINE, PRE_SIGN, SUM (NT) NODEV, SUM (NT) AGGV 
		FROM 
			RLARP.FFSTMTD S 
			INNER JOIN TABLE (RLARP.F_GLMT (VFP, VTP)) B ON 
				RTRIM (SUBSTR (B.AZGROP, 1, 7)) = S.FGRP 
		WHERE 
			S.STMT = VSTMT 
		GROUP BY 
			S.STMT, SEQ, S.FGRP, EFLAG, LINE, L_DESCR, PLINE, PRE_SIGN 
	) A ON 
		S.SEQ = A.SEQ 
WHERE 
	S.STMT = VSTMT 
GROUP BY 
	S.STMT, S.LINE, S.L_DESCR, S.AGG_FLG, S.PLINE, S.PRE_SIGN, S.POST_SIGN, S.STAT  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.FSTMTIP 
	IS 'Initial link to FGRP accounts & EBITDA components' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FSTMTIP 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FSTMTIP 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.FSTMTIP_TEST (
	VFP VARCHAR(4), 
	VTP VARCHAR(4), 
	VSTMT VARCHAR(255)) 
	RETURNS TABLE (
	STMT VARCHAR(255), 
	LINE INTEGER, 
	L_DESCR VARCHAR(255), 
	AGG_FLG VARCHAR(255), 
	PLINE INTEGER, 
	PRE_SIGN INTEGER, 
	POST_SIGN INTEGER, 
	STAT VARCHAR(255), 
	NODEV DOUBLE PRECISION)   
	LANGUAGE SQL 
	SPECIFIC RLARP.FSTMTIP_TEST 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	NO EXTERNAL ACTION 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *CHG, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = RLARP, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	S.STMT, S.LINE, S.L_DESCR, S.AGG_FLG, S.PLINE, S.PRE_SIGN, S.POST_SIGN, S.STAT, SUM (A.NODEV) NODEV 
FROM 
	RLARP.FFSTMTD S 
	LEFT OUTER JOIN 
	(
		 --------EBITDA components pull if listed-------- 
		SELECT 
			S.STMT, SEQ, S.FGRP, EFLAG, LINE, L_DESCR, PLINE, PRE_SIGN, SUM (NT) NODEV, SUM (NT) AGGV 
		FROM 
			RLARP.FFSTMTD S 
			INNER JOIN TABLE (RLARP.F_GLMT (VFP, VTP)) B ON 
				SUBSTR (B.AZFUT3, 1, 1) = S.EFLAG 
		WHERE 
			S.STMT = VSTMT 
		GROUP BY 
			S.STMT, SEQ, S.FGRP, EFLAG, LINE, L_DESCR, PLINE, PRE_SIGN 
  
		UNION ALL 
  
		 ------pull account group balances where EBITDA column on statement is null 
		SELECT 
			S.STMT, SEQ, S.FGRP, EFLAG, LINE, L_DESCR, PLINE, PRE_SIGN, SUM (NT) NODEV, SUM (NT) AGGV 
		FROM 
			RLARP.FFSTMTD S 
			INNER JOIN TABLE (RLARP.F_GLMT (VFP, VTP)) B ON 
				RTRIM (SUBSTR (B.AZGROP, 1, 7)) = S.FGRP 
		WHERE 
			S.STMT = VSTMT 
		GROUP BY 
			S.STMT, SEQ, S.FGRP, EFLAG, LINE, L_DESCR, PLINE, PRE_SIGN 
	) A ON 
		S.SEQ = A.SEQ 
WHERE 
	S.STMT = VSTMT 
GROUP BY 
	S.STMT, S.LINE, S.L_DESCR, S.AGG_FLG, S.PLINE, S.PRE_SIGN, S.POST_SIGN, S.STAT  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FSTMTIP_TEST 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FSTMTIP_TEST 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.FSTMTPR (
	VFP VARCHAR(4), 
	VTP VARCHAR(4), 
	VSTMT VARCHAR(255)) 
	RETURNS TABLE (
	STMT VARCHAR(255), 
	LINE INTEGER, 
	STAT VARCHAR(255), 
	LINE_D VARCHAR(255), 
	AVALUE DOUBLE PRECISION, 
	PVALUE DOUBLE PRECISION)   
	LANGUAGE SQL 
	SPECIFIC RLARP.FSTMTPR 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	S.STMT, S.LINE, STAT, COALESCE (S.L_DESCR, '') LINE_D, COALESCE (S.NODEV, A.AMT) AVALUE, COALESCE (S.NODEV, A.AMT) * POST_SIGN PVALUE 
FROM 
	TABLE (RLARP.FSTMTIP (VFP, VTP, VSTMT)) S 
	LEFT OUTER JOIN 
	(
		SELECT 
			MAST, SUM (NODEV * PRE_SIGN) AMT 
		FROM 
			TABLE (RLARP.FSTMTAE (VSTMT)) X 
			INNER JOIN TABLE (RLARP.FSTMTIP (VFP, VTP, VSTMT)) A ON 
				A.LINE = X.CLINE 
		GROUP BY 
			MAST 
	) A ON 
		A.MAST = S.LINE  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.FSTMTPR 
	IS 'Statement - Period Range; one column of actuals' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FSTMTPR 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FSTMTPR 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.FVDHE () 
	RETURNS TABLE (
	ROOT_VW VARCHAR(255), 
	LVL VARCHAR(255), 
	CKEY VARCHAR(255), 
	TABLE_TEXT VARCHAR(255), 
	LAST_ALTERED_TIMESTAMP VARCHAR(255), 
	CVW VARCHAR(255), 
	CLIB VARCHAR(255))   
	LANGUAGE SQL 
	SPECIFIC RLARP.FVDHE 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
WITH RECURSIVE DH 
(MVW, MLIB, PLIB, PVW, CLIB, CVW, CKEY, LVL) 
  
AS 
(
	SELECT 
		PLIB, PVW, '', '', PLIB, PVW, RTRIM (PLIB) || '.' || RTRIM (PVW), 0	 
	FROM	 
		(SELECT DISTINCT PLIB, PVW FROM RLARP.VVDH) X 
	 
	UNION ALL 
	 
	SELECT	 
		DH.MVW, DH.MLIB, DH.CLIB, DH.CVW, VH.CLIB, VH.CVW, RTRIM (VH.CLIB) || '.' || RTRIM (VH.CVW) CKEY, DH.LVL + 1 LVL 
	FROM	 
		RLARP.VVDH VH 
		INNER JOIN DH ON 
			VH.PLIB = DH.CLIB AND 
			VH.PVW = DH.CVW 
	WHERE 
		LVL < 10 
) 
SEARCH DEPTH FIRST BY CKEY SET ORDCOL 
SELECT 
	RTRIM (MLIB) || '.' || RTRIM (MVW) ROOT_VW, 
	REPEAT ('. ', LVL) || LVL LVL, REPEAT ('. ', LVL) || CKEY, TABLE_TEXT, LAST_ALTERED_TIMESTAMP, CVW, CLIB 
FROM 
	DH 
	LEFT OUTER JOIN RLARP.SYSTABLES T ON 
		T.TABLE_NAME = CVW AND 
		T.TABLE_SCHEMA = CLIB 
ORDER BY ORDCOL  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.FVDHE 
	IS 'View dependency hierachy for all views' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FVDHE 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.FVDHE 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.GLKEY1 (
	MODULE VARCHAR(4), 
	CUSMOD VARCHAR(20), 
	K1 VARCHAR(30), 
	K2 VARCHAR(30), 
	K3 VARCHAR(30), 
	K4 VARCHAR(30), 
	P VARCHAR(100)) 
	RETURNS VARCHAR(255)   
	LANGUAGE SQL 
	SPECIFIC RLARP.GLKEY1 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
  
	DECLARE R VARCHAR (255) ; 
  
	SET R = 
	CASE MODULE 
		WHEN 'AP' THEN 'VOUCHER - ' || LTRIM (RTRIM (K1)) 
		WHEN 'APAC' THEN 'ITEM - ' || LTRIM (RTRIM (K1)) 
		WHEN 'APCQ' THEN 'VENDOR - ' || LTRIM (RTRIM (P)) || ' - ' || LTRIM (RTRIM (K4)) 
		WHEN 'APVC' THEN 'CHECK NUMBER - ' || LTRIM (RTRIM (K2)) 
		WHEN 'APVN' THEN 'VENDOR - ' || LTRIM (RTRIM (P)) 
		WHEN 'AR' THEN 'CUSTOMER - ' || LTRIM (RTRIM (P)) 
		WHEN 'ARIN' THEN 'CUSTOMER - ' || LTRIM (RTRIM (P)) 
		WHEN 'ARRC' THEN 
			CASE CUSMOD 
				WHEN 'MISC CASH ENTRY' THEN 'DESCR - ' || LTRIM (RTRIM (K2)) 
				ELSE 'CUSTOMER - ' || LTRIM (RTRIM (P)) 
			END 
		WHEN 'AU' THEN LTRIM (RTRIM (K1)) || ' - ' || LTRIM (RTRIM (K2)) 
		WHEN 'GJJB' THEN 'JE - ' || LTRIM (RTRIM (K1)) || ' - ' || LTRIM (RTRIM (K2)) 
		WHEN 'IC' THEN LTRIM (RTRIM (K1)) 
		WHEN 'ICIN' THEN 'CUSTOMER - ' || LTRIM (RTRIM (P)) 
		WHEN 'ICIT' THEN 'REASON/DESCR - ' || LTRIM (RTRIM (K2)) || ' - ' || LTRIM (RTRIM (K3)) 
		WHEN 'ICRL' THEN 'PART - ' || LTRIM (RTRIM (K2)) 
		WHEN 'ICRT' THEN 'CUSTOMER - ' || LTRIM (RTRIM (P)) 
		WHEN 'ICVR' THEN 'PART - ' || LTRIM (RTRIM (K2)) 
		WHEN 'OEIN' THEN 'CUSTOMER - ' || LTRIM (RTRIM (P)) 
		WHEN 'OS' THEN LTRIM (RTRIM (K1)) || ' - ' || LTRIM (RTRIM (K2)) 
		WHEN 'PD' THEN 'PRODUCTION' 
		WHEN 'PDWO' THEN 'PRODUCTION' 
		WHEN 'RJ' THEN LTRIM (RTRIM (K1)) || ' - ' || LTRIM (RTRIM (K2)) 
	END ; 
		 
  
	RETURN R ; 
  
END  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.GLKEY1 
	IS 'pick one cuskey for FFSBGLR1' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.GLKEY1 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.GLKEY1 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.ORE () 
	RETURNS VARCHAR(12)   
	LANGUAGE SQL 
	SPECIFIC RLARP.ORE 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
DECLARE C INTEGER ; 
DECLARE RE VARCHAR (12) ; 
SET C = (SELECT A84MAXL + A84FLG1 FROM LGDAT.GLDFT) ; 
SET RE = (SELECT SUBSTR (A249, 202, C) FROM LGDAT.NAME WHERE A7 = 'C000093') ; 
RETURN RE ; 
END  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.ORE 
	IS 'opening retained earnings account' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.ORE 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.ORE 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.PERP_RF (
	FPER VARCHAR(4), 
	TPER VARCHAR(4)) 
	RETURNS TABLE (
	PLNT VARCHAR(3), 
	PERD VARCHAR(4), 
	COMPONENT VARCHAR(30), 
	QTY DOUBLE PRECISION, 
	VALUE_LOCAL DECIMAL(18, 2), 
	VALUE_USD DECIMAL(18, 2), 
	MAJG VARCHAR(50), 
	MING VARCHAR(50), 
	GLEC VARCHAR(50), 
	BRAND VARCHAR(1), 
	MAT_GRP VARCHAR(30))   
	LANGUAGE SQL 
	SPECIFIC RLARP.PERP_RF 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
  
  
-----------------------------opening balances-------------------------- 
SELECT 
	B.PLNT, 
	CURRP PERD, 
	'OPEN' GRP, 
	SUM (QTYOH) QTY, 
	SUM (QTYOH * COST_EFF) VALUE_LOCAL, 
	SUM (QTYOH * COST_EFF * RATE) VALUE_USD, 
	MAJG, MING, GLEC, SUBSTR (CUSTPART, 1, 1) BRAND, MAT_GRP	 
FROM 
	RLARP.FFSTKBP B 
	INNER JOIN LGDAT.PLNT P ON 
		P.YAPLNT = B.PLNT 
	INNER JOIN RLARP.VW_PRFSPR R ON 
		R.COMP = P.YACOMP AND 
		R.PRIORP = B.PERD 
	LEFT OUTER JOIN RLARP.VW_FFITEMM M ON 
		M.ITEM = B.PART 
	LEFT OUTER JOIN RLARP.VW_FFPLPR D ON 
		D.YAPLNT = B.PLNT 
	LEFT OUTER JOIN RLARP.FFCRET X ON 
		X.PERD = B.PERD AND  --fx conversion for opening balances uses ending balance period 
		X.FCUR = D.CURR AND 
		X.TCUR = 'US' AND 
		X.RTYP = 'ME' 
WHERE 
	CURRP >= FPER AND 
	CURRP <= TPER 
GROUP BY 
	B.PLNT, 
	CURRP, 
	MAJG, MING, GLEC, SUBSTR (CUSTPART, 1, 1), MAT_GRP	 
	 
UNION ALL 
  
-----------------------------exchange-------------------------- 
SELECT 
	B.PLNT, 
	R.CURRP PERD, 
	'FX' GRP, 
	SUM (QTYOH) QTY, 
	0 VALUE_LOCAL, 
	SUM (FLOAT (QTYOH * COST_EFF) * FLOAT (X2.RATE - X.RATE)) VALUE_USD, 
	MAJG, MING, GLEC, SUBSTR (CUSTPART, 1, 1) BRAND, MAT_GRP	 
FROM 
	RLARP.FFSTKBP B 
	INNER JOIN LGDAT.PLNT P ON 
		P.YAPLNT = B.PLNT 
	INNER JOIN RLARP.VW_PRFSPR R ON 
		R.COMP = P.YACOMP AND 
		R.PRIORP = B.PERD 
	LEFT OUTER JOIN RLARP.VW_FFITEMM M ON 
		M.ITEM = B.PART 
	LEFT OUTER JOIN RLARP.VW_FFPLPR D ON 
		D.YAPLNT = B.PLNT 
	LEFT OUTER JOIN RLARP.FFCRET X ON 
		X.PERD = B.PERD AND 
		X.FCUR = D.CURR AND 
		X.TCUR = 'US' AND 
		X.RTYP = 'ME' 
	LEFT OUTER JOIN RLARP.FFCRET X2 ON 
		X2.PERD = R.CURRP AND 
		X2.FCUR = D.CURR AND 
		X2.TCUR = 'US' AND 
		X2.RTYP = 'ME' 
WHERE 
	R.CURRP >= FPER AND 
	R.CURRP <= TPER 
GROUP BY 
	B.PLNT, 
	CURRP, 
	MAJG, MING, GLEC, SUBSTR (CUSTPART, 1, 1), MAT_GRP	 
	 
UNION ALL 
  
------------------------------------------transactions----------------------------- 
SELECT 
	BYPLNT PLNT, RF.PERD, GRP COMPONENT, 
	SUM (BYQTY) QTY, 
	SUM (COST * BYQTY) VALUE_LOCAL, 
	SUM (COST * BYQTY * RATE) VALUE_USD, 
	MAJG, MING, GLEC, SUBSTR (CUSTPART, 1, 1) BRAND, MAT_GRP 
FROM 
	(
		SELECT	 
			BYPART, BYPLNT, BYSTOK, SUBSTR (DIGITS (BYFSYY), 3, 2) || DIGITS (BYFSPR) PERD, GRP, COALESCE (FCOST, STDCOST) COST, 
			SUM (BYQTY * CASE BYACTN WHEN 'I' THEN - 1 ELSE 1 END) BYQTY 
		FROM 
			LGDAT.STKT T 
			LEFT OUTER JOIN RLARP.FFSTGR ON 
				SRC = UPPER (RTRIM (BYSRC) || SUBSTRING (LTRIM (BYREAS || BYDREF), 1, 3)) 
			LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
				PART = BYPART AND 
				PLNT = BYPLNT AND 
				CHAR (FDT) || ' ' || CHAR (FTM) < CHAR (BYSDAT) || ' ' || CHAR (BYSTIM) AND 
				CHAR (TDT) || ' ' || CHAR (TTM) > CHAR (BYSDAT) || ' ' || CHAR (BYSTIM) 
			LEFT OUTER JOIN RLARP.VW_FFICSTX ON 
				V6PART = BYPART AND 
				V6PLNT = BYPLNT 
		WHERE 
			(BYFSYY >= '20' || SUBSTR (FPER, 1, 2) AND BYFSPR >= SUBSTR (FPER, 3, 2)) AND 
			(BYFSYY <= '20' || SUBSTR (TPER, 1, 2) AND BYFSPR <= SUBSTR (TPER, 3, 2)) 
		GROUP BY 
			BYPART, BYPLNT, BYSTOK, SUBSTR (DIGITS (BYFSYY), 3, 2) || DIGITS (BYFSPR), GRP, COALESCE (FCOST, STDCOST) 
		HAVING 
			SUM (BYQTY * CASE BYACTN WHEN 'I' THEN - 1 ELSE 1 END) <> 0 
	) RF 
	LEFT OUTER JOIN RLARP.VW_FFITEMM M ON 
		ITEM = BYPART 
	LEFT OUTER JOIN RLARP.VW_FFPLPR P ON 
		YAPLNT = BYPLNT 
	LEFT OUTER JOIN RLARP.FFCRET X ON 
		X.PERD = RF.PERD AND 
		X.FCUR = P.CURR AND 
		X.TCUR = 'US' AND 
		X.RTYP = 'ME' 
GROUP BY 
	BYPLNT, RF.PERD, GRP, 
	MAJG, MING, GLEC, SUBSTR (CUSTPART, 1, 1), MAT_GRP 
  
UNION ALL 
  
-------------------------------------cost rolls----------------------------------------- 
SELECT 
	C.PLNT, G.FSPR PERD, 'COST ROLL' GRP, 
	SUM (TQTY) QTY, 
	SUM ((TCOST - FCOST) * TQTY) VALUE_LOCAL, 
	SUM ((TCOST - FCOST) * TQTY * RATE) VALUE_USD, 
	MAJG, MING, GLEC, SUBSTR (CUSTPART, 1, 1) BRAND, MAT_GRP 
FROM 
	RLARP.VW_FFGLPD G 
	INNER JOIN LGDAT.PLNT P ON 
		YACOMP = G.COMP 
	INNER JOIN RLARP.FFCOSTEFFD C ON 
		C.PLNT = P.YAPLNT AND 
		C.TDT >= SDAT AND 
		C.TDT <= EDAT 
	LEFT OUTER JOIN RLARP.VW_FFITEMM M ON 
		ITEM = C.PART 
	LEFT OUTER JOIN RLARP.VW_FFPLPR R ON 
		R.YAPLNT = C.PLNT 
	LEFT OUTER JOIN RLARP.FFCRET X ON 
		X.PERD = G.FSPR AND 
		X.FCUR = R.CURR AND 
		X.TCUR = 'US' AND 
		X.RTYP = 'ME' 
WHERE 
	G.FSPR >= FPER AND 
	G.FSPR <= TPER AND 
	TCOST - FCOST <> 0 AND 
	TQTY <> 0 
GROUP BY 
	C.PLNT, G.FSPR, 
	MAJG, MING, GLEC, SUBSTR (CUSTPART, 1, 1), MAT_GRP 
	 
UNION ALL 
  
-----------------------ending balances------------------------ 
SELECT 
	PLNT, B.PERD, 'END' COMPONENT, 
	SUM (QTYOH) QTY, 
	SUM (COST_EFF * QTYOH) VALUE_LOCAL, 
	SUM (COST_EFF * QTYOH * X.RATE) VALUE_USD, 
	MAJG, MING, GLEC, SUBSTR (CUSTPART, 1, 1) BRAND, MAT_GRP 
FROM 
	RLARP.FFSTKBP B 
	LEFT OUTER JOIN RLARP.VW_FFITEMM M ON 
		ITEM = PART 
	LEFT OUTER JOIN RLARP.VW_FFPLPR P ON 
		YAPLNT = PLNT 
	LEFT OUTER JOIN RLARP.FFCRET X ON 
		X.PERD = B.PERD AND 
		X.FCUR = CURR AND 
		X.TCUR = 'US' AND 
		X.RTYP = 'ME' 
WHERE 
	B.PERD >= FPER AND 
	B.PERD <= TPER 
GROUP BY 
	PLNT, B.PERD, MAJG, MING, GLEC, SUBSTR (CUSTPART, 1, 1), MAT_GRP  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.PERP_RF 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.PERP_RF 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.PROD_BTCH_DATE (
	STMP VARCHAR(19)) 
	RETURNS TABLE (
	NWBTID DECIMAL(9, 0))   
	LANGUAGE SQL 
	SPECIFIC RLARP.PROD_BTCH_DATE 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	NWBTID 
FROM 
	LGDAT.RPRH 
WHERE 
	NWPOST = 'Y' AND 
	NWFSYY >= 15 AND 
	MAX (CAST (NWRDAT AS TIMESTAMP),	TIMESTAMP (NWCDAT, NWCTIM),	TIMESTAMP (NWUDAT, NWUTIM),	TO_DATE (RLARP.FN_NWFUT9 (NWFUT9), 'YYYY-MM-DD HH24:MI:SS')) >= TO_DATE (STMP, 'YYYY-MM-DD HH24:MI:SS')  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.PROD_BTCH_DATE 
TO PTROWBRIDG ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.PROD_WRKO_DATE (
	STMP VARCHAR(19)) 
	RETURNS TABLE (
	WRKO DECIMAL(9, 0))   
	LANGUAGE SQL 
	SPECIFIC RLARP.PROD_WRKO_DATE 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT DISTINCT 
	OAJOB# WRKO 
FROM 
	LGDAT.RPRH 
	INNER JOIN LGDAT.RPRR ON 
		NWBTID = OABTID 
WHERE 
	NWPOST = 'Y' AND 
	NWFSYY >= 15 AND 
	MAX (CAST (NWRDAT AS TIMESTAMP),	TIMESTAMP (NWCDAT, NWCTIM),	TIMESTAMP (NWUDAT, NWUTIM),	TO_DATE (RLARP.FN_NWFUT9 (NWFUT9), 'YYYY-MM-DD HH24:MI:SS')) >= TO_DATE ('2016-09-30 00:00:00', 'YYYY-MM-DD HH24:MI:SS')  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.PROD_WRKO_DATE 
TO PTROWBRIDG ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.STK_RF_A (
	VPERD VARCHAR(4)) 
	RETURNS TABLE (
	ACCT VARCHAR(12), 
	PERD VARCHAR(4), 
	GRP VARCHAR(255), 
	VALUE_LOCAL DOUBLE PRECISION)   
	LANGUAGE SQL 
	SPECIFIC RLARP.STK_RF_A 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	YACOMP || Y1INVA ACCT, 
	 --BYPART, BYPLNT, BYSTOK, 
	PERD, GRP, 
	 --COST, BYQTY 
	SUM (COST * BYQTY) VALUE_LOCAL 
FROM 
	(
		SELECT	 
			BYPART, BYPLNT, BYSTOK, SUBSTR (DIGITS (BYFSYY), 3, 2) || DIGITS (BYFSPR) PERD, GRP, COALESCE (FCOST, STDCOST) COST, 
			SUM (BYQTY * CASE BYACTN WHEN 'I' THEN - 1 ELSE 1 END) BYQTY 
		FROM 
			LGDAT.STKT T 
			LEFT OUTER JOIN RLARP.FFSTGR ON 
				SRC = UPPER (RTRIM (BYSRC) || SUBSTRING (LTRIM (BYREAS || BYDREF), 1, 3)) 
			LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
				PART = BYPART AND 
				PLNT = BYPLNT AND 
				CHAR (FDT) || ' ' || CHAR (FTM) < CHAR (BYSDAT) || ' ' || CHAR (BYSTIM) AND 
				CHAR (TDT) || ' ' || CHAR (TTM) > CHAR (BYSDAT) || ' ' || CHAR (BYSTIM) 
			LEFT OUTER JOIN RLARP.VW_FFICSTX ON 
				V6PART = BYPART AND 
				V6PLNT = BYPLNT 
		WHERE 
			BYFSYY = '20' || SUBSTR (VPERD, 1, 2) AND 
			BYFSPR = SUBSTR (VPERD, 3, 2) 
		GROUP BY 
			BYPART, BYPLNT, BYSTOK, SUBSTR (DIGITS (BYFSYY), 3, 2) || DIGITS (BYFSPR), GRP, COALESCE (FCOST, STDCOST) 
		HAVING 
			SUM (BYQTY * CASE BYACTN WHEN 'I' THEN - 1 ELSE 1 END) <> 0 
	) G 
	INNER JOIN RLARP.VW_FFSTKMX ON 
		AVPART = BYPART 
	INNER JOIN LGDAT.PLNT ON 
		YAPLNT = BYPLNT 
	LEFT OUTER JOIN LGDAT.GLIE ON 
		Y1GLEC = AVGLED AND 
		Y1PLNT = BYPLNT 
GROUP BY 
	YACOMP || Y1INVA, PERD, GRP 
  
UNION ALL 
  
SELECT 
	YACOMP || Y1INVA ACCT, G.FSPR, 'COST ROLL' GRP, ROUND (SUM ((TCOST - FCOST) * TQTY), 2) VALUE_LOCAL 
FROM 
	RLARP.VW_FFGLPD G 
	INNER JOIN RLARP.VW_PRFSPR P ON 
		P.COMP = G.COMP AND 
		P.CURRP = G.FSPR 
	INNER JOIN LGDAT.PLNT ON 
		YACOMP = G.COMP 
	INNER JOIN RLARP.FFCOSTEFFD C ON 
		C.PLNT = YAPLNT AND 
		C.TDT >= SDAT AND 
		C.TDT <= EDAT 
	INNER JOIN RLARP.VW_FFSTKMX ON 
		AVPART = C.PART 
	INNER JOIN LGDAT.GLIE ON 
		Y1PLNT = C.PLNT AND 
		Y1GLEC = AVGLED 
WHERE 
	G.FSPR = VPERD AND 
	TCOST - FCOST <> 0 AND 
	TQTY <> 0 
GROUP BY 
	YACOMP || Y1INVA, G.FSPR 
  
UNION ALL 
  
SELECT 
	YACOMP || Y1INVA ACCT, 
	CURRP, 
	'OPEN' COMPONENT, 
	ROUND (SUM (QTYOH * COST_EFF), 2) VALUE_LOCAL	 
FROM 
	RLARP.FFSTKBP 
	INNER JOIN LGDAT.PLNT ON 
		YAPLNT = PLNT 
	INNER JOIN RLARP.VW_PRFSPR ON 
		COMP = YACOMP AND 
		PRIORP = PERD 
	LEFT OUTER JOIN RLARP.VW_FFSTKMX ON 
		AVPART = PART 
	LEFT OUTER JOIN LGDAT.GLIE ON 
		Y1PLNT = PLNT AND 
		Y1GLEC = AVGLED 
WHERE 
	CURRP = VPERD 
GROUP BY 
	YACOMP || Y1INVA, CURRP 
  
UNION ALL 
  
SELECT 
	YACOMP || Y1INVA ACCT, 
	PERD, 
	'END' COMPONENT, 
	ROUND (SUM (QTYOH * COST_EFF), 2) VALUE_LOCAL	 
FROM 
	RLARP.FFSTKBP 
	INNER JOIN LGDAT.PLNT ON 
		YAPLNT = PLNT 
	LEFT OUTER JOIN RLARP.VW_FFSTKMX ON 
		AVPART = PART 
	LEFT OUTER JOIN LGDAT.GLIE ON 
		Y1PLNT = PLNT AND 
		Y1GLEC = AVGLED 
WHERE 
	PERD = VPERD 
GROUP BY 
	YACOMP || Y1INVA, PERD  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.STK_RF_A 
	IS 'Account number roll-forward of STK transactions' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.STK_RF_A 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.STK_RF_A 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.STK_RF_A_USD (
	VPERD VARCHAR(4)) 
	RETURNS TABLE (
	ACCT VARCHAR(12), 
	PERD VARCHAR(4), 
	GRP VARCHAR(255), 
	VALUE_LOCAL DOUBLE PRECISION, 
	VALUE_USD DOUBLE PRECISION)   
	LANGUAGE SQL 
	SPECIFIC RLARP.STK_RF_A_USD 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
  
SELECT	 
	ACCT, X.PERD, GRP, VALUE_LOCAL, VALUE_LOCAL * RATE VALUE_USD 
FROM 
	(	 
		SELECT 
			YACOMP || Y1INVA ACCT, 
			 --BYPART, BYPLNT, BYSTOK, 
			PERD, GRP, 
			 --COST, BYQTY 
			SUM (COST * BYQTY) VALUE_LOCAL 
		FROM 
			(
				SELECT	 
					BYPART, BYPLNT, BYSTOK, SUBSTR (DIGITS (BYFSYY), 3, 2) || DIGITS (BYFSPR) PERD, GRP, COALESCE (FCOST, STDCOST) COST, 
					SUM (BYQTY * CASE BYACTN WHEN 'I' THEN - 1 ELSE 1 END) BYQTY 
				FROM 
					LGDAT.STKT T 
					LEFT OUTER JOIN RLARP.FFSTGR ON 
						SRC = UPPER (RTRIM (BYSRC) || SUBSTRING (LTRIM (BYREAS || BYDREF), 1, 3)) 
					LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
						PART = BYPART AND 
						PLNT = BYPLNT AND 
						CHAR (FDT) || ' ' || CHAR (FTM) < CHAR (BYSDAT) || ' ' || CHAR (BYSTIM) AND 
						CHAR (TDT) || ' ' || CHAR (TTM) > CHAR (BYSDAT) || ' ' || CHAR (BYSTIM) 
					LEFT OUTER JOIN RLARP.VW_FFICSTX ON 
						V6PART = BYPART AND 
						V6PLNT = BYPLNT 
				WHERE 
					BYFSYY = '20' || SUBSTR (VPERD, 1, 2) AND 
					BYFSPR = SUBSTR (VPERD, 3, 2) 
				GROUP BY 
					BYPART, BYPLNT, BYSTOK, SUBSTR (DIGITS (BYFSYY), 3, 2) || DIGITS (BYFSPR), GRP, COALESCE (FCOST, STDCOST) 
				HAVING 
					SUM (BYQTY * CASE BYACTN WHEN 'I' THEN - 1 ELSE 1 END) <> 0 
			) G 
			INNER JOIN RLARP.VW_FFSTKMX ON 
				AVPART = BYPART 
			INNER JOIN LGDAT.PLNT ON 
				YAPLNT = BYPLNT 
			LEFT OUTER JOIN LGDAT.GLIE ON 
				Y1GLEC = AVGLED AND 
				Y1PLNT = BYPLNT 
		GROUP BY 
			YACOMP || Y1INVA, PERD, GRP 
  
		UNION ALL 
  
		SELECT 
			YACOMP || Y1INVA ACCT, G.FSPR PERD, 'COST ROLL' GRP, ROUND (SUM ((TCOST - FCOST) * TQTY), 2) VALUE_LOCAL 
		FROM 
			RLARP.VW_FFGLPD G 
			INNER JOIN RLARP.VW_PRFSPR P ON 
				P.COMP = G.COMP AND 
				P.CURRP = G.FSPR 
			INNER JOIN LGDAT.PLNT ON 
				YACOMP = G.COMP 
			INNER JOIN RLARP.FFCOSTEFFD C ON 
				C.PLNT = YAPLNT AND 
				C.TDT >= SDAT AND 
				C.TDT <= EDAT 
			INNER JOIN RLARP.VW_FFSTKMX ON 
				AVPART = C.PART 
			INNER JOIN LGDAT.GLIE ON 
				Y1PLNT = C.PLNT AND 
				Y1GLEC = AVGLED 
		WHERE 
			G.FSPR = VPERD AND 
			TCOST - FCOST <> 0 AND 
			TQTY <> 0 
		GROUP BY 
			YACOMP || Y1INVA, G.FSPR 
  
		UNION ALL 
  
		SELECT 
			YACOMP || Y1INVA ACCT, 
			CURRP PERD, 
			'OPEN' GRP, 
			ROUND (SUM (QTYOH * COST_EFF), 2) VALUE_LOCAL	 
		FROM 
			RLARP.FFSTKBP 
			INNER JOIN LGDAT.PLNT ON 
				YAPLNT = PLNT 
			INNER JOIN RLARP.VW_PRFSPR ON 
				COMP = YACOMP AND 
				PRIORP = PERD 
			LEFT OUTER JOIN RLARP.VW_FFSTKMX ON 
				AVPART = PART 
			LEFT OUTER JOIN LGDAT.GLIE ON 
				Y1PLNT = PLNT AND 
				Y1GLEC = AVGLED 
		WHERE 
			CURRP = VPERD 
		GROUP BY 
			YACOMP || Y1INVA, CURRP 
  
		UNION ALL 
  
		SELECT 
			YACOMP || Y1INVA ACCT, 
			PERD, 
			'END' GRP, 
			ROUND (SUM (QTYOH * COST_EFF), 2) VALUE_LOCAL	 
		FROM 
			RLARP.FFSTKBP 
			INNER JOIN LGDAT.PLNT ON 
				YAPLNT = PLNT 
			LEFT OUTER JOIN RLARP.VW_FFSTKMX ON 
				AVPART = PART 
			LEFT OUTER JOIN LGDAT.GLIE ON 
				Y1PLNT = PLNT AND 
				Y1GLEC = AVGLED 
		WHERE 
			PERD = VPERD 
		GROUP BY 
			YACOMP || Y1INVA, PERD 
	) X 
	LEFT OUTER JOIN LGDAT.MAST ON 
		AZCOMP || DIGITS (AZGL#1) || DIGITS (AZGL#2) = X.ACCT 
	LEFT OUTER JOIN RLARP.FFCRET C ON 
		FCUR = AZFUT2 AND 
		TCUR = 'US' AND 
		RTYP = 'ME' AND 
		C.PERD = X.PERD  ; 
  
LABEL ON SPECIFIC FUNCTION RLARP.STK_RF_A_USD 
	IS 'STKT Roll-forward with FX impact included' ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.STK_RF_A_USD 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.STK_RF_A_USD 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE FUNCTION RLARP.V_PRWD_JE (
	VPDF VARCHAR(6), 
	VPDT VARCHAR(6)) 
	RETURNS TABLE (
	FLAG VARCHAR(3), 
	ACCT BIGINT, 
	GL_DESCR VARCHAR(60), 
	DEBIT DECIMAL(18, 2), 
	CREDT DECIMAL(18, 2), 
	REV VARCHAR(1), 
	JRNL VARCHAR(5), 
	CURR VARCHAR(2))   
	LANGUAGE SQL 
	SPECIFIC RLARP.V_PRWD_JE 
	NOT DETERMINISTIC 
	READS SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	RETURN 
SELECT 
	 --TB, 
	FLAG, ACCT, GL_DESCR, 
	CASE FLAG WHEN 'HDR' THEN 5 ELSE DEBIT END DEBIT, 
	CREDIT, 
	CASE FLAG WHEN 'HDR' THEN 'N' ELSE '' END REV, 
	CASE FLAG WHEN 'HDR' THEN '120' || TB END JRNL, 
	CASE FLAG WHEN 'HDR' THEN 'US' ELSE '' END CURR 
FROM	 
	(
	SELECT 
		TB, 
		CASE JRNLT WHEN 'HEADER' THEN 'HDR' ELSE 'DTL' END FLAG, 
		CASE JRNLT WHEN 'HEADER' THEN TB ELSE CAST (SUBSTR (CASE JRNLT WHEN 'PRIMAR' THEN A.ACCT ELSE COALESCE (TB, '00') || '0000101002' END, 3, 10) AS BIGINT) END ACCT, 
		CASE JRNLT 
			WHEN 'HEADER' THEN 'ADP WITHDRAWEL FOR WITHHOLDINGS' 
			ELSE PAY_DATE || '-' || ADP_COMP || '-' || 
				CASE JRNLT 
					WHEN 'PRIMAR' THEN R.DESCR ELSE 
					PMNT 
				END 
		END GL_DESCR, 
		CASE WHEN SUM (A.AMOUNT * CASE JRNLT WHEN 'PRIMAR' THEN - 1 ELSE 1 END) >= 0 THEN SUM (A.AMOUNT * CASE JRNLT WHEN 'PRIMAR' THEN - 1 ELSE 1 END) ELSE 0 END DEBIT, 
		CASE WHEN SUM (A.AMOUNT * CASE JRNLT WHEN 'PRIMAR' THEN - 1 ELSE 1 END) < 0 THEN - SUM (A.AMOUNT * CASE JRNLT WHEN 'PRIMAR' THEN - 1 ELSE 1 END) ELSE 0 END CREDIT 
	FROM 
		RLARP.FFPRRP R, 
		RLARP.FFPRCD C, 
		TABLE (VALUES 
			(ACCT, 'PRIMAR', AMOUNT), 
			(ACCT, 'OFFSET', AMOUNT), 
			(ACCT, 'HEADER', AMOUNT) 
		) AS A (ACCT, JRNLT, AMOUNT) 
	WHERE 
		R.DESCR = C.CODE AND 
		R.PO = C.PO AND 
		PAY_DATE >= VPDF AND 
		PAY_DATE <= VPDT AND 
		PMNT IN ('ADP_TAX', 'PRINCIPAL_401K', 'ADP_GARNISHMENTS') 
	GROUP BY	 
		TB, 
		CASE JRNLT WHEN 'HEADER' THEN 'HDR' ELSE 'DTL' END, 
		CASE JRNLT WHEN 'HEADER' THEN TB ELSE CAST (SUBSTR (CASE JRNLT WHEN 'PRIMAR' THEN A.ACCT ELSE COALESCE (TB, '00') || '0000101002' END, 3, 10) AS BIGINT) END, 
		CASE JRNLT 
			WHEN 'HEADER' THEN 'ADP WITHDRAWEL FOR WITHHOLDINGS' 
			ELSE PAY_DATE || '-' || ADP_COMP || '-' || 
				CASE JRNLT 
					WHEN 'PRIMAR' THEN R.DESCR ELSE 
					PMNT 
				END 
		END 
	) X 
ORDER BY X.TB ASC, X.FLAG DESC  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.V_PRWD_JE 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC FUNCTION RLARP.V_PRWD_JE 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.CH_UD () 
	LANGUAGE SQL 
	SPECIFIC RLARP.CH_UD 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
	DECLARE V_ERROR INTEGER ; 
	DECLARE MSG_VAR VARCHAR (255) ; 
	DECLARE RETRN_STATUS INTEGER ; 
	 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION  --,SQLWARNING 
	BEGIN 
		SET V_ERROR = SQLCODE ; 
		GET DIAGNOSTICS RETRN_STATUS = RETURN_STATUS ; 
	 
		IF (V_ERROR IS NULL) OR (V_ERROR <> 0 AND V_ERROR <> 466) OR (RETRN_STATUS > 3) 
		THEN 
			SET MSG_VAR = 'PROC: ' || 'RLARP.CH_UD' || ', ' || COALESCE (MSG_VAR, '') || ', SQLCODE: ' || CHAR (V_ERROR) || ', PARAMS: ' ; 
			 --ROLLBACK; 
			 --COMMIT; 
			SET RETRN_STATUS = - 1 ; 
			SIGNAL SQLSTATE '75001' SET MESSAGE_TEXT = MSG_VAR ; 
		ELSE 
			SET V_ERROR = 0 ; 
		END IF ; 
	END ; 
	 
	 --setup temp table as work file 
	DECLARE GLOBAL TEMPORARY TABLE ISS (PART CHAR (20), PLNT CHAR (3), DT CHAR (10), TM CHAR (8), RCID CHAR (20), NEWC FLOAT, QTY FLOAT, SEQ INT) ; 
  
	 --grab initial records from icstt that have posted after the max stamp on the target file 
	INSERT INTO 
		QTEMP.ISS 
	SELECT 
		JHPART, JHPLNT, CHAR (JHDATE), CHAR (JHTIME), JHRCID, JHTOTN, JHOHQT, 
		ROW_NUMBER () OVER (PARTITION BY JHPART, JHPLNT ORDER BY JHPART, JHPLNT, JHDATE, JHTIME, JHRCID) SEQ 
	FROM 
		LGDAT.ICSTT 
	WHERE 
		JHCTYP = 'S' AND 
		JHDATE >= (SELECT MAX (TDT) FROM RLARP.FFCOSTEFFD) ; 
		 
	 --for each new record, go and get the associated preceding record so as to ensure the "from" cost is being pulled 
	 --correctly as some icstt records are noted as having the wrong "from" cost, so it must be manually built 
	INSERT INTO 
		QTEMP.ISS 
	SELECT 
		JHPART, JHPLNT, CHAR (JHDATE), CHAR (JHTIME), JHRCID, JHTOTN, JHOHQT, 0 SEQ 
	FROM 
		(
			SELECT 
				JHPART PART, JHPLNT PLNT, MAX (JHRCID) RCID 
			FROM 
				(
					 --this listing needs to pull the last record id in ICSTT before the first one in ISS per part/plant 
					SELECT 
						PART, PLNT, MIN (RCID) NID 
					FROM 
						QTEMP.ISS 
					GROUP BY 
						PART, PLNT 
				) X 
				INNER JOIN LGDAT.ICSTT ON 
					JHPART = PART AND 
					JHPLNT = PLNT AND 
					JHCTYP = 'S' AND 
					JHRCID < NID 
				GROUP BY 
					JHPART, JHPLNT 
		) LAST 
	INNER JOIN LGDAT.ICSTT ON 
		JHPART = PART AND 
		JHPLNT = PLNT AND 
		JHRCID = RCID ; 
		 
	 --insert 
	MERGE INTO 
		RLARP.FFCOSTEFFD F 
	USING 
		(
			SELECT 
				T.PART, T.PLNT, 
				IFNULL (F.DT, '0001-01-01') FDT, 
				IFNULL (F.TM, '00:00:00') FTM, 
				IFNULL (F.RCID, '00000000000') FRI, 
				T.DT TDT, T.TM TTM, T.RCID TRI, IFNULL (F.NEWC, 0) FCOST, T.NEWC TCOST, T.QTY TQTY, F.SEQ, T.SEQ 
			FROM 
				QTEMP.ISS T 
				LEFT OUTER JOIN QTEMP.ISS F ON 
					F.PART = T.PART AND 
					F.PLNT = T.PLNT AND 
					F.SEQ = T.SEQ - 1 
			WHERE 
				T.SEQ >= 1 
		) A ON 
			A.PART = F.PART AND 
			A.PLNT = F.PLNT AND 
			A.FRI = F.FRI AND 
			A.TRI = F.TRI 
	WHEN NOT MATCHED THEN 
		INSERT (F.PART, F.PLNT, F.FDT, F.FTM, F.FRI, F.TDT, F.TTM, F.TRI, F.FCOST, F.TCOST, F.TQTY) 
		VALUES (A.PART, A.PLNT, A.FDT, A.FTM, A.FRI, A.TDT, A.TTM, A.TRI, A.FCOST, A.TCOST, A.TQTY) ; 
		 
	 --drop the work file 
	DROP TABLE QTEMP.ISS ; 
END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.CH_UD 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.CH_UD 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.DYN_CING_TB (
	IN VPERD VARCHAR(4)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.DYN_CING_TB 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
  
		DECLARE MC_MAX INT ; 
		DECLARE MC_CNT INT ; 
		DECLARE VTB VARCHAR (2) ; 
		DECLARE VCONS VARCHAR (5) ; 
		DECLARE MC CURSOR FOR SELECT TB, CONS FROM TABLE (RLARP.F_CONS_SEQ ()) X ; 
		DECLARE FC CURSOR WITH RETURN TO CLIENT FOR SELECT * FROM QTEMP.TBW ; 
		 
			 
		 -------temp table to hold intermediate results subject to hierarchacal operation-------- 
		INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'procedure start' FROM SYSIBM.SYSDUMMY1 ; 
		 
		 
		DECLARE GLOBAL TEMPORARY TABLE TBW (
			TB VARCHAR (2), 
			FSYR VARCHAR (4), 
			STAT VARCHAR (1), 
			FGRP VARCHAR (7), 
			GLCC VARCHAR (10), 
			CURR VARCHAR (2), 
			PERD VARCHAR (4), 
			OB DEC (18, 2), 
			NT DEC (18, 2), 
			EB DEC (18, 2), 
			BG DEC (18, 2), 
			FC DEC (18, 2) 
		) ; 
  
  
  
		 ------------insert initial result set--------------- 
		INSERT INTO 
			QTEMP.TBW 
		SELECT 
			SUBSTR (ACCT, 1, 2) TB, 
			AJ4CCYY, AZSTAT, 
			AZGROP, 
			AZFUT3, 
			AZFUT2, 
			PERD, 
			OB, 
			NT, 
			EB, 
			BG, 
			FC 
		FROM	 
			TABLE (RLARP.F_GLMT (VPERD, VPERD)) X 
			INNER JOIN RLARP.VW_FFCOPR ON 
				COMP = SUBSTR (ACCT, 1, 2) 
		WHERE 
			CONS LIKE 'TB%' ; 
		 
		 
		INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'records inserted' FROM SYSIBM.SYSDUMMY1 ; 
  
		 -------------------sequential consolidation list from hierachy---------------- 
		 --F_CONS_SEQ gives in the correct order the sequence of consolidation steps 
		 --the CONS field indicates if the consolidation is either an elimination of and IC balance 
		 --or or a currency translation 
		SELECT COUNT (*) INTO MC_MAX FROM TABLE (RLARP.F_CONS_SEQ ()) X ; 
		INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'count temp file records ' || MC_MAX FROM SYSIBM.SYSDUMMY1 ; 
		SET MC_CNT = 0 ; 
		OPEN MC ; 
		INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'open cursor' FROM SYSIBM.SYSDUMMY1 ; 
		WHILE MC_CNT < MC_MAX DO 
			INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'while condition evaluated' FROM SYSIBM.SYSDUMMY1 ; 
			FETCH MC INTO VTB, VCONS ; 
			INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'fetch compelte' FROM SYSIBM.SYSDUMMY1 ; 
			SET MC_CNT = MC_CNT + 1 ; 
			INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'index counter' FROM SYSIBM.SYSDUMMY1 ; 
			IF SUBSTR (VCONS, 1, 2) = 'IC' THEN 
				 ---------------ELIMINATIONS--------------------------- 
				INSERT INTO 
					QTEMP.TBW 
				SELECT 
					SUBSTR (DIGITS (D35USR4), 9, 2) TB, 
					FSYR, 
					STAT, 
					CASE OS.FLAG 
						WHEN 'CLEAR' THEN FGRP 
						ELSE D35USR2 
					END FGRP, 
					GLCC, 
					CURR, 
					PERD, 
					SUM (CASE OS.FLAG WHEN 'CLEAR' THEN - OB ELSE OB END) OB, 
					SUM (CASE OS.FLAG WHEN 'CLEAR' THEN - NT ELSE NT END) NT, 
					SUM (CASE OS.FLAG WHEN 'CLEAR' THEN - EB ELSE EB END) EB, 
					SUM (CASE OS.FLAG WHEN 'CLEAR' THEN - BG ELSE BG END) BG, 
					SUM (CASE OS.FLAG WHEN 'CLEAR' THEN - FC ELSE FC END) FC 
				FROM 
					QTEMP.TBW W 
					INNER JOIN LGDAT.GGTP G ON 
						D35GCDE = W.GLCC	 
					CROSS JOIN TABLE (VALUES 
						('CLEAR'), 
						('OFFSET') 
					) AS OS (FLAG) 
				WHERE 
					SUBSTR (DIGITS (D35USR4), 9, 2) = VTB AND 
					D35USR4 <> 0 AND 
					FGRP <> D35USR2 
				GROUP BY 
					SUBSTR (DIGITS (D35USR4), 9, 2), 
					FSYR, 
					STAT, 
					CASE OS.FLAG 
						WHEN 'CLEAR' THEN FGRP 
						ELSE D35USR2 
					END, 
					GLCC, 
					CURR, 
					PERD ; 
				INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'insert elimination records' FROM SYSIBM.SYSDUMMY1 ; 
			ELSEIF SUBSTR (VCONS, 1, 2) = 'FX' THEN 
				 ---------------CURRENCY TRANSLATION------------------- 
				INSERT INTO 
					QTEMP.TBW 
				SELECT 
					VTB, FSYR, STAT, 
					CASE CF.FLAG WHEN 'ADJ' THEN W.FGRP ELSE '33020' END FGRP, 
					CASE CF.FLAG WHEN 'ADJ' THEN GLCC ELSE 'E00' END GLCC, 
					W.CURR, 
					W.PERD, 
					SUM (ROUND (OB * RATE - OB, 2) * CASE FLAG WHEN 'OFFSET' THEN - 1 ELSE 1 END) OB, 
					SUM (ROUND (NT * RATE - NT, 2) * CASE FLAG WHEN 'OFFSET' THEN - 1 ELSE 1 END) NT, 
					SUM (ROUND (EB * RATE - EB, 2) * CASE FLAG WHEN 'OFFSET' THEN - 1 ELSE 1 END) EB, 
					SUM (ROUND (BG * RATE - BG, 2) * CASE FLAG WHEN 'OFFSET' THEN - 1 ELSE 1 END) BG, 
					SUM (ROUND (FC * RATE - FC, 2) * CASE FLAG WHEN 'OFFSET' THEN - 1 ELSE 1 END) FC 
				FROM 
					TABLE (RLARP.F_CHILD_TB (VTB)) X 
					INNER JOIN QTEMP.TBW W ON 
						W.TB = X.COMP 
					CROSS JOIN TABLE (VALUES 
						('ADJ'), 
						('OFFSET') 
					) AS CF (FLAG) 
					INNER JOIN RLARP.VW_FFCOPR CP ON 
						CP.COMP = VTB 
					LEFT OUTER JOIN RLARP.FFCRET E ON 
						E.FCUR = W.CURR AND 
						E.TCUR = CP.CURR AND 
						E.RTYP = CASE WHEN SUBSTRING (W.FGRP, 1, 1) <= '3' THEN 'ME' ELSE 'MA' END AND 
						E.PERD = W.PERD 
				GROUP BY 
					VTB, FSYR, STAT, 
					CASE CF.FLAG WHEN 'ADJ' THEN W.FGRP ELSE '33020' END, 
					CASE CF.FLAG WHEN 'ADJ' THEN GLCC ELSE 'E00' END, 
					W.CURR, 
					W.PERD ; 
				INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'insert translation records' FROM SYSIBM.SYSDUMMY1 ; 
			END IF ; 
			INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'end if' FROM SYSIBM.SYSDUMMY1 ; 
		END WHILE ; 
		INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'end while' FROM SYSIBM.SYSDUMMY1 ; 
		CLOSE MC ; 
		INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'close mc' FROM SYSIBM.SYSDUMMY1 ; 
		OPEN FC ; 
  
	END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.DYN_CING_TB 
TO PTROWBRIDG ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.DYN_CING_TB_R1 (
	IN VPERD VARCHAR(4)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.DYN_CING_TB_R1 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
  
		DECLARE MC_MAX INT ; 
		DECLARE MC_CNT INT ; 
		DECLARE VTB VARCHAR (2) ; 
		DECLARE VCONS VARCHAR (5) ; 
		DECLARE MC CURSOR FOR SELECT TB, CONS FROM TABLE (RLARP.F_CONS_SEQ ()) X ; 
		DECLARE FC CURSOR WITH RETURN TO CLIENT FOR 
		SELECT 
			W.*, F.FSTMT, F.FLVL0, F.FLVL1, F.FLVL2, F.FLVL3, H.L1, H.L2, H.L3, H.L4 
		FROM 
			QTEMP.TBW W 
			INNER JOIN RLARP.V_FGRP F ON 
				F.FGRP = W.FGRP 
			LEFT OUTER JOIN TABLE (RLARP.F_CONSH ('19')) H ON	 
				H.TB = W.TB ; 
		 
			 
		 -------temp table to hold intermediate results subject to hierarchacal operation-------- 
		INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'procedure start' FROM SYSIBM.SYSDUMMY1 ; 
		 
		 
		DECLARE GLOBAL TEMPORARY TABLE TBW (
			TB VARCHAR (2), 
			FSYR VARCHAR (4), 
			STAT VARCHAR (1), 
			FGRP VARCHAR (7), 
			GLCC VARCHAR (10), 
			ACCT VARCHAR (12), 
			CURR VARCHAR (2), 
			PERD VARCHAR (4), 
			OB DEC (18, 2), 
			NT DEC (18, 2), 
			EB DEC (18, 2), 
			BG DEC (18, 2), 
			FC DEC (18, 2) 
		) ; 
  
  
  
		 ------------insert initial result set--------------- 
		INSERT INTO 
			QTEMP.TBW 
		SELECT 
			SUBSTR (ACCT, 1, 2) TB, 
			AJ4CCYY, 
			AZSTAT, 
			AZGROP, 
			AZFUT3, 
			ACCT, 
			AZFUT2, 
			PERD, 
			OB, 
			NT, 
			EB, 
			BG, 
			FC 
		FROM	 
			TABLE (RLARP.F_GLMT (VPERD, VPERD)) X 
			INNER JOIN RLARP.VW_FFCOPR ON 
				COMP = SUBSTR (ACCT, 1, 2) 
		WHERE 
			CONS LIKE 'TB%' ; 
		 
		 
		INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'records inserted' FROM SYSIBM.SYSDUMMY1 ; 
  
		 -------------------sequential consolidation list from hierachy---------------- 
		 --F_CONS_SEQ gives in the correct order the sequence of consolidation steps 
		 --the CONS field indicates if the consolidation is either an elimination of and IC balance 
		 --or or a currency translation 
		SELECT COUNT (*) INTO MC_MAX FROM TABLE (RLARP.F_CONS_SEQ ()) X ; 
		INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'count temp file records ' || MC_MAX FROM SYSIBM.SYSDUMMY1 ; 
		SET MC_CNT = 0 ; 
		OPEN MC ; 
		INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'open cursor' FROM SYSIBM.SYSDUMMY1 ; 
		WHILE MC_CNT < MC_MAX DO 
			INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'while condition evaluated' FROM SYSIBM.SYSDUMMY1 ; 
			FETCH MC INTO VTB, VCONS ; 
			INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'fetch compelte' FROM SYSIBM.SYSDUMMY1 ; 
			SET MC_CNT = MC_CNT + 1 ; 
			INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'index counter' FROM SYSIBM.SYSDUMMY1 ; 
			IF SUBSTR (VCONS, 1, 2) = 'IC' THEN 
				 ---------------ELIMINATIONS--------------------------- 
				INSERT INTO 
					QTEMP.TBW 
				SELECT 
					SUBSTR (DIGITS (D35USR4), 9, 2) TB, 
					FSYR, 
					STAT, 
					CASE OS.FLAG 
						WHEN 'CLEAR' THEN FGRP 
						ELSE D35USR2 
					END FGRP, 
					GLCC, 
					W.ACCT, 
					CURR, 
					PERD, 
					SUM (CASE OS.FLAG WHEN 'CLEAR' THEN - OB ELSE OB END) OB, 
					SUM (CASE OS.FLAG WHEN 'CLEAR' THEN - NT ELSE NT END) NT, 
					SUM (CASE OS.FLAG WHEN 'CLEAR' THEN - EB ELSE EB END) EB, 
					SUM (CASE OS.FLAG WHEN 'CLEAR' THEN - BG ELSE BG END) BG, 
					SUM (CASE OS.FLAG WHEN 'CLEAR' THEN - FC ELSE FC END) FC 
				FROM 
					QTEMP.TBW W 
					INNER JOIN LGDAT.GGTP G ON 
						D35GCDE = W.GLCC	 
					CROSS JOIN TABLE (VALUES 
						('CLEAR'), 
						('OFFSET') 
					) AS OS (FLAG) 
				WHERE 
					SUBSTR (DIGITS (D35USR4), 9, 2) = VTB AND 
					D35USR4 <> 0 AND 
					FGRP <> D35USR2 
				GROUP BY 
					SUBSTR (DIGITS (D35USR4), 9, 2), 
					FSYR, 
					STAT, 
					CASE OS.FLAG 
						WHEN 'CLEAR' THEN FGRP 
						ELSE D35USR2 
					END, 
					GLCC, 
					W.ACCT, 
					CURR, 
					PERD ; 
				INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'insert elimination records' FROM SYSIBM.SYSDUMMY1 ; 
			ELSEIF SUBSTR (VCONS, 1, 2) = 'FX' THEN 
				 ---------------CURRENCY TRANSLATION------------------- 
				INSERT INTO 
					QTEMP.TBW 
				SELECT 
					VTB, 
					FSYR, 
					STAT, 
					CASE CF.FLAG WHEN 'ADJ' THEN W.FGRP ELSE '33020' END FGRP, 
					CASE CF.FLAG WHEN 'ADJ' THEN GLCC ELSE 'E00' END GLCC, 
					W.ACCT, 
					W.CURR, 
					W.PERD, 
					SUM (ROUND (OB * RATE - OB, 2) * CASE FLAG WHEN 'OFFSET' THEN - 1 ELSE 1 END) OB, 
					SUM (ROUND (NT * RATE - NT, 2) * CASE FLAG WHEN 'OFFSET' THEN - 1 ELSE 1 END) NT, 
					SUM (ROUND (EB * RATE - EB, 2) * CASE FLAG WHEN 'OFFSET' THEN - 1 ELSE 1 END) EB, 
					SUM (ROUND (BG * RATE - BG, 2) * CASE FLAG WHEN 'OFFSET' THEN - 1 ELSE 1 END) BG, 
					SUM (ROUND (FC * RATE - FC, 2) * CASE FLAG WHEN 'OFFSET' THEN - 1 ELSE 1 END) FC 
				FROM 
					TABLE (RLARP.F_CHILD_TB (VTB)) X 
					INNER JOIN QTEMP.TBW W ON 
						W.TB = X.COMP 
					CROSS JOIN TABLE (VALUES 
						('ADJ'), 
						('OFFSET') 
					) AS CF (FLAG) 
					INNER JOIN RLARP.VW_FFCOPR CP ON 
						CP.COMP = VTB 
					LEFT OUTER JOIN RLARP.FFCRET E ON 
						E.FCUR = W.CURR AND 
						E.TCUR = CP.CURR AND 
						E.RTYP = CASE WHEN SUBSTRING (W.FGRP, 1, 1) <= '3' THEN 'ME' ELSE 'MA' END AND 
						E.PERD = W.PERD 
				GROUP BY 
					VTB, FSYR, STAT, 
					CASE CF.FLAG WHEN 'ADJ' THEN W.FGRP ELSE '33020' END, 
					CASE CF.FLAG WHEN 'ADJ' THEN GLCC ELSE 'E00' END, 
					W.ACCT, 
					W.CURR, 
					W.PERD ; 
				INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'insert translation records' FROM SYSIBM.SYSDUMMY1 ; 
			END IF ; 
			INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'end if' FROM SYSIBM.SYSDUMMY1 ; 
		END WHILE ; 
		INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'end while' FROM SYSIBM.SYSDUMMY1 ; 
		CLOSE MC ; 
		INSERT INTO RLARP.FFLOG SELECT SESSION_USER, CURRENT TIMESTAMP, 'close mc' FROM SYSIBM.SYSDUMMY1 ; 
		OPEN FC ; 
  
	END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.DYN_CING_TB_R1 
TO PTROWBRIDG ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.FF_PSXD_01 (
	IN XPART VARCHAR(20), 
	IN XPLNT CHAR(3)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.FF_PSXD_01 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
	 --PRODUCT STRUCTURE EXPLOSION DETAILS-- 
	 --REVISION LEVEL 1 
	 ---------------------------------------------------------------------------------------------------------------------------------------- 
	 --This result set explodes the METHDM bill of materials along the STKA.V6RPLN procurement path and 
	 --links in the routings & burden rates to get to a detailed rebuild of the product cost. 
	 --The explosion method is a recursive CTE (common table expression) that operates like a self join. 
	 --the explosion stops if it encounters a replenishment type 2 or exceeds 10 levels which is interpreted as an infinite loop somewhere 
	 --the last select breaks out all possible data points 
	 --duty, shipping and warehousing on the ICSTR file and the misc1 & 2 cost categories functions are not known but included here anyways 
	 --it is assumed any conversion issues are handled in a single step by the PUNIT file, which doesn't always have a single step conversion 
	 ---------------------------------------------------------------------------------------------------------------------------------------- 
DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR 
WITH RECURSIVE PSE 
	(
		 ------------EXPLOSION TRACKING---------------- 
		LVL, PLINE, CLINE, MAST, PRNT, CHLD, 
		 ------------PROCUREMENT----------------------- 
		STAT, REPL, 
		 ------------ROUTING--------------------------- 
		SEQ, DEP, RESC, OPC, REPP, REFF, XREFF, 
		 ------------BILL OF MATERIALS----------------- 
		RQBY, BACK, SCRP, EFF, QTY, BQTY, RQTY, ERQTY, 
		 ------------UOM CONVERSIONS------------------- 
		UNTI, BUOM, CONV, 
		 ------------SOURCING-------------------------- 
		CPLNT, SPLNT, 
		 ------------CURRENCY-------------------------- 
		CPC, SPC, FXR 
	) AS 
(
SELECT 
	0, 
	VARCHAR (SUBSTR (DIGITS (INT (RANK () OVER (ORDER BY A.V6PART ASC, A.V6PLNT ASC))), 6, 5), 100) || 
	CASE WHEN AOSEQ# < 10 
		THEN SUBSTR (DIGITS (- AOSEQ# + 9), 2, 3) 
		ELSE '' 
	END AS PLINE, 
	VARCHAR (SUBSTR (DIGITS (INT (RANK () OVER (ORDER BY A.V6PART ASC, A.V6PLNT ASC))), 6, 5), 100) || SUBSTR (DIGITS (- AOSEQ# + 10), 2, 3) AS CLINE, 
	A.V6PART, 
	A.V6PART, 
	A.V6PART, 
	A.V6STAT, 
	A.V6RPLN, 
	AOSEQ#, 
	AODEPT, 
	COALESCE (APVEND, AORESC), 
	COALESCE (APODES, AOOPNM), 
	AOREPP, 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	'R', 
	' ', 
	1, 
	1, 
	1, 
	1, 
	1, 
	1, 
	A.V6UNTI, 
	A.V6UNTI, 
	FLOAT (1), 
	A.V6PLNT, 
	CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END, 
	SUBSTR (CC.A215, 152, 2), 
	SUBSTR (SC.A215, 152, 2), 
	B86SRTE 
FROM 
	LGDAT.STKA A 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = A.V6PART AND 
		AOPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END AND 
		A.V6RPLN = 1 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = A.V6PART AND 
		APPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END 
	LEFT OUTER JOIN LGDAT.PLNT CP ON 
		CP.YAPLNT = A.V6PLNT 
	LEFT OUTER JOIN LGDAT.PLNT SP ON 
		SP.YAPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END 
	LEFT OUTER JOIN LGDAT.CODE CC ON 
		LTRIM (RTRIM (CC.A9)) = CP.YACOMP AND 
		CC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CODE SC ON 
		LTRIM (RTRIM (SC.A9)) = SP.YACOMP AND 
		SC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CRET ON 
		B86COMN = SP.YACOMP AND 
		B86CURC = SUBSTR (CC.A215, 152, 2) AND 
		B86RTTY = 'S' 
	 
WHERE 
	A.V6PART = XPART AND 
	A.V6PLNT = XPLNT 
  
UNION ALL 
  
SELECT 
	PSE.LVL + 1, 
	CASE WHEN AOSEQ# < 10 
		THEN PSE.CLINE || '-' || REPEAT ('0', 3 - LENGTH (VARCHAR (M.AQLIN#))) || VARCHAR (M.AQLIN#) || SUBSTR (DIGITS (COALESCE (- AOSEQ# + 9, AQSEQ#)), 2, 3) 
		ELSE VARCHAR (PSE.CLINE, 100) 
	END, 
	PSE.CLINE || '-' || REPEAT ('0', 3 - LENGTH (VARCHAR (M.AQLIN#))) || VARCHAR (M.AQLIN#) || SUBSTR (DIGITS (COALESCE (- AOSEQ# + 10, AQSEQ#)), 2, 3), 
	PSE.MAST, 
	PSE.CHLD, 
	M.AQMTLP, 
	A.V6STAT, 
	A.V6RPLN, 
	COALESCE (AOSEQ#, AQSEQ#), 
	AODEPT, 
	COALESCE (APVEND, AORESC), 
	COALESCE (APODES, AOOPNM), 
	AOREPP, 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8) * PSE.XREFF, 
	M.AQRQBY, 
	M.AQBACK, 
	FLOAT (1 - M.AQSCRP / 100), 
	1, 
	M.AQQPPC, 
	M.AQQTYM, 
	FLOAT (M.AQQPPC / M.AQQTYM) / FLOAT (1 - M.AQSCRP / 100) * CASE M.AQRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
	FLOAT (M.AQQPPC / M.AQQTYM) * FLOAT (PSE.ERQTY) / FLOAT (1 - M.AQSCRP / 100) * CASE M.AQRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
	A.V6UNTI, 
	M.AQUNIT, 
	FLOAT (COALESCE (U.MULT_BY, 1)) * FLOAT (COALESCE (U2.MULT_BY, 1)) * PSE.CONV, 
	M.AQPLNT, 
	CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE M.AQPLNT END, 
	SUBSTR (CC.A215, 152, 2), 
	SUBSTR (SC.A215, 152, 2), 
	B86SRTE * PSE.FXR 
FROM 
	PSE PSE 
	INNER JOIN LGDAT.METHDM M ON 
		M.AQPART = PSE.CHLD AND 
		M.AQPLNT = PSE.SPLNT AND 
		M.AQSEQ# = IFNULL (PSE.SEQ, M.AQSEQ#) 
	LEFT OUTER JOIN LGDAT.STKA A ON 
		A.V6PART = M.AQMTLP AND 
		A.V6PLNT = M.AQPLNT 
	LEFT OUTER JOIN LGDAT.STKA A2 ON 
		A2.V6PART = M.AQMTLP AND 
		A2.V6PLNT = A.V6TPLN 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = M.AQMTLP AND 
		AOPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END AND 
		A.V6RPLN = '1' 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = M.AQMTLP AND 
		APPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END 
	LEFT OUTER JOIN 
	(
	SELECT 
		IHUNT1 AS UNT1, IHUNT2 AS UNT2, IHCNV2 / IHCNV1 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
  
	UNION ALL 
  
	SELECT 
		IHUNT2 AS UNT1, IHUNT1 AS UNT2, IHCNV1 / IHCNV2 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
	) U ON 
		U.UNT1 = M.AQUNIT AND 
		U.UNT2 = A.V6UNTI 
	LEFT OUTER JOIN 
	(
	SELECT 
		IHUNT1 AS UNT1, IHUNT2 AS UNT2, IHCNV2 / IHCNV1 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
  
	UNION ALL 
  
	SELECT 
		IHUNT2 AS UNT1, IHUNT1 AS UNT2, IHCNV1 / IHCNV2 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
	) U2 ON 
		LTRIM (RTRIM (U2.UNT1)) = A.V6UNTI AND 
		LTRIM (RTRIM (U2.UNT2)) = A2.V6UNTI 
	LEFT OUTER JOIN LGDAT.PLNT CP ON 
		CP.YAPLNT = M.AQPLNT 
	LEFT OUTER JOIN LGDAT.PLNT SP ON 
		SP.YAPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE M.AQPLNT END 
	LEFT OUTER JOIN LGDAT.CODE CC ON 
		LTRIM (RTRIM (CC.A9)) = CP.YACOMP AND 
		CC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CODE SC ON 
		LTRIM (RTRIM (SC.A9)) = SP.YACOMP AND 
		SC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CRET ON 
		B86COMN = SP.YACOMP AND 
		B86CURC = SUBSTR (CC.A215, 152, 2) AND 
		B86RTTY = 'S'		 
WHERE 
	LVL <= 10 
	AND PSE.REPL <> '2' 
	 
  
) 
SELECT 
	REPEAT ('.  ', LVL) || LVL AS TLVL, 
	REPEAT ('.  ', LVL) || CHLD, 
	REPEAT ('.  ', LVL) || COALESCE (AWDES1, AVDES1), 
	PLINE, CLINE, 
	CPLNT, 
	STAT, REPL, SPLNT, SEQ, DEP, RESC, OPC, AOREPP, 
	REFF, XREFF, 
	RQBY, BACK, 
	 --IFNULL(MM.AVMAJG,MP.AWMAJG) MAJG, 
	 --IFNULL(MM.AVMING,MP.AWMING)||' - '||RTRIM(MMGP.BRDES) MING, 
	 --IFNULL(MM.AVGLCD,MP.AWGLDC) GLCD, 
	 --IFNULL(MM.AVGLED,MP.AWGLED) GLED, 
	SCRP, 
	 --QTY, BQTY, 
	RQTY, ERQTY, UNTI, BUOM, CONV, 
	CPC, SPC, 
	 --FXR, 
	 --COALESCE(IP.CHCURR, IR.Y0FUT1) AS CURR, 
	CHAR (COALESCE (IP.CHSDAT, IR.Y0SDAT, IM.CGSDAT)) DT, 
	IP.CHSUC BASE, 
	IP.CHSFC FRT, 
	IP.CHSDC DUTY, 
	IP.CHS1C MISC1, 
	IP.CHS2C MISC2, 
	COALESCE (IP.CHSCC, IR.Y0SOC) AS CURR, 
	IR.Y0SSHC "S&H", 
	APFCSO "FRT-TO", 
	APFCSI "FRT-FROM", 
	APUNCS SUBC, 
	AORUNS RUNTIME, 
	AO#MEN / AO#MCH RUNCREW, 
	AOSETP SETTIME, 
	AOSCRW SETCREW, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END LABRATE, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END FIXRATE, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END VARRATE, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH LABRUN, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS FIXRUN, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS VARRUN, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR LABSET, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR FIXSET, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR VARSET, 
	 ----------EXTENDED VALUES---------- 
	IP.CHSUC * ERQTY BASEX, 
	IP.CHSFC * ERQTY FRTX, 
	COALESCE (IP.CHSCC, IR.Y0SOC) * ERQTY AS CURRX, 
	(IP.CHSDC + IP.CHS1C + IP.CHS2C + IR.Y0SSHC + APFCSO + APFCSI) * ERQTY OTHMX, 
	APUNCS * ERQTY SUBCX, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH * ERQTY LABRX, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS * ERQTY FIXRX, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS * ERQTY VARRX, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR * ERQTY LABSX, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR * ERQTY FIXSX, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR * ERQTY VARSX, 
	 --------SCRAP---------- 
	IP.CHSUC * ERQTY * (1 / XREFF - 1) BASEXS, 
	IP.CHSFC * ERQTY * (1 / XREFF - 1) FRTXS, 
	COALESCE (IP.CHSCC, IR.Y0SOC) * ERQTY * (1 / XREFF - 1) AS CURRXS, 
	(IP.CHSDC + IP.CHS1C + IP.CHS2C + IR.Y0SSHC + APFCSO + APFCSI) * ERQTY * (1 / XREFF - 1) OTHMXS, 
	APUNCS * ERQTY * (1 / XREFF - 1) SUBCXS, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH * ERQTY * (1 / XREFF - 1) LABRXS, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS * ERQTY * (1 / XREFF - 1) FIXRXS, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS * ERQTY * (1 / XREFF - 1) VARRXS, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR * ERQTY * (1 / XREFF - 1) LABSXS, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR * ERQTY * (1 / XREFF - 1) FIXSXS, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR * ERQTY * (1 / XREFF - 1) VARSXS 
FROM 
	PSE PSE 
	LEFT OUTER JOIN LGDAT.ICSTM IM ON 
		IM.CGPART = PSE.CHLD AND 
		IM.CGPLNT = PSE.SPLNT 
	LEFT OUTER JOIN LGDAT.ICSTP IP ON 
		IP.CHPART = PSE.CHLD AND 
		IP.CHPLNT = PSE.SPLNT 
	LEFT OUTER JOIN LGDAT.ICSTR IR ON 
		IR.Y0PART = PSE.CHLD AND 
		IR.Y0PLNT = PSE.CPLNT 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = CHLD AND 
		APPLNT = SPLNT AND 
		APSEQ# = SEQ AND 
		APVEND = RESC 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = CHLD AND 
		AOPLNT = SPLNT AND 
		AOSEQ# = SEQ AND 
		REPL = '1' 
	LEFT OUTER JOIN LGDAT.STKA ON 
		V6PART = CHLD AND 
		V6PLNT = SPLNT 
	LEFT OUTER JOIN LGDAT.RESRE ON 
		ABPLNT = SPLNT AND 
		ABRESC = RESC 
	LEFT OUTER JOIN LGDAT.DEPTS ON 
		ABDEPT = AADEPT 
	LEFT OUTER JOIN LGDAT.STKMM MM ON 
		MM.AVPART = PSE.CHLD 
	LEFT OUTER JOIN LGDAT.STKMP MP ON 
		MP.AWPART = PSE.CHLD 
	LEFT OUTER JOIN LGDAT.MMGP MMGP ON 
		MMGP.BRMGRP = COALESCE (AWMING, AVMING) AND 
		MMGP.BRGRP = COALESCE (AWMAJG, AVMAJG) 
ORDER BY CLINE ASC ; 
OPEN C1 ; 
END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.FF_PSXD_01 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.FF_PSXD_01 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.FF_PSXD_02 (
	IN XPART VARCHAR(20), 
	IN XPLNT CHAR(3)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.FF_PSXD_02 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
--PRODUCT STRUCTURE EXPLOSION DETAILS-- 
--REVISION LEVEL 1 
---------------------------------------------------------------------------------------------------------------------------------------- 
--This result set explodes the METHDM bill of materials along the STKA.V6RPLN procurement path and 
--links in the routings & burden rates to get to a detailed rebuild of the product cost. 
--The explosion method is a recursive CTE (common table expression) that operates like a self join. 
--the explosion stops if it encounters a replenishment type 2 or exceeds 10 levels which is interpreted as an infinite loop somewhere 
--the last select breaks out all possible data points 
--duty, shipping and warehousing on the ICSTR file and the misc1 & 2 cost categories functions are not known but included here anyways 
--it is assumed any conversion issues are handled in a single step by the PUNIT file, which doesn't always have a single step conversion 
---------------------------------------------------------------------------------------------------------------------------------------- 
DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR 
  
WITH RECURSIVE PSE 
	(
		 ------------EXPLOSION TRACKING---------------- 
		LVL, PLINE, CLINE, MAST, MPLT, PRNT, CHLD, 
		 ------------PROCUREMENT----------------------- 
		STAT, REPL, 
		 ------------ROUTING--------------------------- 
		SEQ, DEP, RESC, OPC, REPP, REFF, XREFF, 
		 ------------BILL OF MATERIALS----------------- 
		RQBY, BACK, SCRP, EFF, QTY, BQTY, RQTY, ERQTY, 
		 ------------UOM CONVERSIONS------------------- 
		UNTI, BUOM, CONV, 
		 ------------SOURCING-------------------------- 
		CPLNT, SPLNT, 
		 ------------CURRENCY-------------------------- 
		CPC, SPC, FXR 
	) AS 
(
SELECT 
	0, 
	VARCHAR (SUBSTR (DIGITS (INT (RANK () OVER (ORDER BY A.V6PART ASC, A.V6PLNT ASC))), 6, 5), 100) || 
	CASE WHEN AOSEQ# < 10 
		THEN SUBSTR (DIGITS (- AOSEQ# + 9), 2, 3) 
		ELSE '' 
	END AS PLINE, 
	VARCHAR (SUBSTR (DIGITS (INT (RANK () OVER (ORDER BY A.V6PART ASC, A.V6PLNT ASC))), 6, 5), 100) || SUBSTR (DIGITS (- AOSEQ# + 10), 2, 3) AS CLINE, 
	A.V6PART, 
	A.V6PLNT, 
	A.V6PART, 
	A.V6PART, 
	A.V6STAT, 
	A.V6RPLN, 
	AOSEQ#, 
	AODEPT, 
	COALESCE (APVEND, AORESC), 
	COALESCE (APODES, AOOPNM), 
	AOREPP, 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	'R', 
	' ', 
	1, 
	1, 
	1, 
	1, 
	1, 
	1, 
	A.V6UNTI, 
	A.V6UNTI, 
	FLOAT (1), 
	A.V6PLNT, 
	CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END, 
	SUBSTR (CC.A215, 152, 2), 
	SUBSTR (SC.A215, 152, 2), 
	B86SRTE 
FROM 
	LGDAT.STKA A 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = A.V6PART AND 
		AOPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = A.V6PART AND 
		APPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END AND 
		A.V6RPLN = 1 
	LEFT OUTER JOIN LGDAT.PLNT CP ON 
		CP.YAPLNT = A.V6PLNT 
	LEFT OUTER JOIN LGDAT.PLNT SP ON 
		SP.YAPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END 
	LEFT OUTER JOIN LGDAT.CODE CC ON 
		LTRIM (RTRIM (CC.A9)) = CP.YACOMP AND 
		CC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CODE SC ON 
		LTRIM (RTRIM (SC.A9)) = SP.YACOMP AND 
		SC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CRET ON 
		B86COMN = SP.YACOMP AND 
		B86CURC = SUBSTR (CC.A215, 152, 2) AND 
		B86RTTY = 'S' 
WHERE 
	V6PART = XPART AND 
	V6PLNT = XPLNT 
  
UNION ALL 
  
SELECT 
	PSE.LVL + 1, 
	CASE WHEN AOSEQ# < 10 
		THEN PSE.CLINE || '-' || REPEAT ('0', 3 - LENGTH (VARCHAR (M.AQLIN#))) || VARCHAR (M.AQLIN#) || SUBSTR (DIGITS (COALESCE (- AOSEQ# + 9, AQSEQ#)), 2, 3) 
		ELSE VARCHAR (PSE.CLINE, 100) 
	END, 
	PSE.CLINE || '-' || REPEAT ('0', 3 - LENGTH (VARCHAR (M.AQLIN#))) || VARCHAR (M.AQLIN#) || SUBSTR (DIGITS (COALESCE (- AOSEQ# + 10, AQSEQ#)), 2, 3), 
	PSE.MAST, 
	PSE.MPLT, 
	PSE.CHLD, 
	M.AQMTLP, 
	A.V6STAT, 
	A.V6RPLN, 
	COALESCE (AOSEQ#, AQSEQ#), 
	AODEPT, 
	COALESCE (APVEND, AORESC), 
	COALESCE (APODES, AOOPNM), 
	AOREPP, 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8) * PSE.XREFF, 
	M.AQRQBY, 
	M.AQBACK, 
	FLOAT (1 - M.AQSCRP / 100), 
	1, 
	M.AQQPPC, 
	M.AQQTYM, 
	FLOAT (M.AQQPPC / M.AQQTYM) / FLOAT (1 - M.AQSCRP / 100) * CASE M.AQRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
	FLOAT (M.AQQPPC / M.AQQTYM) * FLOAT (PSE.ERQTY) / FLOAT (1 - M.AQSCRP / 100) * CASE M.AQRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
	A.V6UNTI, 
	M.AQUNIT, 
	FLOAT (COALESCE (U.MULT_BY, 1)) * FLOAT (COALESCE (U2.MULT_BY, 1)) * PSE.CONV, 
	M.AQPLNT, 
	CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE M.AQPLNT END, 
	SUBSTR (CC.A215, 152, 2), 
	SUBSTR (SC.A215, 152, 2), 
	B86SRTE * PSE.FXR 
FROM 
	PSE PSE 
	INNER JOIN LGDAT.METHDM M ON 
		M.AQPART = PSE.CHLD AND 
		M.AQPLNT = PSE.SPLNT AND 
		M.AQSEQ# = IFNULL (PSE.SEQ, M.AQSEQ#) AND 
		 ----------MOD 10/20/15------------- 
		PSE.REPL <> '2' 
	LEFT OUTER JOIN LGDAT.STKA A ON 
		A.V6PART = M.AQMTLP AND 
		A.V6PLNT = M.AQPLNT 
	LEFT OUTER JOIN LGDAT.STKA A2 ON 
		A2.V6PART = M.AQMTLP AND 
		A2.V6PLNT = A.V6TPLN 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = M.AQMTLP AND 
		AOPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = M.AQMTLP AND 
		APPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END AND 
		A.V6RPLN = 1 
	LEFT OUTER JOIN 
	(
	SELECT 
		IHUNT1 AS UNT1, IHUNT2 AS UNT2, IHCNV2 / IHCNV1 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
  
	UNION ALL 
  
	SELECT 
		IHUNT2 AS UNT1, IHUNT1 AS UNT2, IHCNV1 / IHCNV2 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
	) U ON 
		U.UNT1 = M.AQUNIT AND 
		U.UNT2 = A.V6UNTI 
	LEFT OUTER JOIN 
	(
	SELECT 
		IHUNT1 AS UNT1, IHUNT2 AS UNT2, IHCNV2 / IHCNV1 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
  
	UNION ALL 
  
	SELECT 
		IHUNT2 AS UNT1, IHUNT1 AS UNT2, IHCNV1 / IHCNV2 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
	) U2 ON 
		LTRIM (RTRIM (U2.UNT1)) = A.V6UNTI AND 
		LTRIM (RTRIM (U2.UNT2)) = A2.V6UNTI 
	LEFT OUTER JOIN LGDAT.PLNT CP ON 
		CP.YAPLNT = M.AQPLNT 
	LEFT OUTER JOIN LGDAT.PLNT SP ON 
		SP.YAPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE M.AQPLNT END 
	LEFT OUTER JOIN LGDAT.CODE CC ON 
		LTRIM (RTRIM (CC.A9)) = CP.YACOMP AND 
		CC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CODE SC ON 
		LTRIM (RTRIM (SC.A9)) = SP.YACOMP AND 
		SC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CRET ON 
		B86COMN = SP.YACOMP AND 
		B86CURC = SUBSTR (CC.A215, 152, 2) AND 
		B86RTTY = 'S'		 
WHERE 
	LVL <= 10 
	AND PSE.REPL <> '4' 
) 
  
SELECT 
	MAST, 
	MPLT, 
	REPEAT ('.  ', LVL) || LVL AS TLVL, 
	REPEAT ('.  ', LVL) || CHLD TPART, 
	REPEAT ('.  ', LVL) || COALESCE (AWDES1, AVDES1) DESCR, 
	PLINE, 
	CLINE, 
	PSE.CHLD PART, 
	CPLNT, 
	STAT, REPL, SPLNT, SEQ, AAOSRV OUTS, DEP, RESC, OPC, AOREPP, 
	REFF, XREFF, 
	RQBY, BACK, 
	IFNULL (MM.AVMAJG, MP.AWMAJG) MAJG, 
	IFNULL (MM.AVMING, MP.AWMING) || ' - ' || RTRIM (MMGP.BRDES) MING, 
	IFNULL (MM.AVGLCD, MP.AWGLDC) GLCD, 
	IFNULL (MM.AVGLED, MP.AWGLED) GLED, 
	SCRP, 
	 --QTY, BQTY, 
	RQTY, 
	ERQTY, 
	ERQTY * (1 / XREFF - 1) ERQTYS, 
	UNTI, BUOM, CONV, 
	CPC, SPC, 
	 --FXR, 
	 --COALESCE(IP.CHCURR, IR.Y0FUT1) AS CURR, 
	CHAR (COALESCE (IP.CHSDAT, IR.Y0SDAT, IM.CGSDAT)) DT, 
	IP.CHSUC BASE, 
	IP.CHSFC FRT, 
	IP.CHSDC DUTY, 
	IP.CHS1C MISC1, 
	IP.CHS2C MISC2, 
	 -------------------------MOD 10/20/15----------------------------- 
	CASE REPL WHEN '2' THEN IP.CHSCC WHEN '3' THEN IR.Y0SOC ELSE 0 END AS CURR, 
	IR.Y0SSHC "S&H", 
	APFCSO "FRT-TO", 
	APFCSI "FRT-FROM", 
	APUNCS SUBC, 
	AORUNS RUNTIME, 
	AO#MEN / AO#MCH RUNCREW, 
	AOSETP SETTIME, 
	V6OPTR RUNSIZE, 
	AOSCRW SETCREW, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END LABRATE, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END FIXRATE, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END VARRATE, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH LABRUN, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS FIXRUN, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS VARRUN, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR LABSET, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR FIXSET, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR VARSET, 
	 ----------EXTENDED VALUES---------- 
	IP.CHSUC * ERQTY BASEX, 
	IP.CHSFC * ERQTY FRTX, 
	CASE REPL WHEN '2' THEN IP.CHSCC WHEN '3' THEN IR.Y0SOC ELSE 0 END * ERQTY AS CURRX, 
	(IP.CHSDC + IP.CHS1C + IP.CHS2C + IR.Y0SSHC + APFCSO + APFCSI) * ERQTY OTHMX, 
	APUNCS * ERQTY SUBCX, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH * ERQTY LABRX, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS * ERQTY FIXRX, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS * ERQTY VARRX, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR * ERQTY LABSX, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR * ERQTY FIXSX, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR * ERQTY VARSX, 
	 --------SCRAP---------- 
	IP.CHSUC * ERQTY * (1 / XREFF - 1) BASEXS, 
	IP.CHSFC * ERQTY * (1 / XREFF - 1) FRTXS, 
	CASE PSE.LVL WHEN '0' THEN 0 ELSE CASE REPL WHEN '2' THEN IP.CHSCC WHEN '3' THEN IR.Y0SOC ELSE 0 END * ERQTY * (1 / XREFF - 1) END AS CURRXS, 
	(IP.CHSDC + IP.CHS1C + IP.CHS2C + IR.Y0SSHC + APFCSO + APFCSI) * ERQTY * (1 / XREFF - 1) OTHMXS, 
	APUNCS * ERQTY * (1 / XREFF - 1) SUBCXS, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH * ERQTY * (1 / XREFF - 1) LABRXS, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS * ERQTY * (1 / XREFF - 1) FIXRXS, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS * ERQTY * (1 / XREFF - 1) VARRXS, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR * ERQTY * (1 / XREFF - 1) LABSXS, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR * ERQTY * (1 / XREFF - 1) FIXSXS, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR * ERQTY * (1 / XREFF - 1) VARSXS 
FROM 
	PSE PSE 
	LEFT OUTER JOIN LGDAT.ICSTM IM ON 
		IM.CGPART = PSE.CHLD AND 
		IM.CGPLNT = PSE.SPLNT 
	LEFT OUTER JOIN LGDAT.ICSTP IP ON 
		IP.CHPART = PSE.CHLD AND 
		IP.CHPLNT = PSE.SPLNT 
	LEFT OUTER JOIN LGDAT.ICSTR IR ON 
		IR.Y0PART = PSE.CHLD AND 
		IR.Y0PLNT = PSE.CPLNT 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = CHLD AND 
		APPLNT = SPLNT AND 
		APSEQ# = SEQ AND 
		APVEND = RESC 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = CHLD AND 
		AOPLNT = SPLNT AND 
		AOSEQ# = SEQ 
	LEFT OUTER JOIN LGDAT.STKA ON 
		V6PART = CHLD AND 
		V6PLNT = SPLNT 
	LEFT OUTER JOIN LGDAT.RESRE ON 
		ABPLNT = SPLNT AND 
		ABDEPT = PSE.DEP AND 
		ABRESC = RESC 
	LEFT OUTER JOIN LGDAT.DEPTS ON 
		ABDEPT = AADEPT 
	LEFT OUTER JOIN LGDAT.STKMM MM ON 
		MM.AVPART = PSE.CHLD 
	LEFT OUTER JOIN LGDAT.STKMP MP ON 
		MP.AWPART = PSE.CHLD 
	LEFT OUTER JOIN LGDAT.MMGP MMGP ON 
		MMGP.BRMGRP = COALESCE (AWMING, AVMING) AND 
		MMGP.BRGRP = COALESCE (AWMAJG, AVMAJG) 
ORDER BY CLINE ASC 
; 
OPEN C1 ; 
END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.FF_PSXD_02 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.FF_PSXD_02 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.FF_PSXD_03 (
	IN XPART VARCHAR(20), 
	IN XPLNT CHAR(3)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.FF_PSXD_03 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
--PRODUCT STRUCTURE EXPLOSION DETAILS-- 
--REVISION LEVEL 1 
---------------------------------------------------------------------------------------------------------------------------------------- 
--This result set explodes the METHDM bill of materials along the STKA.V6RPLN procurement path and 
--links in the routings & burden rates to get to a detailed rebuild of the product cost. 
--The explosion method is a recursive CTE (common table expression) that operates like a self join. 
--the explosion stops if it encounters a replenishment type 2 or exceeds 10 levels which is interpreted as an infinite loop somewhere 
--the last select breaks out all possible data points 
--duty, shipping and warehousing on the ICSTR file and the misc1 & 2 cost categories functions are not known but included here anyways 
--it is assumed any conversion issues are handled in a single step by the PUNIT file, which doesn't always have a single step conversion 
---------------------------------------------------------------------------------------------------------------------------------------- 
DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR 
  
WITH RECURSIVE PSE 
	(
		 ------------EXPLOSION TRACKING---------------- 
		LVL, PLINE, CLINE, MAST, MPLT, PRNT, CHLD, 
		 ------------PROCUREMENT----------------------- 
		STAT, REPL, 
		 ------------ROUTING--------------------------- 
		SEQ, DEP, RESC, OPC, REPP, REFF, XREFF, 
		 ------------BILL OF MATERIALS----------------- 
		RQBY, BACK, SCRP, EFF, QTY, BQTY, RQTY, ERQTY, 
		 ------------UOM CONVERSIONS------------------- 
		UNTI, BUOM, CONV, 
		 ------------SOURCING-------------------------- 
		CPLNT, SPLNT, 
		 ------------CURRENCY-------------------------- 
		CPC, SPC, FXR 
	) AS 
(
SELECT 
	0, 
	VARCHAR (SUBSTR (DIGITS (INT (RANK () OVER (ORDER BY A.V6PART ASC, A.V6PLNT ASC))), 6, 5), 100) || 
	CASE WHEN AOSEQ# < 10 
		THEN SUBSTR (DIGITS (- AOSEQ# + 9), 2, 3) 
		ELSE '' 
	END AS PLINE, 
	VARCHAR (SUBSTR (DIGITS (INT (RANK () OVER (ORDER BY A.V6PART ASC, A.V6PLNT ASC))), 6, 5), 100) || SUBSTR (DIGITS (- AOSEQ# + 10), 2, 3) AS CLINE, 
	A.V6PART, 
	A.V6PLNT, 
	A.V6PART, 
	A.V6PART, 
	A.V6STAT, 
	A.V6RPLN, 
	AOSEQ#, 
	AODEPT, 
	COALESCE (APVEND, AORESC), 
	COALESCE (APODES, AOOPNM), 
	AOREPP, 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	'R', 
	' ', 
	1, 
	1, 
	1, 
	1, 
	1, 
	1, 
	A.V6UNTI, 
	A.V6UNTI, 
	FLOAT (1), 
	A.V6PLNT, 
	CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END, 
	SUBSTR (CC.A215, 152, 2), 
	SUBSTR (SC.A215, 152, 2), 
	B86SRTE 
FROM 
	LGDAT.STKA A 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = A.V6PART AND 
		AOPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = A.V6PART AND 
		APPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END AND 
		A.V6RPLN = 1 
	LEFT OUTER JOIN LGDAT.PLNT CP ON 
		CP.YAPLNT = A.V6PLNT 
	LEFT OUTER JOIN LGDAT.PLNT SP ON 
		SP.YAPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END 
	LEFT OUTER JOIN LGDAT.CODE CC ON 
		LTRIM (RTRIM (CC.A9)) = CP.YACOMP AND 
		CC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CODE SC ON 
		LTRIM (RTRIM (SC.A9)) = SP.YACOMP AND 
		SC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CRET ON 
		B86COMN = SP.YACOMP AND 
		B86CURC = SUBSTR (CC.A215, 152, 2) AND 
		B86RTTY = 'S' 
WHERE 
	V6PART = XPART AND 
	V6PLNT = XPLNT 
  
UNION ALL 
  
SELECT 
	PSE.LVL + 1, 
	CASE WHEN AOSEQ# < 10 
		THEN PSE.CLINE || '-' || REPEAT ('0', 3 - LENGTH (VARCHAR (M.AQLIN#))) || VARCHAR (M.AQLIN#) || SUBSTR (DIGITS (COALESCE (- AOSEQ# + 9, AQSEQ#)), 2, 3) 
		ELSE VARCHAR (PSE.CLINE, 100) 
	END, 
	PSE.CLINE || '-' || REPEAT ('0', 3 - LENGTH (VARCHAR (M.AQLIN#))) || VARCHAR (M.AQLIN#) || SUBSTR (DIGITS (COALESCE (- AOSEQ# + 10, AQSEQ#)), 2, 3), 
	PSE.MAST, 
	PSE.MPLT, 
	PSE.CHLD, 
	M.AQMTLP, 
	A.V6STAT, 
	A.V6RPLN, 
	COALESCE (AOSEQ#, AQSEQ#), 
	AODEPT, 
	COALESCE (APVEND, AORESC), 
	COALESCE (APODES, AOOPNM), 
	AOREPP, 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8) * PSE.XREFF, 
	M.AQRQBY, 
	M.AQBACK, 
	FLOAT (1 - M.AQSCRP / 100), 
	1, 
	M.AQQPPC, 
	M.AQQTYM, 
	FLOAT (M.AQQPPC / M.AQQTYM) / FLOAT (1 - M.AQSCRP / 100) * CASE M.AQRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
	FLOAT (M.AQQPPC / M.AQQTYM) * FLOAT (PSE.ERQTY) / FLOAT (1 - M.AQSCRP / 100) * CASE M.AQRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
	A.V6UNTI, 
	M.AQUNIT, 
	FLOAT (COALESCE (U.MULT_BY, 1)) * FLOAT (COALESCE (U2.MULT_BY, 1)) * PSE.CONV, 
	M.AQPLNT, 
	CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE M.AQPLNT END, 
	SUBSTR (CC.A215, 152, 2), 
	SUBSTR (SC.A215, 152, 2), 
	B86SRTE * PSE.FXR 
FROM 
	PSE PSE 
	INNER JOIN LGDAT.METHDM M ON 
		M.AQPART = PSE.CHLD AND 
		M.AQPLNT = PSE.SPLNT AND 
		M.AQSEQ# = IFNULL (PSE.SEQ, M.AQSEQ#) AND 
		 ----------MOD 10/20/15------------- 
		PSE.REPL <> '2' 
	LEFT OUTER JOIN LGDAT.STKA A ON 
		A.V6PART = M.AQMTLP AND 
		A.V6PLNT = M.AQPLNT 
	LEFT OUTER JOIN LGDAT.STKA A2 ON 
		A2.V6PART = M.AQMTLP AND 
		A2.V6PLNT = A.V6TPLN 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = M.AQMTLP AND 
		AOPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = M.AQMTLP AND 
		APPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END AND 
		A.V6RPLN = 1 
	LEFT OUTER JOIN 
	(
	SELECT 
		IHUNT1 AS UNT1, IHUNT2 AS UNT2, IHCNV2 / IHCNV1 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
  
	UNION ALL 
  
	SELECT 
		IHUNT2 AS UNT1, IHUNT1 AS UNT2, IHCNV1 / IHCNV2 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
	) U ON 
		U.UNT1 = M.AQUNIT AND 
		U.UNT2 = A.V6UNTI 
	LEFT OUTER JOIN 
	(
	SELECT 
		IHUNT1 AS UNT1, IHUNT2 AS UNT2, IHCNV2 / IHCNV1 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
  
	UNION ALL 
  
	SELECT 
		IHUNT2 AS UNT1, IHUNT1 AS UNT2, IHCNV1 / IHCNV2 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
	) U2 ON 
		LTRIM (RTRIM (U2.UNT1)) = A.V6UNTI AND 
		LTRIM (RTRIM (U2.UNT2)) = A2.V6UNTI 
	LEFT OUTER JOIN LGDAT.PLNT CP ON 
		CP.YAPLNT = M.AQPLNT 
	LEFT OUTER JOIN LGDAT.PLNT SP ON 
		SP.YAPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE M.AQPLNT END 
	LEFT OUTER JOIN LGDAT.CODE CC ON 
		LTRIM (RTRIM (CC.A9)) = CP.YACOMP AND 
		CC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CODE SC ON 
		LTRIM (RTRIM (SC.A9)) = SP.YACOMP AND 
		SC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CRET ON 
		B86COMN = SP.YACOMP AND 
		B86CURC = SUBSTR (CC.A215, 152, 2) AND 
		B86RTTY = 'S'		 
WHERE 
	LVL <= 10 
	AND PSE.REPL <> '4' 
) 
  
SELECT 
	MAST, 
	MPLT, 
	REPEAT ('.  ', LVL) || LVL AS TLVL, 
	REPEAT ('.  ', LVL) || CHLD TPART, 
	REPEAT ('.  ', LVL) || COALESCE (AWDES1, AVDES1) DESCR, 
	PLINE, 
	CLINE, 
	PSE.CHLD PART, 
	CPLNT, 
	STAT, REPL, SPLNT, SEQ, AAOSRV OUTS, DEP, RESC, OPC, AOREPP, 
	REFF, XREFF, 
	RQBY, BACK, 
	IFNULL (MM.AVMAJG, MP.AWMAJG) MAJG, 
	IFNULL (MM.AVMING, MP.AWMING) || ' - ' || RTRIM (MMGP.BRDES) MING, 
	IFNULL (MM.AVGLCD, MP.AWGLDC) GLCD, 
	IFNULL (MM.AVGLED, MP.AWGLED) GLED, 
	SCRP, 
	 --QTY, BQTY, 
	RQTY, 
	ERQTY, 
	ERQTY * (1 / XREFF - 1) ERQTYS, 
	UNTI, BUOM, CONV, 
	CPC, SPC, 
	 --FXR, 
	 --COALESCE(IP.CHCURR, IR.Y0FUT1) AS CURR, 
	CHAR (COALESCE (IP.CHSDAT, IR.Y0SDAT, IM.CGSDAT)) DT, 
	IP.CHSUC BASE, 
	IP.CHSFC FRT, 
	IP.CHSDC DUTY, 
	IP.CHS1C MISC1, 
	IP.CHS2C MISC2, 
	 -------------------------MOD 10/20/15----------------------------- 
	CASE REPL WHEN '2' THEN IP.CHSCC WHEN '3' THEN IR.Y0SOC ELSE 0 END AS CURR, 
	IR.Y0SSHC "S&H", 
	APFCSO "FRT-TO", 
	APFCSI "FRT-FROM", 
	APUNCS SUBC, 
	AORUNS RUNTIME, 
	AO#MEN / AO#MCH RUNCREW, 
	AOSETP SETTIME, 
	V6OPTR RUNSIZE, 
	AOSCRW SETCREW, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END LABRATE, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END FIXRATE, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END VARRATE, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH LABRUN, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS FIXRUN, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS VARRUN, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR LABSET, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR FIXSET, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR VARSET, 
	 ----------EXTENDED VALUES---------- 
	IP.CHSUC * ERQTY BASEX, 
	IP.CHSFC * ERQTY FRTX, 
	CASE REPL WHEN '2' THEN IP.CHSCC WHEN '3' THEN IR.Y0SOC ELSE 0 END * ERQTY AS CURRX, 
	(IP.CHSDC + IP.CHS1C + IP.CHS2C + IR.Y0SSHC + APFCSO + APFCSI) * ERQTY OTHMX, 
	APUNCS * ERQTY SUBCX, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH * ERQTY LABRX, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS * ERQTY FIXRX, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS * ERQTY VARRX, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR * ERQTY LABSX, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR * ERQTY FIXSX, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR * ERQTY VARSX, 
	 --------SCRAP---------- 
	IP.CHSUC * ERQTY * (1 / XREFF - 1) BASEXS, 
	IP.CHSFC * ERQTY * (1 / XREFF - 1) FRTXS, 
	CASE PSE.LVL WHEN '0' THEN 0 ELSE CASE REPL WHEN '2' THEN IP.CHSCC WHEN '3' THEN IR.Y0SOC ELSE 0 END * ERQTY * (1 / XREFF - 1) END AS CURRXS, 
	(IP.CHSDC + IP.CHS1C + IP.CHS2C + IR.Y0SSHC + APFCSO + APFCSI) * ERQTY * (1 / XREFF - 1) OTHMXS, 
	APUNCS * ERQTY * (1 / XREFF - 1) SUBCXS, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH * ERQTY * (1 / XREFF - 1) LABRXS, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS * ERQTY * (1 / XREFF - 1) FIXRXS, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS * ERQTY * (1 / XREFF - 1) VARRXS, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR * ERQTY * (1 / XREFF - 1) LABSXS, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR * ERQTY * (1 / XREFF - 1) FIXSXS, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR * ERQTY * (1 / XREFF - 1) VARSXS 
FROM 
	PSE PSE 
	LEFT OUTER JOIN LGDAT.ICSTM IM ON 
		IM.CGPART = PSE.CHLD AND 
		IM.CGPLNT = PSE.SPLNT 
	LEFT OUTER JOIN LGDAT.ICSTP IP ON 
		IP.CHPART = PSE.CHLD AND 
		IP.CHPLNT = PSE.SPLNT 
	LEFT OUTER JOIN LGDAT.ICSTR IR ON 
		IR.Y0PART = PSE.CHLD AND 
		IR.Y0PLNT = PSE.CPLNT 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = CHLD AND 
		APPLNT = SPLNT AND 
		APSEQ# = SEQ AND 
		APVEND = RESC 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = CHLD AND 
		AOPLNT = SPLNT AND 
		AOSEQ# = SEQ 
	LEFT OUTER JOIN LGDAT.STKA ON 
		V6PART = CHLD AND 
		V6PLNT = SPLNT 
	LEFT OUTER JOIN LGDAT.RESRE ON 
		ABPLNT = SPLNT AND 
		ABDEPT = PSE.DEP AND 
		ABRESC = RESC 
	LEFT OUTER JOIN LGDAT.DEPTS ON 
		AODEPT = AADEPT 
	LEFT OUTER JOIN LGDAT.STKMM MM ON 
		MM.AVPART = PSE.CHLD 
	LEFT OUTER JOIN LGDAT.STKMP MP ON 
		MP.AWPART = PSE.CHLD 
	LEFT OUTER JOIN LGDAT.MMGP MMGP ON 
		MMGP.BRMGRP = COALESCE (AWMING, AVMING) AND 
		MMGP.BRGRP = COALESCE (AWMAJG, AVMAJG) 
ORDER BY CLINE ASC 
; 
OPEN C1 ; 
END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.FF_PSXD_03 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.FF_PSXD_03 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.P_BLT_MUV (
	IN VPERD CHAR(4)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.P_BLT_MUV 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *CHG, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
	 -------------------------------------ERROR HANDLING------------------------------------------------------- 
	DECLARE V_ERROR INTEGER ; 
	DECLARE MSG_VAR VARCHAR (255) ; 
	DECLARE RETRN_STATUS INTEGER ; 
	DECLARE V_RECS BIGINT ; 
	DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR SELECT MSG_VAR FROM SYSIBM.SYSDUMMY1 ; 
	 
	 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION  --,SQLWARNING 
	BEGIN 
		SET V_ERROR = SQLCODE ; 
		GET DIAGNOSTICS RETRN_STATUS = RETURN_STATUS ; 
	 
		IF (V_ERROR IS NULL) OR (V_ERROR <> 0 AND V_ERROR <> 466) OR (RETRN_STATUS > 3) 
		THEN 
			SET MSG_VAR = 'PROC: ' || 'RLARP.PD_UD' || ', ' || COALESCE (MSG_VAR, '') || ', SQLCODE: ' || CHAR (V_ERROR) || ', PARAMS: ' ; 
			 --ROLLBACK; 
			 --COMMIT; 
			SET RETRN_STATUS = - 1 ; 
			SIGNAL SQLSTATE '75001' SET MESSAGE_TEXT = MSG_VAR ; 
		ELSE 
			SET V_ERROR = 0 ; 
		END IF ; 
	END ; 
	 
	 -------------------------------------------------------------------------------------------------------- 
	INSERT INTO RLARP.FFBLTMUV SELECT * FROM RLARP.V_BUILTMUV WHERE BTID IN (
		SELECT DISTINCT 
			T.BTID 
		FROM 
			RLARP.FFPDGLR1 T 
			EXCEPTION JOIN RLARP.FFBLTMUV B ON 
				B.BTID = T.BTID 
			INNER JOIN LGDAT.RPRH ON 
				NWBTID = T.BTID 
		WHERE 
			DIGITS (NWFSYY) || DIGITS (NWFSPP) = VPERD) ; 
	SET MSG_VAR = 'RLARP.FFBLTMUV updated for period ' || VPERD ; 
	OPEN C1 ; 
	 
END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.P_BLT_MUV 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.P_BLT_MUV 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.P_PSXD_PTPL () 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.P_PSXD_PTPL 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
--PRODUCT STRUCTURE EXPLOSION DETAILS-- 
--REVISION LEVEL 1 
---------------------------------------------------------------------------------------------------------------------------------------- 
--This result set explodes the METHDM bill of materials along the STKA.V6RPLN procurement path and 
--links in the routings & burden rates to get to a detailed rebuild of the product cost. 
--The explosion method is a recursive CTE (common table expression) that operates like a self join. 
--the explosion stops if it encounters a replenishment type 2 or exceeds 10 levels which is interpreted as an infinite loop somewhere 
--the last select breaks out all possible data points 
--duty, shipping and warehousing on the ICSTR file and the misc1 & 2 cost categories functions are not known but included here anyways 
--it is assumed any conversion issues are handled in a single step by the PUNIT file, which doesn't always have a single step conversion 
---------------------------------------------------------------------------------------------------------------------------------------- 
DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR 
  
WITH RECURSIVE PSE 
	(
		 ------------EXPLOSION TRACKING---------------- 
		LVL, PLINE, CLINE, MAST, MPLT, PRNT, CHLD, 
		 ------------PROCUREMENT----------------------- 
		STAT, REPL, 
		 ------------ROUTING--------------------------- 
		SEQ, DEP, RESC, OPC, REPP, REFF, XREFF, 
		 ------------BILL OF MATERIALS----------------- 
		RQBY, BACK, SCRP, EFF, QTY, BQTY, RQTY, ERQTY, 
		 ------------UOM CONVERSIONS------------------- 
		UNTI, BUOM, CONV, 
		 ------------SOURCING-------------------------- 
		CPLNT, SPLNT, 
		 ------------CURRENCY-------------------------- 
		CPC, SPC, FXR 
	) AS 
(
SELECT 
	0, 
	VARCHAR (SUBSTR (DIGITS (INT (RANK () OVER (ORDER BY A.V6PART ASC, A.V6PLNT ASC))), 6, 5), 100) || 
	CASE WHEN AOSEQ# < 10 
		THEN SUBSTR (DIGITS (- AOSEQ# + 9), 2, 3) 
		ELSE '' 
	END AS PLINE, 
	VARCHAR (SUBSTR (DIGITS (INT (RANK () OVER (ORDER BY A.V6PART ASC, A.V6PLNT ASC))), 6, 5), 100) || SUBSTR (DIGITS (- AOSEQ# + 10), 2, 3) AS CLINE, 
	A.V6PART, 
	A.V6PLNT, 
	A.V6PART, 
	A.V6PART, 
	A.V6STAT, 
	A.V6RPLN, 
	AOSEQ#, 
	AODEPT, 
	COALESCE (APVEND, AORESC), 
	COALESCE (APODES, AOOPNM), 
	AOREPP, 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	'R', 
	' ', 
	1, 
	1, 
	1, 
	1, 
	1, 
	1, 
	A.V6UNTI, 
	A.V6UNTI, 
	FLOAT (1), 
	A.V6PLNT, 
	CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END, 
	SUBSTR (CC.A215, 152, 2), 
	SUBSTR (SC.A215, 152, 2), 
	B86SRTE 
FROM 
	RLARP.FFPTPL P 
	INNER JOIN LGDAT.STKA A ON 
		A.V6PART = P.PART AND 
		A.V6PLNT = P.PLNT 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = A.V6PART AND 
		AOPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = A.V6PART AND 
		APPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END AND 
		A.V6RPLN = 1 
	LEFT OUTER JOIN LGDAT.PLNT CP ON 
		CP.YAPLNT = A.V6PLNT 
	LEFT OUTER JOIN LGDAT.PLNT SP ON 
		SP.YAPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE A.V6PLNT END 
	LEFT OUTER JOIN LGDAT.CODE CC ON 
		LTRIM (RTRIM (CC.A9)) = CP.YACOMP AND 
		CC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CODE SC ON 
		LTRIM (RTRIM (SC.A9)) = SP.YACOMP AND 
		SC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CRET ON 
		B86COMN = SP.YACOMP AND 
		B86CURC = SUBSTR (CC.A215, 152, 2) AND 
		B86RTTY = 'S' 
  
UNION ALL 
  
SELECT 
	PSE.LVL + 1, 
	CASE WHEN AOSEQ# < 10 
		THEN PSE.CLINE || '-' || REPEAT ('0', 3 - LENGTH (VARCHAR (M.AQLIN#))) || VARCHAR (M.AQLIN#) || SUBSTR (DIGITS (COALESCE (- AOSEQ# + 9, AQSEQ#)), 2, 3) 
		ELSE VARCHAR (PSE.CLINE, 100) 
	END, 
	PSE.CLINE || '-' || REPEAT ('0', 3 - LENGTH (VARCHAR (M.AQLIN#))) || VARCHAR (M.AQLIN#) || SUBSTR (DIGITS (COALESCE (- AOSEQ# + 10, AQSEQ#)), 2, 3), 
	PSE.MAST, 
	PSE.MPLT, 
	PSE.CHLD, 
	M.AQMTLP, 
	A.V6STAT, 
	A.V6RPLN, 
	COALESCE (AOSEQ#, AQSEQ#), 
	AODEPT, 
	COALESCE (APVEND, AORESC), 
	COALESCE (APODES, AOOPNM), 
	AOREPP, 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8), 
	ROUND (FLOAT (1 / IFNULL (AOEFC1, 1)), 8) * PSE.XREFF, 
	M.AQRQBY, 
	M.AQBACK, 
	FLOAT (1 - M.AQSCRP / 100), 
	1, 
	M.AQQPPC, 
	M.AQQTYM, 
	FLOAT (M.AQQPPC / M.AQQTYM) / FLOAT (1 - M.AQSCRP / 100) * CASE M.AQRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
	FLOAT (M.AQQPPC / M.AQQTYM) * FLOAT (PSE.ERQTY) / FLOAT (1 - M.AQSCRP / 100) * CASE M.AQRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
	A.V6UNTI, 
	M.AQUNIT, 
	FLOAT (COALESCE (U.MULT_BY, 1)) * FLOAT (COALESCE (U2.MULT_BY, 1)) * PSE.CONV, 
	M.AQPLNT, 
	CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE M.AQPLNT END, 
	SUBSTR (CC.A215, 152, 2), 
	SUBSTR (SC.A215, 152, 2), 
	B86SRTE * PSE.FXR 
FROM 
	PSE PSE 
	INNER JOIN LGDAT.METHDM M ON 
		M.AQPART = PSE.CHLD AND 
		M.AQPLNT = PSE.SPLNT AND 
		M.AQSEQ# = IFNULL (PSE.SEQ, M.AQSEQ#) AND 
		 ----------MOD 10/20/15------------- 
		PSE.REPL <> '2' 
	LEFT OUTER JOIN LGDAT.STKA A ON 
		A.V6PART = M.AQMTLP AND 
		A.V6PLNT = M.AQPLNT 
	LEFT OUTER JOIN LGDAT.STKA A2 ON 
		A2.V6PART = M.AQMTLP AND 
		A2.V6PLNT = A.V6TPLN 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = M.AQMTLP AND 
		AOPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = M.AQMTLP AND 
		APPLNT = CASE A.V6TPLN WHEN '' THEN A.V6PLNT ELSE A.V6TPLN END AND 
		A.V6RPLN = 1 
	LEFT OUTER JOIN 
	(
	SELECT 
		IHUNT1 AS UNT1, IHUNT2 AS UNT2, IHCNV2 / IHCNV1 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
  
	UNION ALL 
  
	SELECT 
		IHUNT2 AS UNT1, IHUNT1 AS UNT2, IHCNV1 / IHCNV2 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
	) U ON 
		U.UNT1 = M.AQUNIT AND 
		U.UNT2 = A.V6UNTI 
	LEFT OUTER JOIN 
	(
	SELECT 
		IHUNT1 AS UNT1, IHUNT2 AS UNT2, IHCNV2 / IHCNV1 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
  
	UNION ALL 
  
	SELECT 
		IHUNT2 AS UNT1, IHUNT1 AS UNT2, IHCNV1 / IHCNV2 AS MULT_BY 
	FROM 
		LGDAT.PUNIT 
	WHERE 
		IHPART = '&&GLOBAL' 
	) U2 ON 
		LTRIM (RTRIM (U2.UNT1)) = A.V6UNTI AND 
		LTRIM (RTRIM (U2.UNT2)) = A2.V6UNTI 
	LEFT OUTER JOIN LGDAT.PLNT CP ON 
		CP.YAPLNT = M.AQPLNT 
	LEFT OUTER JOIN LGDAT.PLNT SP ON 
		SP.YAPLNT = CASE A.V6RPLN WHEN '3' THEN A.V6TPLN ELSE M.AQPLNT END 
	LEFT OUTER JOIN LGDAT.CODE CC ON 
		LTRIM (RTRIM (CC.A9)) = CP.YACOMP AND 
		CC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CODE SC ON 
		LTRIM (RTRIM (SC.A9)) = SP.YACOMP AND 
		SC.A2 = 'AA' 
	LEFT OUTER JOIN LGDAT.CRET ON 
		B86COMN = SP.YACOMP AND 
		B86CURC = SUBSTR (CC.A215, 152, 2) AND 
		B86RTTY = 'S'		 
WHERE 
	LVL <= 10 
	AND PSE.REPL <> '4' 
) 
  
SELECT 
	MAST, 
	MPLT, 
	REPEAT ('.  ', LVL) || LVL AS TLVL, 
	REPEAT ('.  ', LVL) || CHLD TPART, 
	REPEAT ('.  ', LVL) || COALESCE (AWDES1, AVDES1) DESCR, 
	PLINE, 
	CLINE, 
	PSE.CHLD PART, 
	CPLNT, 
	STAT, REPL, SPLNT, SEQ, AAOSRV OUTS, DEP, RESC, OPC, AOREPP, 
	REFF, XREFF, 
	RQBY, BACK, 
	IFNULL (MM.AVMAJG, MP.AWMAJG) MAJG, 
	IFNULL (MM.AVMING, MP.AWMING) || ' - ' || RTRIM (MMGP.BRDES) MING, 
	IFNULL (MM.AVGLCD, MP.AWGLDC) GLCD, 
	IFNULL (MM.AVGLED, MP.AWGLED) GLED, 
	SCRP, 
	 --QTY, BQTY, 
	RQTY, 
	ERQTY, 
	ERQTY * (1 / XREFF - 1) ERQTYS, 
	UNTI, BUOM, CONV, 
	CPC, SPC, 
	 --FXR, 
	 --COALESCE(IP.CHCURR, IR.Y0FUT1) AS CURR, 
	CHAR (COALESCE (IP.CHSDAT, IR.Y0SDAT, IM.CGSDAT)) DT, 
	IP.CHSUC BASE, 
	IP.CHSFC FRT, 
	IP.CHSDC DUTY, 
	IP.CHS1C MISC1, 
	IP.CHS2C MISC2, 
	 -------------------------MOD 10/20/15----------------------------- 
	CASE REPL WHEN '2' THEN IP.CHSCC WHEN '3' THEN IR.Y0SOC ELSE 0 END AS CURR, 
	IR.Y0SSHC "S&H", 
	APFCSO "FRT-TO", 
	APFCSI "FRT-FROM", 
	APUNCS SUBC, 
	AORUNS RUNTIME, 
	AO#MEN / AO#MCH RUNCREW, 
	AOSETP SETTIME, 
	V6OPTR RUNSIZE, 
	AOSCRW SETCREW, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END LABRATE, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END FIXRATE, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END VARRATE, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH LABRUN, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS FIXRUN, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS VARRUN, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR LABSET, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR FIXSET, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR VARSET, 
	 ----------EXTENDED VALUES---------- 
	IP.CHSUC * ERQTY BASEX, 
	IP.CHSFC * ERQTY FRTX, 
	CASE REPL WHEN '2' THEN IP.CHSCC WHEN '3' THEN IR.Y0SOC ELSE 0 END * ERQTY AS CURRX, 
	(IP.CHSDC + IP.CHS1C + IP.CHS2C + IR.Y0SSHC + APFCSO + APFCSI) * ERQTY OTHMX, 
	APUNCS * ERQTY SUBCX, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH * ERQTY LABRX, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS * ERQTY FIXRX, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS * ERQTY VARRX, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR * ERQTY LABSX, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR * ERQTY FIXSX, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR * ERQTY VARSX, 
	 --------SCRAP---------- 
	IP.CHSUC * ERQTY * (1 / XREFF - 1) BASEXS, 
	IP.CHSFC * ERQTY * (1 / XREFF - 1) FRTXS, 
	CASE PSE.LVL WHEN '0' THEN 0 ELSE CASE REPL WHEN '2' THEN IP.CHSCC WHEN '3' THEN IR.Y0SOC ELSE 0 END * ERQTY * (1 / XREFF - 1) END AS CURRXS, 
	(IP.CHSDC + IP.CHS1C + IP.CHS2C + IR.Y0SSHC + APFCSO + APFCSI) * ERQTY * (1 / XREFF - 1) OTHMXS, 
	APUNCS * ERQTY * (1 / XREFF - 1) SUBCXS, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END / AORUNS * AO#MEN / AO#MCH * ERQTY * (1 / XREFF - 1) LABRXS, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END / AORUNS * ERQTY * (1 / XREFF - 1) FIXRXS, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END / AORUNS * ERQTY * (1 / XREFF - 1) VARRXS, 
	CASE ABLABR WHEN 0 THEN AASTDR ELSE ABLABR END * AOSETP * AOSCRW / V6OPTR * ERQTY * (1 / XREFF - 1) LABSXS, 
	CASE ABBRDR WHEN 0 THEN AABRDR ELSE ABBRDR END * AOSETP / V6OPTR * ERQTY * (1 / XREFF - 1) FIXSXS, 
	CASE ABVBRD WHEN 0 THEN AAVBRD ELSE ABVBRD END * AOSETP / V6OPTR * ERQTY * (1 / XREFF - 1) VARSXS 
FROM 
	PSE PSE 
	LEFT OUTER JOIN LGDAT.ICSTM IM ON 
		IM.CGPART = PSE.CHLD AND 
		IM.CGPLNT = PSE.SPLNT 
	LEFT OUTER JOIN LGDAT.ICSTP IP ON 
		IP.CHPART = PSE.CHLD AND 
		IP.CHPLNT = PSE.SPLNT 
	LEFT OUTER JOIN LGDAT.ICSTR IR ON 
		IR.Y0PART = PSE.CHLD AND 
		IR.Y0PLNT = PSE.CPLNT 
	LEFT OUTER JOIN LGDAT.METHDO ON 
		APPART = CHLD AND 
		APPLNT = SPLNT AND 
		APSEQ# = SEQ AND 
		APVEND = RESC 
	LEFT OUTER JOIN LGDAT.METHDR ON 
		AOPART = CHLD AND 
		AOPLNT = SPLNT AND 
		AOSEQ# = SEQ 
	LEFT OUTER JOIN LGDAT.STKA ON 
		V6PART = CHLD AND 
		V6PLNT = SPLNT 
	LEFT OUTER JOIN LGDAT.RESRE ON 
		ABPLNT = SPLNT AND 
		ABDEPT = PSE.DEP AND 
		ABRESC = RESC 
	LEFT OUTER JOIN LGDAT.DEPTS ON 
		AODEPT = AADEPT 
	LEFT OUTER JOIN LGDAT.STKMM MM ON 
		MM.AVPART = PSE.CHLD 
	LEFT OUTER JOIN LGDAT.STKMP MP ON 
		MP.AWPART = PSE.CHLD 
	LEFT OUTER JOIN LGDAT.MMGP MMGP ON 
		MMGP.BRMGRP = COALESCE (AWMING, AVMING) AND 
		MMGP.BRGRP = COALESCE (AWMAJG, AVMAJG) 
ORDER BY CLINE ASC 
; 
OPEN C1 ; 
END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.P_PSXD_PTPL 
TO PTROWBRIDG ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.PD_UD_R0 (
	IN VPERD CHAR(4)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.PD_UD_R0 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
  
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	DECLARE V_ERROR INTEGER ; 
	DECLARE MSG_VAR VARCHAR (255) ; 
	DECLARE RETRN_STATUS INTEGER ; 
	DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR SELECT * FROM TABLE (RLARP.F_PD_STK (VPERD)) AS X ; 
	 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION  --,SQLWARNING 
	BEGIN 
		SET V_ERROR = SQLCODE ; 
		GET DIAGNOSTICS RETRN_STATUS = RETURN_STATUS ; 
	 
		IF (V_ERROR IS NULL) OR (V_ERROR <> 0 AND V_ERROR <> 466) OR (RETRN_STATUS > 3) 
		THEN 
			SET MSG_VAR = 'PROC: ' || 'RLARP.PD_UD' || ', ' || COALESCE (MSG_VAR, '') || ', SQLCODE: ' || CHAR (V_ERROR) || ', PARAMS: ' ; 
			 --ROLLBACK; 
			 --COMMIT; 
			SET RETRN_STATUS = - 1 ; 
			SIGNAL SQLSTATE '75001' SET MESSAGE_TEXT = MSG_VAR ; 
		ELSE 
			SET V_ERROR = 0 ; 
		END IF ; 
	END ; 
  
  
	 --need to add standard department 
	 --need to add process variance 
	 --need to add line number for standard cost bom items 
	 --need to go back and restate RRAT for ASG 
	 --need to add procurement variance 
	 --need to take explosion approach to accomodate phantoms & sequnce numbers 
	 --fix standard cost history 
	 ----------------------------------------build FFCOSTEFFD for any new records-------------------------------------------------------------- 
	CALL RLARP.CH_UD ; 
  
	 ----------------------------------------setup production gl batch selection file---------------------------------------------------------- 
	DECLARE GLOBAL TEMPORARY TABLE B (BATCH INT) ; 
  
	 ----------------------------------------setup production gl work file--------------------------------------------------------------------- 
	DECLARE GLOBAL TEMPORARY TABLE T (
		SRCE CHAR (4), 
		WRKO VARCHAR (20), 
		BTCH INT, 
		ENT# INT, 
		SEQ# INT, 
		PART VARCHAR (20), 
		RPLN CHAR (1), 
		PQTY FLOAT, 
		ARSC VARCHAR (5), 
		ADEP VARCHAR (5), 
		ACTN VARCHAR (3), 
		ACCT CHAR (12), 
		AMNT DECIMAL (14, 2), 
		SRSC VARCHAR (5), 
		RHRS FLOAT, 
		RCRW FLOAT, 
		SHRS FLOAT, 
		SCRW FLOAT, 
		RATE FLOAT, 
		SIZE FLOAT 
	) ; 
		 
	 -----------------------------select posted batches from the target period to be evaluated------------------------------------------------- 
	INSERT INTO 
		QTEMP.B 
	SELECT DISTINCT 
		NWBTID 
	FROM 
		LGDAT.RPRH 
		EXCEPTION JOIN RLARP.FFPDGLR1 ON 
			BTID = NWBTID 
	WHERE 
		DIGITS (NWFSYY) || DIGITS (NWFSPP) = VPERD AND 
		NWPOST = 'Y' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --setup completed production for good pieces, entry is to debit inventory for the standard cost for the quantity reported 
	 --standard cost at the time of posting is falsely estimated to be the batch creation date since post date was not available 
	 --at the time this was originally written 
	 --the account number to use is from the GLIE & PLNT files 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'CPG', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			TIBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --credit inventory for the standard BOM one level down (which is a bad assumption) at standard cost for the good parent parts reported 
	 --the standard cost is assumed to be the batch creation date since the post date was not available at time of writing 
	 --the account number to use is from GLIE & the PLNT file 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, AQMTLP, A2.V6RPLN, 
		- FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'SBG', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		INNER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = TIPART AND 
			A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = A1.V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = A1.V6UNTI 
		INNER JOIN LGDAT.METHDM ON 
			AQPART = TIPART AND 
			AQPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = AQMTLP AND 
			A2.V6PLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
		CHPART = AQMTLP AND 
		CHPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = AQMTLP AND 
			CGPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = AQMTLP AND 
			Y0PLNT = AQPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = AQMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = TIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		A1.V6RPLN = 1 AND 
		TIQTYP <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --same as SBG except for the parent part is scrap pieces reported 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, AQMTLP, A2.V6RPLN, 
		- FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'SBS', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		INNER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = OEPART AND 
			A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = A1.V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = A1.V6UNTI 
		INNER JOIN LGDAT.METHDM ON 
			AQPART = OEPART AND 
			AQPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = AQMTLP AND 
			A2.V6PLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = AQMTLP AND 
			CHPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = AQMTLP AND 
			CGPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = AQMTLP AND 
			Y0PLNT = AQPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = AQMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = OEDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		A1.V6RPLN = 1 AND 
		OESQTY <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --credit scrap variance account according to standard scrap incorporated into the standard cost for good pieces reported 
	 --the calculation is STD_COST*(1-SCRAP_RATE)*GOOD_PIECES 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		- FLOAT (TIQTYP) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'ASG', 
		DIGITS (GOMTSV) ACCT, 
		- ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (TIQTYP) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		- FLOAT (TIQTYP) * (1 - FLOAT (AOEFF) / 100) <> 0 ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		- FLOAT (OESQTY) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'ASS', 
		DIGITS (GOMTSV) ACCT, 
		- ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (OESQTY) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		- FLOAT (OESQTY) * (1 - FLOAT (AOEFF) / 100) <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'ALG', 
		DIGITS (GOPYCL) ACCT, 
		ROUND (- CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * AO#MEN / AO#MCH + AOSETP * AOSCRW / V6OPTR) * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (TIQTYP) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (TIQTYP) SHRS, 
		AOSCRW SCRW, 
		CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
				C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'ALS', 
		DIGITS (GOPYCL) ACCT, 
		ROUND (- CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * AO#MEN / AO#MCH + AOSETP * AOSCRW / V6OPTR) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (OESQTY) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (OESQTY) SHRS, 
		AOSCRW SCRW, 
		CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'N' ; 
	 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'AVG', 
		DIGITS (GOBDCL) ACCT, 
		ROUND (- CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (TIQTYP) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (TIQTYP) SHRS, 
		AOSCRW SCRW, 
		CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'AVS', 
		DIGITS (GOBDCL) ACCT, 
		ROUND (- CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (OESQTY) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (OESQTY) SHRS, 
		AOSCRW SCRW, 
		CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'AFG', 
		DIGITS (GOBFCL) ACCT, 
		ROUND (- CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (TIQTYP) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (TIQTYP) SHRS, 
		AOSCRW SCRW, 
		CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------		 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'AFS', 
		DIGITS (GOBFCL) ACCT, 
		ROUND (- CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (OESQTY) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (OESQTY) SHRS, 
		AOSCRW SCRW, 
		CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------		 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'ACG', 
		DIGITS (GOOTCL) ACCT, 
		ROUND (- APCOST * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		INNER JOIN LGDAT.METHDO ON 
			APPART = TIPART AND 
			APPLNT = NWPLNT 
		INNER JOIN LGDAT.DEPTS ON	 
			AADEPT = AODEPT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'Y' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'ACS', 
		DIGITS (GOOTCL) ACCT, 
		ROUND (- APCOST * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		INNER JOIN LGDAT.METHDO ON 
			APPART = OEPART AND 
			APPLNT = NWPLNT 
		INNER JOIN LGDAT.DEPTS ON	 
			AADEPT = AODEPT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'Y' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'CPS', 
		DIGITS (GOMTSV) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			BATCH = NWBTID 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		- UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'BMT', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
				A1.V6PART = UIPART AND 
				A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = Y1PLNT 
	WHERE 
		A1.V6RPLN = 1 AND 
		UISEQ# = 10 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'ABT', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = UIPART AND 
			A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = UIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
	A1.V6RPLN = 1 AND 
	UISEQ# = 10 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'CPG', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			TIBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		TIQTYP <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'CPS', 
		DIGITS (GOMTSV) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			BATCH = NWBTID 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		OESQTY <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'AMG', 
		DIGITS (COALESCE (D.GNSTDO, P.GNSTDO)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			TIBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = TIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		TIQTYP <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO QTEMP.T 
	SELECT 
	'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
	OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
	OERESC, OEDEPT, 
	'AMS', 
	DIGITS (COALESCE (D.GNSTDO, P.GNSTDO)) ACCT, 
	ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2) AMT, 
	'', 0, 0, 0, 0, 0, 0 
	FROM 
	QTEMP.B 
	INNER JOIN LGDAT.RPRH ON 
	NWBTID = BATCH 
	INNER JOIN LGDAT.RPRP ON 
	OEBTID = BATCH 
	LEFT OUTER JOIN LGDAT.STKA ON 
	V6PART = OEPART AND 
	V6PLNT = NWPLNT 
	LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
	C1.IHPART = OEPART AND 
	C1.IHUNT2 = OEUNIT AND 
	C1.IHUNT1 = V6UNTI 
	LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
	C2.IHPART = OEPART AND 
	C2.IHUNT1 = OEUNIT AND 
	C2.IHUNT2 = V6UNTI 
	LEFT OUTER JOIN LGDAT.ICSTP ON 
	CHPART = OEPART AND 
	CHPLNT = NWPLNT 
	LEFT OUTER JOIN LGDAT.ICSTM ON 
	CGPART = OEPART AND 
	CGPLNT = NWPLNT 
	LEFT OUTER JOIN LGDAT.ICSTR ON 
	Y0PART = OEPART AND 
	Y0PLNT = NWPLNT 
	LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
	PART = OEPART AND 
	PLNT = NWPLNT AND 
	CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
	CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
	LEFT OUTER JOIN LGDAT.GLCCOM D ON 
	D.GNDEPT = OEDEPT 
	LEFT OUTER JOIN LGDAT.GLCCOM P ON 
	P.GNPLNT = NWPLNT AND 
	P.GNDEPT = '' 
	WHERE 
	OESEQ# = 10 AND 
	V6RPLN IN ('2', '3') AND 
	OESQTY <> 0 ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		- UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'BMT', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = UIPART AND 
			A1.V6PLNT = SUBSTR (UIDEPT, 1, 3) 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = Y1PLNT 
	WHERE 
		A1.V6RPLN IN ('2', '3') AND 
		UISEQ# = 10 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'ABT', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = UIPART AND 
			A1.V6PLNT = SUBSTR (UIDEPT, 1, 3) 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = UIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		A1.V6RPLN IN ('2', '3') AND 
		UISEQ# = 10 ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'OOBP', WRKO, BTCH, 0, SEQ#, '', '', 0, '', ADEP, 'OBP', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)), 
		- ROUND (SUM (AMNT), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.T 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = SUBSTR (ADEP, 1, 3) 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = ADEP AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNPLNT = SUBSTR (ADEP, 1, 3) AND 
			P.GNDEPT = '' AND 
			P.GNCOMP = YACOMP 
	GROUP BY 
		'OOBP', WRKO, BTCH, 0, SEQ#, ADEP, 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) 
	HAVING 
		ROUND (SUM (AMNT), 2) <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO RLARP.FFPDGLR1 SELECT * FROM QTEMP.T ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	DROP TABLE QTEMP.T ; 
	DROP TABLE QTEMP.B ; 
	OPEN C1 ; 
END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.PD_UD_R0 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.PD_UD_R0 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.PD_UD_R1 (
	IN VPERD CHAR(4)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.PD_UD_R1 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *CHG, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
  
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	DECLARE V_ERROR INTEGER ; 
	DECLARE MSG_VAR VARCHAR (255) ; 
	DECLARE RETRN_STATUS INTEGER ; 
	DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR SELECT * FROM TABLE (RLARP.F_PD_STK (VPERD)) AS X ; 
	 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION  --,SQLWARNING 
	BEGIN 
		SET V_ERROR = SQLCODE ; 
		GET DIAGNOSTICS RETRN_STATUS = RETURN_STATUS ; 
	 
		IF (V_ERROR IS NULL) OR (V_ERROR <> 0 AND V_ERROR <> 466) OR (RETRN_STATUS > 3) 
		THEN 
			SET MSG_VAR = 'PROC: ' || 'RLARP.PD_UD' || ', ' || COALESCE (MSG_VAR, '') || ', SQLCODE: ' || CHAR (V_ERROR) || ', PARAMS: ' ; 
			 --ROLLBACK; 
			 --COMMIT; 
			SET RETRN_STATUS = - 1 ; 
			SIGNAL SQLSTATE '75001' SET MESSAGE_TEXT = MSG_VAR ; 
		ELSE 
			SET V_ERROR = 0 ; 
		END IF ; 
	END ; 
  
  
	 --need to add standard department 
	 --need to add process variance 
	 --need to add line number for standard cost bom items 
	 --need to go back and restate RRAT for ASG 
	 --need to add procurement variance 
	 --need to take explosion approach to accomodate phantoms & sequnce numbers 
	 --fix standard cost history 
	 ----------------------------------------build FFCOSTEFFD for any new records-------------------------------------------------------------- 
	CALL RLARP.CH_UD ; 
  
	 ----------------------------------------setup production gl batch selection file---------------------------------------------------------- 
	DECLARE GLOBAL TEMPORARY TABLE B (BATCH INT) ; 
  
	 ----------------------------------------setup production gl work file--------------------------------------------------------------------- 
	DECLARE GLOBAL TEMPORARY TABLE T (
		SRCE CHAR (4), 
		WRKO VARCHAR (20), 
		BTCH INT, 
		ENT# INT, 
		SEQ# INT, 
		PART VARCHAR (20), 
		RPLN CHAR (1), 
		PQTY FLOAT, 
		ARSC VARCHAR (5), 
		ADEP VARCHAR (5), 
		ACTN VARCHAR (3), 
		ACCT CHAR (12), 
		AMNT DECIMAL (14, 2), 
		SRSC VARCHAR (5), 
		RHRS FLOAT, 
		RCRW FLOAT, 
		SHRS FLOAT, 
		SCRW FLOAT, 
		RATE FLOAT, 
		SIZE FLOAT 
	) ; 
		 
	 -----------------------------select posted batches from the target period to be evaluated------------------------------------------------- 
	INSERT INTO 
		QTEMP.B 
	SELECT DISTINCT 
		NWBTID 
	FROM 
		LGDAT.RPRH 
		EXCEPTION JOIN RLARP.FFPDGLR1 ON 
			BTID = NWBTID 
	WHERE 
		DIGITS (NWFSYY) || DIGITS (NWFSPP) = VPERD AND 
		NWPOST = 'Y' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --setup completed production for good pieces, entry is to debit inventory for the standard cost for the quantity reported 
	 --standard cost at the time of posting is falsely estimated to be the batch creation date since post date was not available 
	 --at the time this was originally written 
	 --the account number to use is from the GLIE & PLNT files 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'CPG', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			TIBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --credit inventory for the standard BOM one level down (which is a bad assumption) at standard cost for the good parent parts reported 
	 --the standard cost is assumed to be the batch creation date since the post date was not available at time of writing 
	 --the account number to use is from GLIE & the PLNT file 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, AQMTLP, A2.V6RPLN, 
		- FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'SBG', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		INNER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = TIPART AND 
			A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = A1.V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = A1.V6UNTI 
		INNER JOIN LGDAT.METHDM ON 
			AQPART = TIPART AND 
			AQPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = AQMTLP AND 
			A2.V6PLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
		CHPART = AQMTLP AND 
		CHPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = AQMTLP AND 
			CGPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = AQMTLP AND 
			Y0PLNT = AQPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = AQMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = TIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		A1.V6RPLN = 1 AND 
		TIQTYP <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --same as SBG except for the parent part is scrap pieces reported 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, AQMTLP, A2.V6RPLN, 
		- FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'SBS', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		INNER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = OEPART AND 
			A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = A1.V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = A1.V6UNTI 
		INNER JOIN LGDAT.METHDM ON 
			AQPART = OEPART AND 
			AQPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = AQMTLP AND 
			A2.V6PLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = AQMTLP AND 
			CHPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = AQMTLP AND 
			CGPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = AQMTLP AND 
			Y0PLNT = AQPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = AQMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = OEDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		A1.V6RPLN = 1 AND 
		OESQTY <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --credit scrap variance account according to standard scrap incorporated into the standard cost for good pieces reported 
	 --the calculation is STD_COST*(1-SCRAP_RATE)*GOOD_PIECES 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		- FLOAT (TIQTYP) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'ASG', 
		DIGITS (GOMTSV) ACCT, 
		- ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (TIQTYP) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		- FLOAT (TIQTYP) * (1 - FLOAT (AOEFF) / 100) <> 0 ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		- FLOAT (OESQTY) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'ASS', 
		DIGITS (GOMTSV) ACCT, 
		- ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (OESQTY) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		- FLOAT (OESQTY) * (1 - FLOAT (AOEFF) / 100) <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'ALG', 
		DIGITS (GOPYCL) ACCT, 
		ROUND (- CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * AO#MEN / AO#MCH + AOSETP * AOSCRW / V6OPTR) * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (TIQTYP) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (TIQTYP) SHRS, 
		AOSCRW SCRW, 
		CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
				C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'ALS', 
		DIGITS (GOPYCL) ACCT, 
		ROUND (- CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * AO#MEN / AO#MCH + AOSETP * AOSCRW / V6OPTR) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (OESQTY) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (OESQTY) SHRS, 
		AOSCRW SCRW, 
		CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'N' ; 
	 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'AVG', 
		DIGITS (GOBDCL) ACCT, 
		ROUND (- CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (TIQTYP) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (TIQTYP) SHRS, 
		AOSCRW SCRW, 
		CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'AVS', 
		DIGITS (GOBDCL) ACCT, 
		ROUND (- CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (OESQTY) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (OESQTY) SHRS, 
		AOSCRW SCRW, 
		CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'AFG', 
		DIGITS (GOBFCL) ACCT, 
		ROUND (- CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (TIQTYP) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (TIQTYP) SHRS, 
		AOSCRW SCRW, 
		CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------		 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'AFS', 
		DIGITS (GOBFCL) ACCT, 
		ROUND (- CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (OESQTY) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (OESQTY) SHRS, 
		AOSCRW SCRW, 
		CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------		 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'ACG', 
		DIGITS (GOOTCL) ACCT, 
		ROUND (- APCOST * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		INNER JOIN LGDAT.METHDO ON 
			APPART = TIPART AND 
			APPLNT = NWPLNT 
		INNER JOIN LGDAT.DEPTS ON	 
			AADEPT = AODEPT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'Y' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'ACS', 
		DIGITS (GOOTCL) ACCT, 
		ROUND (- APCOST * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		INNER JOIN LGDAT.METHDO ON 
			APPART = OEPART AND 
			APPLNT = NWPLNT 
		INNER JOIN LGDAT.DEPTS ON	 
			AADEPT = AODEPT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'Y' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'CPS', 
		DIGITS (GOMTSV) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			BATCH = NWBTID 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		- UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'BMT', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
				A1.V6PART = UIPART AND 
				A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = Y1PLNT 
	WHERE 
		A1.V6RPLN = 1 AND 
		UISEQ# = 10 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'ABT', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = UIPART AND 
			A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = UIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
	A1.V6RPLN = 1 AND 
	UISEQ# = 10 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'CPG', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			TIBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		TIQTYP <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'CPS', 
		DIGITS (GOMTSV) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			BATCH = NWBTID 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		OESQTY <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'AMG', 
		DIGITS (COALESCE (D.GNSTDO, P.GNSTDO)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			TIBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = TIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		TIQTYP <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO QTEMP.T 
	SELECT 
	'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
	OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
	OERESC, OEDEPT, 
	'AMS', 
	DIGITS (COALESCE (D.GNSTDO, P.GNSTDO)) ACCT, 
	ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2) AMT, 
	'', 0, 0, 0, 0, 0, 0 
	FROM 
	QTEMP.B 
	INNER JOIN LGDAT.RPRH ON 
	NWBTID = BATCH 
	INNER JOIN LGDAT.RPRP ON 
	OEBTID = BATCH 
	LEFT OUTER JOIN LGDAT.STKA ON 
	V6PART = OEPART AND 
	V6PLNT = NWPLNT 
	LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
	C1.IHPART = OEPART AND 
	C1.IHUNT2 = OEUNIT AND 
	C1.IHUNT1 = V6UNTI 
	LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
	C2.IHPART = OEPART AND 
	C2.IHUNT1 = OEUNIT AND 
	C2.IHUNT2 = V6UNTI 
	LEFT OUTER JOIN LGDAT.ICSTP ON 
	CHPART = OEPART AND 
	CHPLNT = NWPLNT 
	LEFT OUTER JOIN LGDAT.ICSTM ON 
	CGPART = OEPART AND 
	CGPLNT = NWPLNT 
	LEFT OUTER JOIN LGDAT.ICSTR ON 
	Y0PART = OEPART AND 
	Y0PLNT = NWPLNT 
	LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
	PART = OEPART AND 
	PLNT = NWPLNT AND 
	CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
	CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
	LEFT OUTER JOIN LGDAT.GLCCOM D ON 
	D.GNDEPT = OEDEPT 
	LEFT OUTER JOIN LGDAT.GLCCOM P ON 
	P.GNPLNT = NWPLNT AND 
	P.GNDEPT = '' 
	WHERE 
	OESEQ# = 10 AND 
	V6RPLN IN ('2', '3') AND 
	OESQTY <> 0 ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		- UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'BMT', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = UIPART AND 
			A1.V6PLNT = SUBSTR (UIDEPT, 1, 3) 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = Y1PLNT 
	WHERE 
		A1.V6RPLN IN ('2', '3') AND 
		UISEQ# = 10 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'ABT', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = UIPART AND 
			A1.V6PLNT = SUBSTR (UIDEPT, 1, 3) 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = UIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		A1.V6RPLN IN ('2', '3') AND 
		UISEQ# = 10 ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'OOBP', WRKO, BTCH, 0, SEQ#, '', '', 0, '', ADEP, 'OBP', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)), 
		- ROUND (SUM (AMNT), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.T 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = SUBSTR (ADEP, 1, 3) 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = ADEP AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNPLNT = SUBSTR (ADEP, 1, 3) AND 
			P.GNDEPT = '' AND 
			P.GNCOMP = YACOMP 
	GROUP BY 
		'OOBP', WRKO, BTCH, 0, SEQ#, ADEP, 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) 
	HAVING 
		ROUND (SUM (AMNT), 2) <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO RLARP.FFPDGLR1 SELECT * FROM QTEMP.T ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	DROP TABLE QTEMP.T ; 
	DROP TABLE QTEMP.B ; 
	 
	 --CALL RLARP.P_BLT_MUV (VPERD) ; 
	INSERT INTO RLARP.FFBLTMUV SELECT * FROM RLARP.V_BUILTMUV WHERE BTID IN (
		SELECT DISTINCT 
			T.BTID 
		FROM 
			RLARP.FFPDGLR1 T 
			EXCEPTION JOIN RLARP.FFBLTMUV B ON 
				B.BTID = T.BTID 
			INNER JOIN LGDAT.RPRH ON 
				NWBTID = T.BTID 
		WHERE 
			DIGITS (NWFSYY) || DIGITS (NWFSPP) = VPERD) ; 
			 
	OPEN C1 ; 
	 
	 
END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.PD_UD_R1 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.PD_UD_R1 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.PD_UD_R2 (
	IN VPERD CHAR(4)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.PD_UD_R2 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *CHG, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
  
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	DECLARE V_ERROR INTEGER ; 
	DECLARE MSG_VAR VARCHAR (255) ; 
	DECLARE RETRN_STATUS INTEGER ; 
	 --DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR SELECT * FROM TABLE (RLARP.F_PD_STK (VPERD)) AS X ; 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION  --,SQLWARNING 
	BEGIN 
		SET V_ERROR = SQLCODE ; 
		GET DIAGNOSTICS RETRN_STATUS = RETURN_STATUS ; 
	 
		IF (V_ERROR IS NULL) OR (V_ERROR <> 0 AND V_ERROR <> 466) OR (RETRN_STATUS > 3) 
		THEN 
			SET MSG_VAR = 'PROC: ' || 'RLARP.PD_UD' || ', ' || COALESCE (MSG_VAR, '') || ', SQLCODE: ' || CHAR (V_ERROR) || ', PARAMS: ' ; 
			 --ROLLBACK; 
			 --COMMIT; 
			SET RETRN_STATUS = - 1 ; 
			SIGNAL SQLSTATE '75001' SET MESSAGE_TEXT = MSG_VAR ; 
		ELSE 
			SET V_ERROR = 0 ; 
		END IF ; 
	END ; 
  
  
	 --need to add standard department 
	 --need to add process variance 
	 --need to add line number for standard cost bom items 
	 --need to go back and restate RRAT for ASG 
	 --need to add procurement variance 
	 --need to take explosion approach to accomodate phantoms & sequnce numbers 
	 --fix standard cost history 
	 ----------------------------------------build FFCOSTEFFD for any new records-------------------------------------------------------------- 
	CALL RLARP.CH_UD ; 
  
	 ----------------------------------------setup production gl batch selection file---------------------------------------------------------- 
	DECLARE GLOBAL TEMPORARY TABLE B (BATCH INT) ; 
  
	 ----------------------------------------setup production gl work file--------------------------------------------------------------------- 
	DECLARE GLOBAL TEMPORARY TABLE T (
		SRCE CHAR (4), 
		WRKO VARCHAR (20), 
		BTCH INT, 
		ENT# INT, 
		SEQ# INT, 
		PART VARCHAR (20), 
		RPLN CHAR (1), 
		PQTY FLOAT, 
		ARSC VARCHAR (5), 
		ADEP VARCHAR (5), 
		ACTN VARCHAR (3), 
		ACCT CHAR (12), 
		AMNT DECIMAL (14, 2), 
		SRSC VARCHAR (5), 
		RHRS FLOAT, 
		RCRW FLOAT, 
		SHRS FLOAT, 
		SCRW FLOAT, 
		RATE FLOAT, 
		SIZE FLOAT 
	) ; 
		 
	 -----------------------------select posted batches from the target period to be evaluated------------------------------------------------- 
	INSERT INTO 
		QTEMP.B 
	SELECT DISTINCT 
		NWBTID 
	FROM 
		LGDAT.RPRH 
		EXCEPTION JOIN RLARP.FFPDGLR1 ON 
			BTID = NWBTID 
	WHERE 
		DIGITS (NWFSYY) || DIGITS (NWFSPP) = VPERD AND 
		NWPOST = 'Y' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --setup completed production for good pieces, entry is to debit inventory for the standard cost for the quantity reported 
	 --standard cost at the time of posting is falsely estimated to be the batch creation date since post date was not available 
	 --at the time this was originally written 
	 --the account number to use is from the GLIE & PLNT files 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'CPG', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			TIBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --credit inventory for the standard BOM one level down (which is a bad assumption) at standard cost for the good parent parts reported 
	 --the standard cost is assumed to be the batch creation date since the post date was not available at time of writing 
	 --the account number to use is from GLIE & the PLNT file 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, AQMTLP, A2.V6RPLN, 
		- FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'SBG', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		INNER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = TIPART AND 
			A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = A1.V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = A1.V6UNTI 
		INNER JOIN LGDAT.METHDM ON 
			AQPART = TIPART AND 
			AQPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = AQMTLP AND 
			A2.V6PLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
		CHPART = AQMTLP AND 
		CHPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = AQMTLP AND 
			CGPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = AQMTLP AND 
			Y0PLNT = AQPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = AQMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = TIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		A1.V6RPLN = 1 AND 
		TIQTYP <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --same as SBG except for the parent part is scrap pieces reported 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, AQMTLP, A2.V6RPLN, 
		- FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'SBS', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		INNER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = OEPART AND 
			A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = A1.V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = A1.V6UNTI 
		INNER JOIN LGDAT.METHDM ON 
			AQPART = OEPART AND 
			AQPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = AQMTLP AND 
			A2.V6PLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = AQMTLP AND 
			CHPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = AQMTLP AND 
			CGPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = AQMTLP AND 
			Y0PLNT = AQPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = AQMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = OEDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		A1.V6RPLN = 1 AND 
		OESQTY <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --credit scrap variance account according to standard scrap incorporated into the standard cost for good pieces reported 
	 --the calculation is STD_COST*(1-SCRAP_RATE)*GOOD_PIECES 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		- FLOAT (TIQTYP) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'ASG', 
		DIGITS (GOMTSV) ACCT, 
		- ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (TIQTYP) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		- FLOAT (TIQTYP) * (1 - FLOAT (AOEFF) / 100) <> 0 ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		- FLOAT (OESQTY) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'ASS', 
		DIGITS (GOMTSV) ACCT, 
		- ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (OESQTY) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		- FLOAT (OESQTY) * (1 - FLOAT (AOEFF) / 100) <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'ALG', 
		DIGITS (GOPYCL) ACCT, 
		ROUND (- CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * AO#MEN / AO#MCH + AOSETP * AOSCRW / V6OPTR) * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (TIQTYP) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (TIQTYP) SHRS, 
		AOSCRW SCRW, 
		CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
				C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'ALS', 
		DIGITS (GOPYCL) ACCT, 
		ROUND (- CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * AO#MEN / AO#MCH + AOSETP * AOSCRW / V6OPTR) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (OESQTY) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (OESQTY) SHRS, 
		AOSCRW SCRW, 
		CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'N' ; 
	 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'AVG', 
		DIGITS (GOBDCL) ACCT, 
		ROUND (- CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (TIQTYP) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (TIQTYP) SHRS, 
		AOSCRW SCRW, 
		CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'AVS', 
		DIGITS (GOBDCL) ACCT, 
		ROUND (- CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (OESQTY) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (OESQTY) SHRS, 
		AOSCRW SCRW, 
		CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'AFG', 
		DIGITS (GOBFCL) ACCT, 
		ROUND (- CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (TIQTYP) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (TIQTYP) SHRS, 
		AOSCRW SCRW, 
		CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------		 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'AFS', 
		DIGITS (GOBFCL) ACCT, 
		ROUND (- CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (OESQTY) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (OESQTY) SHRS, 
		AOSCRW SCRW, 
		CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'N' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------		 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'ACG', 
		DIGITS (GOOTCL) ACCT, 
		ROUND (- APCOST * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		INNER JOIN LGDAT.METHDO ON 
			APPART = TIPART AND 
			APPLNT = NWPLNT 
		INNER JOIN LGDAT.DEPTS ON	 
			AADEPT = AODEPT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'Y' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'ACS', 
		DIGITS (GOOTCL) ACCT, 
		ROUND (- APCOST * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		INNER JOIN LGDAT.METHDO ON 
			APPART = OEPART AND 
			APPLNT = NWPLNT 
		INNER JOIN LGDAT.DEPTS ON	 
			AADEPT = AODEPT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'Y' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'CPS', 
		DIGITS (GOMTSV) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			BATCH = NWBTID 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		- UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'BMT', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
				A1.V6PART = UIPART AND 
				A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = Y1PLNT 
	WHERE 
		A1.V6RPLN = 1 AND 
		UISEQ# = 10 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'ABT', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = UIPART AND 
			A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = UIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
	A1.V6RPLN = 1 AND 
	UISEQ# = 10 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'CPG', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			TIBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		TIQTYP <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'CPS', 
		DIGITS (GOMTSV) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			BATCH = NWBTID 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		OESQTY <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'AMG', 
		DIGITS (COALESCE (D.GNSTDO, P.GNSTDO)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			TIBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = TIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		TIQTYP <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO QTEMP.T 
	SELECT 
	'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
	OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
	OERESC, OEDEPT, 
	'AMS', 
	DIGITS (COALESCE (D.GNSTDO, P.GNSTDO)) ACCT, 
	ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2) AMT, 
	'', 0, 0, 0, 0, 0, 0 
	FROM 
	QTEMP.B 
	INNER JOIN LGDAT.RPRH ON 
	NWBTID = BATCH 
	INNER JOIN LGDAT.RPRP ON 
	OEBTID = BATCH 
	LEFT OUTER JOIN LGDAT.STKA ON 
	V6PART = OEPART AND 
	V6PLNT = NWPLNT 
	LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
	C1.IHPART = OEPART AND 
	C1.IHUNT2 = OEUNIT AND 
	C1.IHUNT1 = V6UNTI 
	LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
	C2.IHPART = OEPART AND 
	C2.IHUNT1 = OEUNIT AND 
	C2.IHUNT2 = V6UNTI 
	LEFT OUTER JOIN LGDAT.ICSTP ON 
	CHPART = OEPART AND 
	CHPLNT = NWPLNT 
	LEFT OUTER JOIN LGDAT.ICSTM ON 
	CGPART = OEPART AND 
	CGPLNT = NWPLNT 
	LEFT OUTER JOIN LGDAT.ICSTR ON 
	Y0PART = OEPART AND 
	Y0PLNT = NWPLNT 
	LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
	PART = OEPART AND 
	PLNT = NWPLNT AND 
	CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
	CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
	LEFT OUTER JOIN LGDAT.GLCCOM D ON 
	D.GNDEPT = OEDEPT 
	LEFT OUTER JOIN LGDAT.GLCCOM P ON 
	P.GNPLNT = NWPLNT AND 
	P.GNDEPT = '' 
	WHERE 
	OESEQ# = 10 AND 
	V6RPLN IN ('2', '3') AND 
	OESQTY <> 0 ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		- UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'BMT', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = UIPART AND 
			A1.V6PLNT = SUBSTR (UIDEPT, 1, 3) 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = Y1PLNT 
	WHERE 
		A1.V6RPLN IN ('2', '3') AND 
		UISEQ# = 10 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'ABT', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.B 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = UIPART AND 
			A1.V6PLNT = SUBSTR (UIDEPT, 1, 3) 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = UIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		A1.V6RPLN IN ('2', '3') AND 
		UISEQ# = 10 ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		QTEMP.T 
	SELECT 
		'OOBP', WRKO, BTCH, 0, SEQ#, '', '', 0, '', ADEP, 'OBP', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)), 
		- ROUND (SUM (AMNT), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		QTEMP.T 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = SUBSTR (ADEP, 1, 3) 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = ADEP AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNPLNT = SUBSTR (ADEP, 1, 3) AND 
			P.GNDEPT = '' AND 
			P.GNCOMP = YACOMP 
	GROUP BY 
		'OOBP', WRKO, BTCH, 0, SEQ#, ADEP, 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) 
	HAVING 
		ROUND (SUM (AMNT), 2) <> 0 ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO RLARP.FFPDGLR1 SELECT * FROM QTEMP.T ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	DROP TABLE QTEMP.T ; 
	DROP TABLE QTEMP.B ; 
	 
	 --CALL RLARP.P_BLT_MUV (VPERD) ; 
	/* 
	INSERT INTO RLARP.FFBLTMUV SELECT * FROM RLARP.V_BUILTMUV WHERE BTID IN ( 
		SELECT DISTINCT  
			T.BTID  
		FROM  
			RLARP.FFPDGLR1 T  
			EXCEPTION JOIN RLARP.FFBLTMUV B ON  
				B.BTID = T.BTID  
			INNER JOIN LGDAT.RPRH ON  
				NWBTID = T.BTID  
		WHERE  
			DIGITS (NWFSYY) || DIGITS (NWFSPP) = VPERD) ;  
	*/ 
	 --OPEN C1 ; 
END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.PD_UD_R2 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.PD_UD_R2 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.PD_UD_R3 (
	IN VPERD CHAR(4)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.PD_UD_R3 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *CHG, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
  
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	DECLARE V_ERROR INTEGER ; 
	DECLARE MSG_VAR VARCHAR (255) ; 
	DECLARE RETRN_STATUS INTEGER ; 
	 --DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR SELECT * FROM TABLE (RLARP.F_PD_STK (VPERD)) AS X ; 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION  --,SQLWARNING 
	BEGIN 
		SET V_ERROR = SQLCODE ; 
		GET DIAGNOSTICS RETRN_STATUS = RETURN_STATUS ; 
	 
		IF (V_ERROR IS NULL) OR (V_ERROR <> 0 AND V_ERROR <> 466) OR (RETRN_STATUS > 3) 
		THEN 
			SET MSG_VAR = 'PROC: ' || 'RLARP.PD_UD' || ', ' || COALESCE (MSG_VAR, '') || ', SQLCODE: ' || CHAR (V_ERROR) || ', PARAMS: ' ; 
			 --ROLLBACK; 
			 --COMMIT; 
			SET RETRN_STATUS = - 1 ; 
			SIGNAL SQLSTATE '75001' SET MESSAGE_TEXT = MSG_VAR ; 
		ELSE 
			SET V_ERROR = 0 ; 
		END IF ; 
	END ; 
  
  
	 --need to add standard department 
	 --need to add process variance 
	 --need to add line number for standard cost bom items 
	 --need to go back and restate RRAT for ASG 
	 --need to add procurement variance 
	 --need to take explosion approach to accomodate phantoms & sequnce numbers 
	 --fix standard cost history 
	 ----------------------------------------build FFCOSTEFFD for any new records-------------------------------------------------------------- 
	CALL RLARP.CH_UD ; 
	SET MSG_VAR = 'COST HIST UPDATE COMPLETE' ; 
  
	 ----------------------------------------setup production gl batch selection file---------------------------------------------------------- 
	CREATE TABLE RLARP.B1 (BATCH INT) ; 
	SET MSG_VAR = ', TABLE B1 CREATED' ; 
  
	 ----------------------------------------setup production gl work file--------------------------------------------------------------------- 
	CREATE TABLE RLARP.T1 (
		SRCE CHAR (4), 
		WRKO VARCHAR (20), 
		BTCH INT, 
		ENT# INT, 
		SEQ# INT, 
		PART VARCHAR (20), 
		RPLN CHAR (1), 
		PQTY FLOAT, 
		ARSC VARCHAR (5), 
		ADEP VARCHAR (5), 
		ACTN VARCHAR (3), 
		ACCT CHAR (12), 
		AMNT DECIMAL (20, 2), 
		SRSC VARCHAR (5), 
		RHRS FLOAT, 
		RCRW FLOAT, 
		SHRS FLOAT, 
		SCRW FLOAT, 
		RATE FLOAT, 
		SIZE FLOAT 
	) ; 
	SET MSG_VAR = ', TABLE T1 CREATED' ; 
		 
	 -----------------------------select posted batches from the target period to be evaluated------------------------------------------------- 
	INSERT INTO 
		RLARP.B1 
	SELECT DISTINCT 
		NWBTID 
	FROM 
		LGDAT.RPRH 
		EXCEPTION JOIN RLARP.FFPDGLR2 ON 
			BTID = NWBTID 
	WHERE 
		DIGITS (NWFSYY) || DIGITS (NWFSPP) = VPERD AND 
		NWPOST = 'Y' ; 
	SET MSG_VAR = ', BATCH SELECTION COMPLETE' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --setup completed production for good pieces, entry is to debit inventory for the standard cost for the quantity reported 
	 --standard cost at the time of posting is falsely estimated to be the batch creation date since post date was not available 
	 --at the time this was originally written 
	 --the account number to use is from the GLIE & PLNT files 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'CPG', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			TIBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 ; 
	SET MSG_VAR = ', CPG' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --credit inventory for the standard BOM one level down (which is a bad assumption) at standard cost for the good parent parts reported 
	 --the standard cost is assumed to be the batch creation date since the post date was not available at time of writing 
	 --the account number to use is from GLIE & the PLNT file 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, AQMTLP, A2.V6RPLN, 
		- FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'SBG', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		INNER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = TIPART AND 
			A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = A1.V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = A1.V6UNTI 
		INNER JOIN LGDAT.METHDM ON 
			AQPART = TIPART AND 
			AQPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = AQMTLP AND 
			A2.V6PLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
		CHPART = AQMTLP AND 
		CHPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = AQMTLP AND 
			CGPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = AQMTLP AND 
			Y0PLNT = AQPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = AQMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = TIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		A1.V6RPLN = 1 AND 
		TIQTYP <> 0 ; 
	SET MSG_VAR = ', SBG' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --same as SBG except for the parent part is scrap pieces reported 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, AQMTLP, A2.V6RPLN, 
		- FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'SBS', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (AQQPPC / AQQTYM) / FLOAT (1 - AQSCRP / 100) * CASE AQRQBY WHEN 'B' THEN - 1 ELSE 1 END * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		INNER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = OEPART AND 
			A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = A1.V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = A1.V6UNTI 
		INNER JOIN LGDAT.METHDM ON 
			AQPART = OEPART AND 
			AQPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = AQMTLP AND 
			A2.V6PLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = AQMTLP AND 
			CHPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = AQMTLP AND 
			CGPLNT = AQPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = AQMTLP AND 
			Y0PLNT = AQPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = AQMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = OEDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		A1.V6RPLN = 1 AND 
		OESQTY <> 0 ; 
	SET MSG_VAR = ', SBS' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	 --credit scrap variance account according to standard scrap incorporated into the standard cost for good pieces reported 
	 --the calculation is STD_COST*(1-SCRAP_RATE)*GOOD_PIECES 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		- FLOAT (TIQTYP) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'ASG', 
		DIGITS (GOMTSV) ACCT, 
		- ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (TIQTYP) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		- FLOAT (TIQTYP) * (1 - FLOAT (AOEFF) / 100) <> 0 ; 
	SET MSG_VAR = ', ASG' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		- FLOAT (OESQTY) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'ASS', 
		DIGITS (GOMTSV) ACCT, 
		- ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (OESQTY) * (1 - FLOAT (AOEFF) / 100) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		- FLOAT (OESQTY) * (1 - FLOAT (AOEFF) / 100) <> 0 ; 
	SET MSG_VAR = ', ASS' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'ALG', 
		DIGITS (GOPYCL) ACCT, 
		ROUND (- CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * AO#MEN / AO#MCH + AOSETP * AOSCRW / V6OPTR) * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (TIQTYP) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (TIQTYP) SHRS, 
		AOSCRW SCRW, 
		CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
				C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'N' ; 
	SET MSG_VAR = ', ALG' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'ALS', 
		DIGITS (GOPYCL) ACCT, 
		ROUND (- CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * AO#MEN / AO#MCH + AOSETP * AOSCRW / V6OPTR) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (OESQTY) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (OESQTY) SHRS, 
		AOSCRW SCRW, 
		CASE ABLABR WHEN 0 THEN IFNULL (AASTDR, 0) ELSE IFNULL (ABLABR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'N' ; 
	SET MSG_VAR = ', ALS' ; 
	 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'AVG', 
		DIGITS (GOBDCL) ACCT, 
		ROUND (- CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (TIQTYP) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (TIQTYP) SHRS, 
		AOSCRW SCRW, 
		CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'N' ; 
	SET MSG_VAR = ', AVG' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'AVS', 
		DIGITS (GOBDCL) ACCT, 
		ROUND (- CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (OESQTY) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (OESQTY) SHRS, 
		AOSCRW SCRW, 
		CASE ABVBRD WHEN 0 THEN IFNULL (AAVBRD, 0) ELSE IFNULL (ABVBRD, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'N' ; 
	SET MSG_VAR = ', AVS' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'AFG', 
		DIGITS (GOBFCL) ACCT, 
		ROUND (- CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (TIQTYP) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (TIQTYP) SHRS, 
		AOSCRW SCRW, 
		CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'N' ; 
	SET MSG_VAR = ', AFG' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------		 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'AFS', 
		DIGITS (GOBFCL) ACCT, 
		ROUND (- CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END * (CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END + AOSETP / V6OPTR) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		AORESC, 
		CASE AORUNS WHEN 0 THEN 0 ELSE 1 / AORUNS END * FLOAT (OESQTY) RHRS, 
		AO#MEN / AO#MCH RCRW, 
		AOSETP / V6OPTR * FLOAT (OESQTY) SHRS, 
		AOSCRW SCRW, 
		CASE ABBRDR WHEN 0 THEN IFNULL (AABRDR, 0) ELSE IFNULL (ABBRDR, 0) END RRAT, 
		V6OPTR SRAT 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = OEPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = OEPART 
		LEFT OUTER JOIN LGDAT.RESRE ON 
			ABDEPT = AODEPT AND 
			ABRESC = AORESC 
		LEFT OUTER JOIN LGDAT.DEPTS ON 
			ABDEPT = AADEPT 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
  
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'N' ; 
	SET MSG_VAR = ', AFS' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------		 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'ACG', 
		DIGITS (GOOTCL) ACCT, 
		ROUND (- APCOST * FLOAT (TIQTYP) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			BATCH = TIBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = TIPART AND 
			AOPLNT = NWPLNT 
		INNER JOIN LGDAT.METHDO ON 
			APPART = TIPART AND 
			APPLNT = NWPLNT 
		INNER JOIN LGDAT.DEPTS ON	 
			AADEPT = AODEPT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = TIDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN = 1 AND 
		TIQTYP <> 0 AND 
		AAOSRV = 'Y' ; 
	SET MSG_VAR = ', ACG' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'ACS', 
		DIGITS (GOOTCL) ACCT, 
		ROUND (- APCOST * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		INNER JOIN LGDAT.METHDR ON 
			AOPART = OEPART AND 
			AOPLNT = NWPLNT 
		INNER JOIN LGDAT.METHDO ON 
			APPART = OEPART AND 
			APPLNT = NWPLNT 
		INNER JOIN LGDAT.DEPTS ON	 
			AADEPT = AODEPT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 AND 
		AAOSRV = 'Y' ; 
	SET MSG_VAR = ', ACS' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'CPS', 
		DIGITS (GOMTSV) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			BATCH = NWBTID 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN = 1 AND 
		OESQTY <> 0 ; 
	SET MSG_VAR = ', CPS' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		- UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'BMT', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
				A1.V6PART = UIPART AND 
				A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = Y1PLNT 
	WHERE 
		A1.V6RPLN = 1 AND 
		UISEQ# = 10 ; 
	SET MSG_VAR = ', BMT' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'ABT', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = UIPART AND 
			A1.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = UIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
	A1.V6RPLN = 1 AND 
	UISEQ# = 10 ; 
	SET MSG_VAR = ', ABT' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'CPG', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			TIBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = TIPART 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = TIPART 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		TIQTYP <> 0 ; 
	SET MSG_VAR = ', CPG' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'CPS', 
		DIGITS (GOMTSV) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * FLOAT (OESQTY) * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			BATCH = NWBTID 
		INNER JOIN LGDAT.RPRP ON 
			BATCH = OEBTID 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCDEP ON 
			GOCODE = OEDEPT AND 
			GOCOMP = YACOMP 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		OESQTY <> 0 ; 
	SET MSG_VAR = ', CPS' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRQ', TIJOB#, TIBTID, TIENT#, TISEQ#, TIPART, V6RPLN, 
		TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		TIRESC, TIDEPT, 
		'AMG', 
		DIGITS (COALESCE (D.GNSTDO, P.GNSTDO)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * TIQTYP * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRQ ON 
			TIBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = TIPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = TIPART AND 
			C1.IHUNT2 = TIUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = TIPART AND 
			C2.IHUNT1 = TIUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = TIPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = TIPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = TIPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = TIPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (TICDAT) || CHAR (TICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (TICDAT) || CHAR (TICTIM) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = TIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		TISEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		TIQTYP <> 0 ; 
	SET MSG_VAR = ', AMG' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO RLARP.T1 
	SELECT 
		'RPRP', OEJOB#, OEBTID, OEENT#, OESEQ#, OEPART, V6RPLN, 
		OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 
		OERESC, OEDEPT, 
		'AMS', 
		DIGITS (COALESCE (D.GNSTDO, P.GNSTDO)) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * OESQTY * COALESCE ((C1.IHCNV1 / C1.IHCNV2), (C2.IHCNV2 / C2.IHCNV1), FLOAT (1)), 2) AMT, 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRP ON 
			OEBTID = BATCH 
		LEFT OUTER JOIN LGDAT.STKA ON 
			V6PART = OEPART AND 
			V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.PUNIT C1 ON 
			C1.IHPART = OEPART AND 
			C1.IHUNT2 = OEUNIT AND 
			C1.IHUNT1 = V6UNTI 
		LEFT OUTER JOIN LGDAT.PUNIT C2 ON 
			C2.IHPART = OEPART AND 
			C2.IHUNT1 = OEUNIT AND 
			C2.IHUNT2 = V6UNTI 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = OEPART AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = OEPART AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = OEPART AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = OEPART AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (OECDAT) || CHAR (OECTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (OECDAT) || CHAR (OECTIM) 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = OEDEPT 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNPLNT = NWPLNT AND 
			P.GNDEPT = '' 
	WHERE 
		OESEQ# = 10 AND 
		V6RPLN IN ('2', '3') AND 
		OESQTY <> 0 ; 
	SET MSG_VAR = ', AMS' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		- UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'BMT', 
		YACOMP || DIGITS (Y1INVA) ACCT, 
		ROUND (- COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = UIPART AND 
			A1.V6PLNT = SUBSTR (UIDEPT, 1, 3) 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.GLIE ON 
			Y1PLNT = NWPLNT AND 
			Y1GLEC = COALESCE (AWGLED, AVGLED) 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = Y1PLNT 
	WHERE 
		A1.V6RPLN IN ('2', '3') AND 
		UISEQ# = 10 ; 
	SET MSG_VAR = ', BMT' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'RPRM', UIJOB#, UIBTID, UIENT#, UISEQ#, UIMTLP, A2.V6RPLN, 
		UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 
		UIRESC, UIDEPT, 
		'ABT', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) ACCT, 
		ROUND (COALESCE (FCOST, CGSTCS, CHSTCS, Y0STCS, 0) * UITQTY * CASE UIRQBY WHEN 'B' THEN - 1 ELSE 1 END, 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.B1 
		INNER JOIN LGDAT.RPRH ON 
			NWBTID = BATCH 
		INNER JOIN LGDAT.RPRM ON 
			BATCH = UIBTID 
		LEFT OUTER JOIN LGDAT.STKA A1 ON 
			A1.V6PART = UIPART AND 
			A1.V6PLNT = SUBSTR (UIDEPT, 1, 3) 
		LEFT OUTER JOIN LGDAT.STKA A2 ON 
			A2.V6PART = UIMTLP AND 
			A2.V6PLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTP ON 
			CHPART = UIMTLP AND 
			CHPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTM ON 
			CGPART = UIMTLP AND 
			CGPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.ICSTR ON 
			Y0PART = UIMTLP AND 
			Y0PLNT = NWPLNT 
		LEFT OUTER JOIN RLARP.FFCOSTEFFD ON 
			PART = UIMTLP AND 
			PLNT = NWPLNT AND 
			CHAR (FDT) || CHAR (FTM) <= CHAR (UICDAT) || CHAR (UICTIM) AND 
			CHAR (TDT) || CHAR (TTM) >= CHAR (UICDAT) || CHAR (UICTIM) 
		LEFT OUTER JOIN LGDAT.STKMM ON 
			AVPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.STKMP ON 
			AWPART = UIMTLP 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = NWPLNT 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = UIDEPT AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNDEPT = '' AND 
			P.GNPLNT = NWPLNT AND 
			P.GNCOMP = YACOMP 
	WHERE 
		A1.V6RPLN IN ('2', '3') AND 
		UISEQ# = 10 ; 
	SET MSG_VAR = ', ABT' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		RLARP.T1 
	SELECT 
		'OOBP', WRKO, BTCH, 0, SEQ#, '', '', 0, '', ADEP, 'OBP', 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)), 
		- ROUND (SUM (AMNT), 2), 
		'', 0, 0, 0, 0, 0, 0 
	FROM 
		RLARP.T1 
		LEFT OUTER JOIN LGDAT.PLNT ON 
			YAPLNT = SUBSTR (ADEP, 1, 3) 
		LEFT OUTER JOIN LGDAT.GLCCOM D ON 
			D.GNDEPT = ADEP AND 
			D.GNCOMP = YACOMP 
		LEFT OUTER JOIN LGDAT.GLCCOM P ON 
			P.GNPLNT = SUBSTR (ADEP, 1, 3) AND 
			P.GNDEPT = '' AND 
			P.GNCOMP = YACOMP 
	GROUP BY 
		'OOBP', WRKO, BTCH, 0, SEQ#, ADEP, 
		DIGITS (COALESCE (D.GNSTDM, P.GNSTDM)) 
	HAVING 
		ROUND (SUM (AMNT), 2) <> 0 ; 
	SET MSG_VAR = ', OOBP' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO RLARP.FFPDGLR2 SELECT * FROM RLARP.T1 ; 
	SET MSG_VAR = ', FINAL INSERT' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------ 
	DROP TABLE RLARP.T1 ; 
	SET MSG_VAR = ', DROP T1' ; 
	DROP TABLE RLARP.B1 ; 
	SET MSG_VAR = ', DROP T2' ; 
	 
	 
	 
END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.PD_UD_R3 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.PD_UD_R3 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.SB_GJ_R1 (
	IN VPERD VARCHAR(4)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.SB_GJ_R1 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DECLARE V_ERROR INTEGER ; 
		DECLARE MSG_VAR VARCHAR (255) ; 
		DECLARE RETRN_STATUS INTEGER ; 
		DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR SELECT * FROM TABLE (RLARP.FN_ISB (VPERD)) AS X ; 
		 
		DECLARE EXIT HANDLER FOR SQLEXCEPTION  --,SQLWARNING 
		BEGIN 
			SET V_ERROR = SQLCODE ; 
			GET DIAGNOSTICS RETRN_STATUS = RETURN_STATUS ; 
		 
			IF (V_ERROR IS NULL) OR (V_ERROR <> 0 AND V_ERROR <> 466) OR (RETRN_STATUS > 3) 
			THEN 
				SET MSG_VAR = 'PROC: ' || 'RLARP.SB_UD' || ', ' || COALESCE (MSG_VAR, '') || ', SQLCODE: ' || CHAR (V_ERROR) || ', PARAMS: ' ; 
				 --ROLLBACK; 
				 --COMMIT; 
				SET RETRN_STATUS = - 1 ; 
				SIGNAL SQLSTATE '75001' SET MESSAGE_TEXT = MSG_VAR ; 
			ELSE 
				SET V_ERROR = 0 ; 
			END IF ; 
		END ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DELETE FROM RLARP.FFSBGLR1 WHERE PERD = VPERD AND SUBSTR (MODULE, 1, 2) IN ('GJ', 'RJ', 'OS', 'AU') ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DELETE FROM RLARP.FFSBGLWF ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'JOURNAL ENTRY' AS CUSMOD, 
			DKADDD AS CUSKEY1, 
			'BATCH DESCR' AS CUSKEY1D, 
			DKREFD AS CUSKEY2, 
			'LINE DESCR' AS CUSKEY2D, 
			DKKEYN AS CUSKEY3, 
			'BATCH' AS CUSKEY3D, 
			DKREF# AS CUSKEY4, 
			'JOUNAL' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DKBCUS AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GTRAN GTRAN 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE IN ('GJ', 'RJ', 'OS', 'AU') 
  
		UNION ALL 
  
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'JOURNAL ENTRY' AS CUSMOD, 
			DKADDD AS CUSKEY1, 
			'BATCH DESCR' AS CUSKEY1D, 
			DKREFD AS CUSKEY2, 
			'LINE DESCR' AS CUSKEY2D, 
			DKKEYN AS CUSKEY3, 
			'BATCH' AS CUSKEY3D, 
			DKREF# AS CUSKEY4, 
			'JOUNAL' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DKBCUS AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GTLYN GTRAN 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE IN ('GJ', 'RJ', 'OS', 'AU') 
  
		UNION ALL 
  
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'JOURNAL ENTRY' AS CUSMOD, 
			DKADDD AS CUSKEY1, 
			'BATCH DESCR' AS CUSKEY1D, 
			DKREFD AS CUSKEY2, 
			'LINE DESCR' AS CUSKEY2D, 
			DKKEYN AS CUSKEY3, 
			'BATCH' AS CUSKEY3D, 
			DKREF# AS CUSKEY4, 
			'JOUNAL' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DKBCUS AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GNYTR GTRAN 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE IN ('GJ', 'RJ', 'OS', 'AU') ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLR1_E 
		SELECT 
			W.MODULE, 
			W.BATCH, 
			W.PERD, 
			W.TDATE, 
			W.PDATE, 
			W.ACCT, 
			SUM (W.AMT) AMT, 
			W.PROJ, 
			W.USRN, 
			W.REV, 
			W.CUSMOD, 
			W.CUSKEY1, 
			W.CUSKEY1D, 
			W.CUSKEY2, 
			W.CUSKEY2D, 
			W.CUSKEY3, 
			W.CUSKEY3D, 
			W.CUSKEY4, 
			W.CUSKEY4D, 
			W.CUSVEND, 
			W.CUSCUST, 
			W.RECID 
		FROM 
			RLARP.FFSBGLWF W 
			EXCEPTION JOIN RLARP.FFSBGLR1 F ON 
				W.PERD = F.PERD AND 
				W.MODULE = F.MODULE AND 
				W.CUSMOD = F.CUSMOD AND 
				W.ACCT = F.ACCT AND 
				W.BATCH = F.BATCH AND 
				W.PDATE = F.PDATE AND 
				W.PROJ = F.PROJ AND 
				W.CUSKEY1 = F.CUSKEY1 AND 
				W.CUSKEY2 = F.CUSKEY2 AND 
				W.CUSKEY3 = F.CUSKEY3 AND 
				W.CUSKEY4 = F.CUSKEY4 AND 
				W.CUSVEND = F.CUSVEND AND 
				W.CUSCUST = F.CUSCUST AND 
				W.RECID = F.RECID 
		GROUP BY 
			W.MODULE, 
			W.BATCH, 
			W.PERD, 
			W.TDATE, 
			W.PDATE, 
			W.ACCT, 
			W.PROJ, 
			W.USRN, 
			W.REV, 
			W.CUSMOD, 
			W.CUSKEY1, 
			W.CUSKEY1D, 
			W.CUSKEY2, 
			W.CUSKEY2D, 
			W.CUSKEY3, 
			W.CUSKEY3D, 
			W.CUSKEY4, 
			W.CUSKEY4D, 
			W.CUSVEND, 
			W.CUSCUST, 
			W.RECID ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLR1 
		SELECT 
			W.MODULE, 
			W.BATCH, 
			W.PERD, 
			W.TDATE, 
			W.PDATE, 
			W.ACCT, 
			SUM (W.AMT) AMT, 
			W.PROJ, 
			W.USRN, 
			W.REV, 
			W.CUSMOD, 
			W.CUSKEY1, 
			W.CUSKEY1D, 
			W.CUSKEY2, 
			W.CUSKEY2D, 
			W.CUSKEY3, 
			W.CUSKEY3D, 
			W.CUSKEY4, 
			W.CUSKEY4D, 
			W.CUSVEND, 
			W.CUSCUST, 
			W.RECID 
		FROM 
			RLARP.FFSBGLWF W 
			EXCEPTION JOIN RLARP.FFSBGLR1 F ON 
				W.PERD = F.PERD AND 
				W.MODULE = F.MODULE AND 
				W.CUSMOD = F.CUSMOD AND 
				W.ACCT = F.ACCT AND 
				W.BATCH = F.BATCH AND 
				W.PDATE = F.PDATE AND 
				W.PROJ = F.PROJ AND 
				W.CUSKEY1 = F.CUSKEY1 AND 
				W.CUSKEY2 = F.CUSKEY2 AND 
				W.CUSKEY3 = F.CUSKEY3 AND 
				W.CUSKEY4 = F.CUSKEY4 AND 
				W.CUSVEND = F.CUSVEND AND 
				W.CUSCUST = F.CUSCUST AND 
				W.RECID = F.RECID 
		GROUP BY 
			W.MODULE, 
			W.BATCH, 
			W.PERD, 
			W.TDATE, 
			W.PDATE, 
			W.ACCT, 
			W.PROJ, 
			W.USRN, 
			W.REV, 
			W.CUSMOD, 
			W.CUSKEY1, 
			W.CUSKEY1D, 
			W.CUSKEY2, 
			W.CUSKEY2D, 
			W.CUSKEY3, 
			W.CUSKEY3D, 
			W.CUSKEY4, 
			W.CUSKEY4D, 
			W.CUSVEND, 
			W.CUSCUST, 
			W.RECID ; 
			 
		OPEN C1 ;	 
		 
	END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.SB_GJ_R1 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.SB_GJ_R1 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.SB_UD (
	IN VPERD VARCHAR(4)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.SB_UD 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	DECLARE V_ERROR INTEGER ; 
	DECLARE MSG_VAR VARCHAR (255) ; 
	DECLARE RETRN_STATUS INTEGER ; 
	 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION  --,SQLWARNING 
	BEGIN 
		SET V_ERROR = SQLCODE ; 
		GET DIAGNOSTICS RETRN_STATUS = RETURN_STATUS ; 
	 
		IF (V_ERROR IS NULL) OR (V_ERROR <> 0 AND V_ERROR <> 466) OR (RETRN_STATUS > 3) 
		THEN 
			SET MSG_VAR = 'PROC: ' || 'RLARP.SB_UD' || ', ' || COALESCE (MSG_VAR, '') || ', SQLCODE: ' || CHAR (V_ERROR) || ', PARAMS: ' ; 
			 --ROLLBACK; 
			 --COMMIT; 
			SET RETRN_STATUS = - 1 ; 
			SIGNAL SQLSTATE '75001' SET MESSAGE_TEXT = MSG_VAR ; 
		ELSE 
			SET V_ERROR = 0 ; 
		END IF ; 
	END ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	DELETE FROM RLARP.FFSBGLR1 WHERE PERD = VPERD ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	DELETE FROM RLARP.FFSBGLWF ; 
  
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	DELETE FROM RLARP.FFSBGLR1_E ; 
  
------------------------------------------------------------------------------------------------------------------------------------------------------ 
--																Unkown																				-- 
-- some kind of purge entry, not sure of the nature																									-- 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLWF 
	SELECT 
		DKSRCE || DKQUAL AS MODULE, 
		DIGITS (DKBTC#) AS BATCH, 
		DIGITS (DKFSYY) || DIGITS (DKFSPR), 
		CHAR (DKTDAT) AS TDATE, 
		CHAR (DKPDAT) AS PDATE, 
		DIGITS (DKACC#) AS ACCT, 
		DKAMT AS AMT, 
		DKPJNM AS PROJ, 
		DKFUT4 AS USRN, 
		DKREV AS REV, 
		UPPER (LTRIM (RTRIM (DKREFD))) AS CUSMOD, 
		DKKEYN AS CUSKEY1, 
		'VOUCHER' AS CUSKEY1D, 
		'' AS KEY2, 
		'' AS KEY2D, 
		'' AS KEY3, 
		'' AS KEY3D, 
		'' AS KEY4, 
		'' AS KEY4D, 
		LTRIM (RTRIM (SUBSTR (DKADDD, 7, 25))) AS CUSVEND, 
		'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GLSBAP 
	WHERE 
		DKSRCE || DKQUAL = 'AP' AND 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD ; 
/* 
+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
|														Unmatched Receipts Accrual																	| 
|___________________________________________________________________________________________________________________________________________________|				 
|This is the entry that posts for the unmatched receipts in PORCAP. PORCAP receipts do not trigger any GL activity at creation unless they are 	 	| 
|inventory related, thus this month-end only entry. Not sure what happens if you post multiple time. This section below leaves as-is given that	 	| 
|the required information might not exist at time of execution. A later block addresses this.														| 																																				| 
+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
*/ 
  
	INSERT INTO 
		RLARP.FFSBGLWF	 
	SELECT 
		DKSRCE || DKQUAL AS MODULE, 
		DIGITS (DKBTC#) AS BATCH, 
		DIGITS (DKFSYY) || DIGITS (DKFSPR), 
		CHAR (DKTDAT) AS TDATE, 
		CHAR (DKPDAT) AS PDATE, 
		DIGITS (DKACC#) AS ACCT, 
		DKAMT AS AMT, 
		DKPJNM AS PROJ, 
		DKFUT4 AS USRN, 
		DKREV AS REV, 
		UPPER (DKREFD) AS CUSMOD, 
		DKKEYN AS CUSKEY1, 
		'ITEM' AS CUSKEY1D, 
		'' AS KEY2, 
		'' AS KEY2D, 
		'' AS KEY3, 
		'' AS KEY3D, 
		'' AS KEY4, 
		'' AS KEY4D, 
		'' AS CUSVEND, 
		'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GLSBAP 
	WHERE 
		DKSRCE || DKQUAL = 'APAC' AND 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD ; 
	 
	 
/* 
+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
|																	Check Runs																		| 
|___________________________________________________________________________________________________________________________________________________|				 
|Check runs post at the run# level only. In the GL inquirey you can press F3 and get a check list, but these records are not actually on the ledger	| 
|This is not a sufficient level of detail for reporting purposes but does accurately reflect the value												| 
|The anchor point here is the ledger itself. Other linked components are:																			| 
| - CHQR - Check details file																														| 
| - AVTX - Open AP transaction file																													| 
| - VCHR - Voucher file																																| 
| - CHQ  - This is a subquery aggreagting check# totals for gross and discounts taken. There *shouldn't* be duplicates but technically the same		| 
|		   check number could be issued under different bank codes. Since the anchor table is the ledger, we have no way to join on that field and	| 
|		   so to eliminate chance of duplication, we must first aggregate the target table to the joining fields level								| 
| - CHE  - Subquery aggregating gross and discounts taken by run number																				|	   
+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
*/ 
  
  
	INSERT INTO 
		RLARP.FFSBGLWF	 
	SELECT 
		DKSRCE || DKQUAL AS MODULE, 
		DIGITS (DKBTC#) AS BATCH, 
		DIGITS (DKFSYY) || DIGITS (DKFSPR), 
		CHAR (DKTDAT) AS TDATE, 
		CHAR (DKPDAT) AS PDATE, 
		DIGITS (DKACC#) AS ACCT, 
		ROUND (CASE 
			 --assumption is that there are 3 possible ledger values, gross, discount, or net, all which have ben broked out by check & invoice 
			WHEN ABS (DKAMT) = CHR.GROS - CHR.DISC THEN AVTVAM - AVTDIS	 --break out net on ledger 
			WHEN ABS (DKAMT) = CHR.GROS THEN AVTVAM					 --break out gross on ledger 
			WHEN ABS (DKAMT) = CHR.DISC THEN AVTDIS					 --break out discount on ledger 
			ELSE ABS (DKAMT) * (AVTVAM / CHR.GROS)						 --if not matched to any value apply check level detail prorata 
		END * CASE 
			WHEN DKAMT < 0 THEN - 1 
			ELSE 1 
		END, 2) AS AMT, 
		DKPJNM AS PROJ, 
		DKFUT4 AS USRN, 
		DKREV AS REV, 
		'CHECK RUN' AS CUSMOD, 
		DKKEYN AS CUSKEY1, 
		'CHECK TRANSACTION' AS CUSKEY1D, 
		IGCHQ# AS KEY2, 
		'CHECK NUMBER' AS CUSKEY2D, 
		AVTVH# AS CUSKEY3,											 
		'VOUCHER' AS CUSKEY3D, 
		IDINV# AS CUSKEY4, 
		'INVOICE' AS CUSKEY4D, 
		IGVEN# AS CUSVEND, 
		'' AS CUSCUST, DKRCID 
	FROM 
		LGDAT.GLSBAP						 --DK (anchor file is AP subledger with limiter on source & fiscal) 
		LEFT OUTER JOIN LGDAT.CHQR ON		 --IG (need check#'s in run for link to AVTX, grab check IGCHQ#, vendor IGVEN#) 
			IGTXR# = DKKEYN AND 
			IGFSYY = DKFSYY AND 
			IGFSPP = DKFSPR 
		LEFT OUTER JOIN LGDAT.AVTX ON		 --AV (need for amount by check, also grab voucher# AVTVH#, gross paid AVTVAM, discount taken AVTDIS) 
			AVTCO# = IGCOM# AND 
			AVTCHQ = IGCHQ# AND 
			AVTCHB = IGBNK# AND AVTTYP IN (' 4', ' 5') 
		LEFT OUTER JOIN LGDAT.VCHR ON		 --ID (need for invoice#) 
			IDCOM# = IGCOM# AND 
			IDBNK# = IGBNK# AND 
			IDVCH# = AVTVH# 
		LEFT OUTER JOIN 
		(
			SELECT 
				IGCOM# AS COMP, IGTXR# AS TXR, IGCHQ# AS CHQN, IGFSYY AS YY, IGFSPP AS PP, SUM (IGGROS) AS GROS, SUM (IGDISC) AS DISC 
			FROM 
				LGDAT.CHQR 
			WHERE 
				 --inner most select is a unique list of check run numbers direct from GL. does NOT key off of indexed fields but still runs really fast 
				IGTXR# IN (SELECT DISTINCT DKKEYN FROM LGDAT.GLSBAP WHERE DKSRCE = 'AP' AND DKQUAL = 'CQ' AND DKFSYR = 20 AND DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD) 
			GROUP BY 
				IGCOM#, IGTXR#, IGCHQ#, IGFSYY, IGFSPP 
		) CHQ ON 
			CHQ.COMP = SUBSTR (DKACC#, 1, 2) AND 
			CHQ.TXR = DKKEYN AND 
			CHQ.YY = DKFSYY AND 
			CHQ.PP = DKFSPR AND 
			CHQN = IGCHQ# 
		LEFT OUTER JOIN 
		(
			SELECT 
				IGCOM# AS COMP, IGTXR# AS TXR, IGFSYY AS YY, IGFSPP AS PP, SUM (IGGROS) AS GROS, SUM (IGDISC) AS DISC 
			FROM 
				LGDAT.CHQR 
			WHERE 
				IGTXR# IN (SELECT DISTINCT DKKEYN FROM LGDAT.GLSBAP WHERE DKSRCE = 'AP' AND DKQUAL = 'CQ' AND DKFSYR = 20 AND DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD) 
			GROUP BY 
				IGCOM#, IGTXR#, IGFSYY, IGFSPP 
		) CHR ON 
			CHR.COMP = SUBSTR (DKACC#, 1, 2) AND 
			CHR.TXR = DKKEYN AND 
			CHR.YY = DKFSYY AND 
			CHR.PP = DKFSPR 
	WHERE 
		DKSRCE = 'AP' AND 
		DKQUAL = 'CQ' AND 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD ; 
  
/* 
+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
|																	Void Checks																		| 
|___________________________________________________________________________________________________________________________________________________|				 
|Voided check transactions APVC post to the anchor file GLSBAP with a hook to the check number whihc is used to go back and embed voucher & invoice	| 
|The data natively exists with the appropriate level of granularity for reporting and is also accurate												| 
+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
*/ 
  
  
	INSERT INTO 
		RLARP.FFSBGLWF 
	SELECT 
		DKSRCE || DKQUAL AS MODULE, 
		DIGITS (DKBTC#) AS BATCH, DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
		CHAR (DKTDAT) AS TDATE, 
		CHAR (DKPDAT) AS PDATE, 
		DIGITS (DKACC#) AS ACCT, 
		ROUND (CASE 
		WHEN ABS (DKAMT) < IGGROS THEN ABS (DKAMT) / IGGROS 
		ELSE 1 
		END * CASE WHEN DKAMT < 0 THEN - 1 ELSE 1 END * AVTAMT, 2) AS AMT, 
		DKPJNM AS PROJ, 
		DKFUT4 AS USRN, 
		DKREV AS REV, 
		UPPER (LTRIM (RTRIM (SUBSTR (DKREFD, 1, 9)))) AS CUSMOD, 
		IGTXR# AS CUSKEY1, 
		'CHECK TRANSACTION' AS CUSKEY1D, 
		IGCHQ# AS KEY2, 
		'CHECK NUMBER' AS CUSKEY2D, 
		DIGITS (AVTVH#) AS CUSKEY3, 
		'VOUCHER' AS CUSKEY3D, 
		IDINV# AS CUSKEY4, 
		'INVOICE' AS CUSKEY4D, 
		IGVEN# AS CUSVEND, 
		'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GLSBAP 
		LEFT OUTER JOIN LGDAT.AVTX ON 
			AVTCO# = SUBSTR (DKACC#, 1, 2) AND 
			AVTCHQ = DKKEYN AND 
			AVTTYP = 7 AND 
			AVTFIS = DKFSYR || DKFSYY || DIGITS (DKFSPR) 
		LEFT OUTER JOIN LGDAT.CHQR ON 
			IGCOM# = AVTCO# AND 
			IGBNK# = AVTCHB AND 
			IGCHQ# = AVTCHQ 
		LEFT OUTER JOIN LGDAT.VCHR ON 
			IDCOM# = IGCOM# AND 
			IDBNK# = IGBNK# AND 
			IDVCH# = AVTVH# 
		WHERE 
			DKSRCE || DKQUAL = 'APVC' AND 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD ; 
  
/* 
+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
|																	Voucher Posting																	| 
|___________________________________________________________________________________________________________________________________________________|				 
|Voucher postings are transacted without reference to the 3-way match data																			| 
|this module currently only gets half way there because of complications around manually changing the accounts or amounts involved in the voucher	| 
|The PO & description are linked in, but ideally we would have the master receipt key which is the common thread for reporting						| 
+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
*/ 
-----need to look at a new approach where the POMVAR linkage is setup if matching was used, otherwise default to this logic 
INSERT INTO	 
	RLARP.FFSBGLWF 
SELECT 
	MODULE, BATCH, PERD, TDATE, PDATE, ACCT, 
	SUM (AMT) AMT, 
	PROJ, USRN, REV, CUSMOD, CUSKEY1, CUSKEY1D, CUSKEY2, CUSKEY2D, CUSKEY3, CUSKEY3D, CUSKEY4, CUSKEY4D, CUSVEND, CUSCUST, RECID 
FROM 
	(
	SELECT 
		DKSRCE || DKQUAL AS MODULE, 
		DIGITS (DKBTC#) AS BATCH, 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) PERD, 
		CHAR (DKTDAT) AS TDATE, 
		CHAR (DKPDAT) AS PDATE, 
		DIGITS (DKACC#) AS ACCT, 
		CASE WHEN PPV_DET IS NULL 
			THEN DKAMT 
			ELSE ROUND (DKAMT * PPV_DET, 2) 
		END AMT, 
		DKPJNM AS PROJ, 
		DKFUT4 AS USRN, 
		DKREV AS REV, 
		'VOUCHER POSTING' CUSMOD, 
		DKKEYN AS CUSKEY1, 
		'VOUCHER NUMBER' AS CUSKEY1D, 
		IDINV# AS CUSKEY2, 
		'INVOICE' AS CUSKEY2D, 
		CASE WHEN PPV_DET IS NULL THEN IDVDES ELSE DIGITS (LBRKEY) END AS CUSKEY3, 
		CASE WHEN PPV_DET IS NULL THEN 'DESCR' ELSE 'RKEY' END AS CUSKEY3D, 
		LBPT# AS CUSKEY4, 
		CASE WHEN COALESCE (LBPT#, '') = '' THEN '' ELSE 'PART' END AS CUSKEY4D, 
		IDVEN# AS CUSVEND, 
		'' AS CUSCUST, 
		DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GLSBAP 
		LEFT OUTER JOIN LGDAT.VCHR ON 
			IDCOM# = SUBSTR (DKACC#, 1, 2) AND 
			IDVCH# = DKKEYN AND 
			IDFISY = DKFSYY AND 
			IDFISP = DKFSPR 
			 --an assumption is that given a fiscal period all voucher numbers are different, however this could be violated due to bank codes 
			 --not being differentiated on the ledger and the account code may not reflect the bank code granularity and there is no history 
			 --file on the bank master data so it doesn't matter anyways 
		LEFT OUTER JOIN 
		(
			SELECT 
				X.COMP COMP, X.VCHR VCHR, X.ACCT ACCT, X.PPV PPV, X.CNT CNT, X.TOT TOT, LBRKEY, LBPT#, LBEXT, LBCOM# || Y1PRVR PPVACCT, LBPPV, 
				CASE X.PPV 
					WHEN 0 THEN 
						CASE X.TOT 
							WHEN 0 THEN FLOAT (1) / FLOAT (X.CNT) 
							ELSE LBEXT / X.TOT 
						END 
					ELSE LBPPV / X.PPV 
				END PPV_DET 
			FROM	 
				LGDAT.POMVAR 
				LEFT OUTER JOIN LGDAT.STKMM ON 
					AVPART = LBPT# 
				LEFT OUTER JOIN LGDAT.STKMP ON 
					AWPART = LBPT# 
				LEFT OUTER JOIN LGDAT.GLIE ON 
					Y1PLNT = LBPLNT AND 
					Y1GLEC = COALESCE (AVGLED, AWGLED) 
				LEFT OUTER JOIN LGDAT.POI ON 
					KBPO# = LBPO# AND 
					KBITM# = LBPOI# 
				LEFT OUTER JOIN 
				(
					SELECT 
						LBCOM# COMP, LBVCH# VCHR, 
						LBCOM# || COALESCE (Y1PRVR, KBGL#) ACCT,  --if the ppv account is null, then use the expense account from the PO 
						SUM (LBPPV) PPV, COUNT (LBRKEY) CNT, SUM (LBEXT) TOT 
					FROM	 
						LGDAT.POMVAR 
						LEFT OUTER JOIN LGDAT.STKMM ON 
							AVPART = LBPT# 
						LEFT OUTER JOIN LGDAT.STKMP ON 
							AWPART = LBPT# 
						LEFT OUTER JOIN LGDAT.GLIE ON 
							Y1PLNT = LBPLNT AND 
							Y1GLEC = COALESCE (AVGLED, AWGLED) 
						LEFT OUTER JOIN LGDAT.POI ON 
							KBPO# = LBPO# AND 
							KBITM# = LBPOI# 
							 
					WHERE 
						DIGITS (LBFSYY) || DIGITS (LBFSPP) = VPERD 
						 --may need to consider excluding .00001 cost items 
					GROUP BY 
						LBCOM#, LBVCH#, LBCOM# || COALESCE (Y1PRVR, KBGL#) 
				) X ON 
					X.COMP = LBCOM# AND	 
					X.VCHR = LBVCH# AND 
					X.ACCT = LBCOM# || COALESCE (Y1PRVR, KBGL#) 
			WHERE 
				DIGITS (LBFSYY) || DIGITS (LBFSPP) = VPERD 
		) SPLIT ON	 
			SPLIT.COMP = SUBSTR (DKACC#, 1, 2) AND	 
			SPLIT.VCHR = DKKEYN AND 
			SPLIT.ACCT = DKACC# 
	WHERE 
		DKSRCE = 'AP' AND 
		DKQUAL = 'VN' AND 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD 
	) AGG 
GROUP BY 
	MODULE, BATCH, PERD, TDATE, PDATE, ACCT, 
	PROJ, USRN, REV, CUSMOD, CUSKEY1, CUSKEY1D, CUSKEY2, CUSKEY2D, CUSKEY3, CUSKEY3D, CUSKEY4, CUSKEY4D, CUSVEND, CUSCUST, RECID ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------	 
	INSERT INTO 
		RLARP.FFSBGLWF 
	SELECT 
		BL8SRCE || BL8QUAL, 
		DIGITS (BL8BTC#), 
		BL8FSYY || DIGITS (BL8FSPR), 
		CHAR (BL8TRDAT), 
		CHAR (BL8PDAT), 
		BL8ACC#, 
		BL8AMT, 
		BL8PJNB, 
		BL8USER, 
		BL8REV, 
		CASE DKQUAL 
			WHEN '' THEN UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
			WHEN 'IN' THEN 'CREDIT MEMO' 
			WHEN 'RC' THEN UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
			ELSE 'NOT MAPPED' 
		END CUSMOD, 
		CASE DKQUAL 
			WHEN '' THEN BL8REFB 
			WHEN 'IN' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN SUBSTR (BL8KEYN, 2, 5) ELSE BL8KEYN END 
			WHEN 'RC' THEN 
			CASE UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
				WHEN 'ADJUSTMENT' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN SUBSTR (BL8KEYN, 2, 5) ELSE BL8KEYN END 
				WHEN 'CASH RECEIPINV' THEN CASE SUBSTR (BL8REFD, 16, 1) WHEN 'D' THEN SUBSTR (BL8REFD, 17, 5) ELSE SUBSTR (BL8REFD, 16, 6) END 
				WHEN 'DISCOUNT' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN SUBSTR (BL8KEYN, 2, 5) ELSE BL8KEYN END 
				WHEN 'MISC CASH ENTR' THEN BL8ADDD 
				ELSE '' 
			END 
			ELSE 'NOT MAPPED' 
		END CUSKEY1, 
		CASE DKQUAL 
			WHEN '' THEN 'DESCR1' 
			WHEN 'IN' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN 'DEBIT NOTE-CCRH' ELSE 'INVOICE-OIH' END 
			WHEN 'RC' THEN 
			CASE UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
				WHEN 'ADJUSTMENT' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN 'DEBIT MEMO-X' ELSE 'INVOICE-OIH' END 
				WHEN 'CASH RECEIPINV' THEN CASE SUBSTR (BL8REFD, 16, 1) WHEN 'D' THEN 'DEBIT MEMO-X' ELSE 'INVOICE-OIH' END 
				WHEN 'DISCOUNT' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN 'DEBIT MEMO-X' ELSE 'INVOICE-OIH' END 
				WHEN 'MISC CASH ENTR' THEN 'DESCRIPTION-X' 
				ELSE '' 
			END 
			ELSE 'NOT MAPPED' 
		END CUSKEY1D, 
		CASE DKQUAL 
			WHEN '' THEN BL8ADDD 
			WHEN 'IN' THEN BL8REF 
			WHEN 'RC' THEN 
			CASE UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
				WHEN 'CASH RECEIPINV' THEN BL8KEYN 
				WHEN 'CASH RECEIPT' THEN BL8KEYN 
				ELSE '' 
			END 
			ELSE 'NOT MAPPED' 
		END CUSKEY2, 
		CASE DKQUAL 
			WHEN '' THEN 'DESCR2' 
			WHEN 'IN' THEN 'OFFSET&DESCR' 
			WHEN 'RC' THEN 
			CASE UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
				WHEN 'CASH RECEIPINV' THEN 'CHEQUE-ARTRN' 
				WHEN 'CASH RECEIPT' THEN 'CHEQUE-ARTRN' 
				ELSE '' 
			END 
			ELSE 'NOT MAPPED' 
		END CUSKEY2D, 
		DIGITS (BL8BTCH) AS CUSKEY3, 
		'AR BATCH' AS CUSKEY3D, 
		'' AS CUSKEY4, 
		'' AS CUSKEY4D, 
		'' AS CUSVEND, 
		BL8CUST, '0' RECID 
	FROM 
		LGDAT.AROPT 
		INNER JOIN (SELECT DISTINCT DKACC#, DKFSYY, DKFSPR, DKSRCE, DKQUAL FROM LGDAT.GLSBAR WHERE DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND DKSRCE = 'AR') X ON 
			DKACC# = BL8ACC# AND 
			BL8SRCE = DKSRCE AND 
			BL8QUAL = DKQUAL AND 
			BL8FSYY = DKFSYY AND 
			BL8FSPR = DKFSPR ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLWF 
	SELECT 
		DKSRCE || DKQUAL, 
		DIGITS (DKBTC#), 
		DKFSYY || DIGITS (DKFSPR), 
		CHAR (DKTDAT), 
		CHAR (DKPDAT), 
		DKACC#, 
		DKAMT, 
		DKPJNM, 
		DKFUT4, 
		DKREV, 
		UPPER (RTRIM (SUBSTR (DKREFD, 1, 15))) CUSMOD, 
		DKKEYN AS CUSKEY1, 
		'ITEM' AS CUSKEY1D, 
		DKADDD AS CUSKEY2, 
		'DESCR' AS CUSKEY2D, 
		'' AS CUSKEY3, 
		'' AS CUSKEY3D, 
		'' AS CUSKEY4, 
		'' AS CUSKEY4D, 
		'' AS CUSVEND, 
		'', DKRCID RECID 
	FROM 
		LGDAT.GLSBAR 
	WHERE 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
		DKSRCE = 'AR' AND 
		DKQUAL = 'RC' AND 
		DKREFD = 'MISC CASH ENTRY' ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLWF	 
	SELECT 
		DKSRCE || DKQUAL, 
		DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
		CHAR (DKTDAT), 
		CHAR (DKPDAT), 
		DIGITS (DKACC#), 
		DKAMT, 
		DKPJNM, 
		DKFUT4, 
		DKREV, 
		LTRIM (RTRIM (UPPER (SUBSTR (DKADDD, 1, 4)))) AS CUSMOD, 
		DKPART AS CUSKEY1, 
		'PART' AS CUSKEY1D, 
		LTRIM (RTRIM (SUBSTR (DKADDD, 13, 14))) AS CUSKEY2, 
		'QTY' AS CUSKEY2D, 
		LTRIM (RTRIM (SUBSTR (DKADDD, 28, 2))) AS CUSKEY3, 
		'UOM' AS CUSKEY3D, 
		'' AS CUSKEY4, 
		'' AS CUSKEY4D, 
		'' AS CUSVEND, 
		'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GLSBIV GLSBIV 
	WHERE 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
		DKSRCE = 'IC' AND 
		DKQUAL = '' ; 
  
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLWF 
	SELECT 
		DKSRCE || DKQUAL, 
		DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
		CHAR (DKTDAT), 
		CHAR (DKPDAT), 
		DIGITS (DKACC#), 
		DKAMT, 
		DKPJNM, 
		DKFUT4, 
		DKREV, 
		LTRIM (RTRIM (UPPER (SUBSTR (DKADDD, 1, 14)))) AS CUSMOD, 
		DKKEYN AS CUSKEY1, 
		'INVOICE' AS CUSKEY1D, 
		DKFUT9 AS CUSKEY2, 
		'INVOICE LINE' AS CUSKEY2D, 
		DHPLNT AS CUSKEY3, 
		'SHIP PLNT' AS CUSKEY3D, 
		'' AS CUSKEY4, 
		'' AS CUSKEY4D, 
		'' AS CUSVEND, 
		DHBCS# AS CUSCUST, DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GLSBIV GLSBIV 
		LEFT OUTER JOIN LGDAT.OIH ON 
			DHINV# = DKKEYN 
	WHERE 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
		DKSRCE = 'IC' AND 
		DKQUAL = 'IN' ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLWF 
	SELECT 
		DKSRCE || DKQUAL, 
		DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
		CHAR (DKTDAT), 
		CHAR (DKPDAT), 
		DIGITS (DKACC#), 
		DKAMT, 
		DKPJNM, 
		DKFUT4, 
		DKREV, 
		LTRIM (RTRIM (UPPER (SUBSTR (DKADDD, 1, 4)))) AS CUSMOD, 
		DKKEYN AS CUSKEY1, 
		'BYTRAN' AS CUSKEY1D, 
		BYREAS AS CUSKEY2, 
		'REASON' AS CUSKEY2D, 
		BYDREF AS CUSKEY3, 
		'DESCR' AS CUSKEY3D, 
		BYPART AS CUSKEY4, 
		'PART' AS CUSKEY4D, 
		'' AS CUSVEND, 
		'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GLSBIV GLSBIV 
		LEFT OUTER JOIN LGDAT.STKT ON 
			BYTRAN = INT (DKKEYN) 
	WHERE 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
		DKSRCE = 'IC' AND 
		DKQUAL = 'IT' ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLWF 
	SELECT 
		DKSRCE || DKQUAL, 
		DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
		CHAR (DKTDAT), 
		CHAR (DKPDAT), 
		DIGITS (DKACC#), 
		DKAMT, 
		DKPJNM, 
		DKFUT4, 
		DKREV, 
		'GOODS RECEIPT' AS CUSMOD, 
		DKKEYN AS CUSKEY1, 
		'REC LOG' AS CUSKEY1D, 
		DKPART AS CUSKEY2, 
		'PART' AS CUSTKEY2D, 
		'' AS CUSKEY3, 
		'' AS CUSKEY3D, 
		'' AS CUSKEY4, 
		'' AS CUSKEY4D, 
		'' AS CUSVEND, 
		'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GLSBIV GLSBIV 
	WHERE 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD	AND 
		DKSRCE = 'IC' AND 
		DKQUAL = 'RL' ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLWF 
	SELECT 
		DKSRCE || DKQUAL AS MODULE, 
		DIGITS (DKBTC#) AS BATCH, 
		DIGITS (DKFSYY) || DIGITS (DKFSPR), 
		CHAR (DKTDAT) AS TDATE, 
		CHAR (DKPDAT) AS PDATE, 
		DIGITS (DKACC#) AS ACCT, 
		DKAMT AS AMT, 
		DKPJNM AS PROJ, 
		DKFUT4 AS USRN, 
		DKREV AS REV, 
		SUBSTR (DKADDD, 1, 12), DKKEYN, 
		'RAN DOC NUM AND ITM', 
		INRAN#, 
		'RAN', 
		INCRD# || ' - ' || INITM#, 
		'CREDIT AND ITEM', 
		DIINV#, 
		'CREDIT INVOICE', 
		'', 
		INCUST, 
		DKRCID 
	FROM 
		LGDAT.GLSBIV 
		LEFT OUTER JOIN LGDAT.RANS ON 
			INRNDR = SUBSTR (DKKEYN, 1, LOCATE ('/', DKKEYN) - 1) AND 
			INRNDI = SUBSTR (DKKEYN, LOCATE ('/', DKKEYN) + 1, 1) 
		LEFT OUTER JOIN LGDAT.OID ON 
			DIORD# = INCRD# AND 
			DIITM# = INITM# AND 
			DIGITS (INCRD#) <> '000000000' 
	WHERE 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
		DKSRCE = 'IC' AND 
		DKQUAL = 'RT' ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLWF 
	SELECT 
		DKSRCE || DKQUAL, 
		DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
		CHAR (DKTDAT), 
		CHAR (DKPDAT), 
		DIGITS (DKACC#), 
		DKAMT, 
		DKPJNM, 
		DKFUT4, 
		DKREV, 
		'GOODS RECEIPT' AS CUSMOD, 
		DKKEYN AS CUSKEY1, 
		'RETURN TO VENDOR' AS CUSKEY1D, 
		DKPART AS CUSKEY2, 
		'PART' AS CUSKEY2D, 
		'' AS CUSKEY3, 
		'' AS CUSKEY3D, 
		'' AS CUSKEY4, 
		'' AS CUSKEY4D, 
		'' AS CUSVEND, 
		'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GLSBIV GLSBIV 
	WHERE 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
		DKSRCE = 'IC' AND 
		DKQUAL = 'VR' ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLWF 
	SELECT 
		DKSRCE || DKQUAL, 
		DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
		CHAR (DKTDAT), 
		CHAR (DKPDAT), 
		DIGITS (DKACC#), 
		DKAMT, 
		DKPJNM, 
		DKFUT4, 
		DKREV, 
		UPPER (LTRIM (RTRIM (SUBSTR (DKREFD, 1, 14)))) AS CUSMOD, 
		DKKEYN AS CUSKEY1, 
		'INVOICE' AS CUSKEY1D, 
		DKFUT9 AS CUSKEY2, 
		'INVOICE LINE' AS CUSKEY2D, 
		DHPLNT AS CUSKEY3, 
		'INVOICE PLANT' AS CUSKEY3D, 
		DHINCR AS CUSKEY4, 
		'INC/CRD' AS CUSKEY4D, 
		'' AS CUSVEND, 
		DHBCS# AS CUSCUST, DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GLSBAR GLSBAR 
		LEFT OUTER JOIN LGDAT.OIH ON 
			DHINV# = DKKEYN 
	WHERE 
		GLSBAR.DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
		DKSRCE = 'OE' AND 
		DKQUAL = 'IN' ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLWF 
	SELECT 
		DKSRCE || DKQUAL, 
		DIGITS (DKBTC#), 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
		CHAR (DKTDAT), 
		CHAR (DKPDAT), 
		DIGITS (DKACC#), 
		SUM (DKAMT), 
		DKPJNM, 
		DKFUT4, 
		DKREV, 
		'PRODUCTION REPORTING' AS CUSMOD, 
		'' AS CUSKEY1, 
		'' AS CUSKEY1D, 
		'' AS CUSKEY2, 
		'' AS CUSKEY2D, 
		UPPER (CASE WHEN SUBSTR (DKREFD, 1, 7) IN ('COMPLET', 'CP- PO#', 'WIP ADJ', 'VOID CO', 'REV WIP') THEN SUBSTR (DKREFD, 1, 7) ELSE SUBSTR (DKADDD, 1, 24) END) AS CUSKEY3, 
		'ACTION' AS CUSKEY3D, 
		'' AS CUSKEY4, 
		'' AS CUSKEY4D, 
		'' AS CUSVEND, 
		'' AS CUSCUST, '0' AS DKRCID 
	FROM 
		LGDAT.GTRAN GLSBIV 
	WHERE 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
		DKSRCE = 'PD' 
	GROUP BY 
		DKSRCE || DKQUAL, 
		DIGITS (DKBTC#), 
		DIGITS (DKFSYY) || DIGITS (DKFSPR), 
		CHAR (DKTDAT), 
		CHAR (DKPDAT), 
		DIGITS (DKACC#), 
		DKPJNM, 
		DKFUT4, 
		DKREV, 
		UPPER (CASE WHEN SUBSTR (DKREFD, 1, 7) IN ('COMPLET', 'CP- PO#', 'WIP ADJ', 'VOID CO', 'REV WIP') THEN SUBSTR (DKREFD, 1, 7) ELSE SUBSTR (DKADDD, 1, 24) END) ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLWF 
	SELECT 
		DKSRCE || DKQUAL, 
		DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
		CHAR (DKTDAT), 
		CHAR (DKPDAT), 
		DIGITS (DKACC#), 
		DKAMT, 
		DKPJNM, 
		DKFUT4, 
		DKREV, 
		'JOURNAL ENTRY' AS CUSMOD, 
		DKADDD AS CUSKEY1, 
		'BATCH DESCR' AS CUSKEY1D, 
		DKREFD AS CUSKEY2, 
		'LINE DESCR' AS CUSKEY2D, 
		DKKEYN AS CUSKEY3, 
		'BATCH' AS CUSKEY3D, 
		DKREF# AS CUSKEY4, 
		'JOUNAL' AS CUSKEY4D, 
		'' AS CUSVEND, 
		DKBCUS AS CUSCUST, DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GTRAN GTRAN 
	WHERE 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
		DKSRCE IN ('GJ', 'RJ', 'OS', 'AU') 
  
	UNION ALL 
  
	SELECT 
		DKSRCE || DKQUAL, 
		DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
		CHAR (DKTDAT), 
		CHAR (DKPDAT), 
		DIGITS (DKACC#), 
		DKAMT, 
		DKPJNM, 
		DKFUT4, 
		DKREV, 
		'JOURNAL ENTRY' AS CUSMOD, 
		DKADDD AS CUSKEY1, 
		'BATCH DESCR' AS CUSKEY1D, 
		DKREFD AS CUSKEY2, 
		'LINE DESCR' AS CUSKEY2D, 
		DKKEYN AS CUSKEY3, 
		'BATCH' AS CUSKEY3D, 
		DKREF# AS CUSKEY4, 
		'JOUNAL' AS CUSKEY4D, 
		'' AS CUSVEND, 
		DKBCUS AS CUSCUST, DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GTLYN GTRAN 
	WHERE 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
		DKSRCE IN ('GJ', 'RJ', 'OS', 'AU') 
  
	UNION ALL 
  
	SELECT 
		DKSRCE || DKQUAL, 
		DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
		CHAR (DKTDAT), 
		CHAR (DKPDAT), 
		DIGITS (DKACC#), 
		DKAMT, 
		DKPJNM, 
		DKFUT4, 
		DKREV, 
		'JOURNAL ENTRY' AS CUSMOD, 
		DKADDD AS CUSKEY1, 
		'BATCH DESCR' AS CUSKEY1D, 
		DKREFD AS CUSKEY2, 
		'LINE DESCR' AS CUSKEY2D, 
		DKKEYN AS CUSKEY3, 
		'BATCH' AS CUSKEY3D, 
		DKREF# AS CUSKEY4, 
		'JOUNAL' AS CUSKEY4D, 
		'' AS CUSVEND, 
		DKBCUS AS CUSCUST, DIGITS (DKRCID) AS RECID 
	FROM 
		LGDAT.GNYTR GTRAN 
	WHERE 
		DKFSYR = 20 AND 
		DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
		DKSRCE IN ('GJ', 'RJ', 'OS', 'AU') ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO RLARP.FFSBGLWF SELECT * FROM RLARP.VW_FFWFACM ; 
  
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	DELETE FROM RLARP.FFSBGLWF WHERE MODULE = 'APAC' ; 
  
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	UPDATE RLARP.FFSBGLWF SET MODULE = 'APAC' WHERE MODULE = 'APMA' ; 
  
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLR1_E 
	SELECT 
		W.MODULE, 
		W.BATCH, 
		W.PERD, 
		W.TDATE, 
		W.PDATE, 
		W.ACCT, 
		SUM (W.AMT) AMT, 
		W.PROJ, 
		W.USRN, 
		W.REV, 
		W.CUSMOD, 
		W.CUSKEY1, 
		W.CUSKEY1D, 
		W.CUSKEY2, 
		W.CUSKEY2D, 
		W.CUSKEY3, 
		W.CUSKEY3D, 
		W.CUSKEY4, 
		W.CUSKEY4D, 
		W.CUSVEND, 
		W.CUSCUST, 
		W.RECID 
	FROM 
		RLARP.FFSBGLWF W 
		EXCEPTION JOIN RLARP.FFSBGLR1 F ON 
			W.PERD = F.PERD AND 
			W.MODULE = F.MODULE AND 
			W.CUSMOD = F.CUSMOD AND 
			W.ACCT = F.ACCT AND 
			W.BATCH = F.BATCH AND 
			W.PDATE = F.PDATE AND 
			W.PROJ = F.PROJ AND 
			W.CUSKEY1 = F.CUSKEY1 AND 
			W.CUSKEY2 = F.CUSKEY2 AND 
			W.CUSKEY3 = F.CUSKEY3 AND 
			W.CUSKEY4 = F.CUSKEY4 AND 
			W.CUSVEND = F.CUSVEND AND 
			W.CUSCUST = F.CUSCUST AND 
			W.RECID = F.RECID 
	GROUP BY 
		W.MODULE, 
		W.BATCH, 
		W.PERD, 
		W.TDATE, 
		W.PDATE, 
		W.ACCT, 
		W.PROJ, 
		W.USRN, 
		W.REV, 
		W.CUSMOD, 
		W.CUSKEY1, 
		W.CUSKEY1D, 
		W.CUSKEY2, 
		W.CUSKEY2D, 
		W.CUSKEY3, 
		W.CUSKEY3D, 
		W.CUSKEY4, 
		W.CUSKEY4D, 
		W.CUSVEND, 
		W.CUSCUST, 
		W.RECID ; 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
	INSERT INTO 
		RLARP.FFSBGLR1 
	SELECT 
		W.MODULE, 
		W.BATCH, 
		W.PERD, 
		W.TDATE, 
		W.PDATE, 
		W.ACCT, 
		SUM (W.AMT) AMT, 
		W.PROJ, 
		W.USRN, 
		W.REV, 
		W.CUSMOD, 
		W.CUSKEY1, 
		W.CUSKEY1D, 
		W.CUSKEY2, 
		W.CUSKEY2D, 
		W.CUSKEY3, 
		W.CUSKEY3D, 
		W.CUSKEY4, 
		W.CUSKEY4D, 
		W.CUSVEND, 
		W.CUSCUST, 
		W.RECID 
	FROM 
		RLARP.FFSBGLWF W 
		EXCEPTION JOIN RLARP.FFSBGLR1 F ON 
		W.PERD = F.PERD AND 
		W.MODULE = F.MODULE AND 
		W.CUSMOD = F.CUSMOD AND 
		W.ACCT = F.ACCT AND 
		W.BATCH = F.BATCH AND 
		W.PDATE = F.PDATE AND 
		W.PROJ = F.PROJ AND 
		W.CUSKEY1 = F.CUSKEY1 AND 
		W.CUSKEY2 = F.CUSKEY2 AND 
		W.CUSKEY3 = F.CUSKEY3 AND 
		W.CUSKEY4 = F.CUSKEY4 AND 
		W.CUSVEND = F.CUSVEND AND 
		W.CUSCUST = F.CUSCUST AND 
		W.RECID = F.RECID 
	GROUP BY 
		W.MODULE, 
		W.BATCH, 
		W.PERD, 
		W.TDATE, 
		W.PDATE, 
		W.ACCT, 
		W.PROJ, 
		W.USRN, 
		W.REV, 
		W.CUSMOD, 
		W.CUSKEY1, 
		W.CUSKEY1D, 
		W.CUSKEY2, 
		W.CUSKEY2D, 
		W.CUSKEY3, 
		W.CUSKEY3D, 
		W.CUSKEY4, 
		W.CUSKEY4D, 
		W.CUSVEND, 
		W.CUSCUST, 
		W.RECID ; 
		 
	END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.SB_UD 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.SB_UD 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.SB_UD_R1 (
	IN VPERD VARCHAR(4)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.SB_UD_R1 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DECLARE V_ERROR INTEGER ; 
		DECLARE MSG_VAR VARCHAR (255) ; 
		DECLARE RETRN_STATUS INTEGER ; 
		DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR SELECT * FROM TABLE (RLARP.FN_ISB (VPERD)) AS X ; 
		 
		DECLARE EXIT HANDLER FOR SQLEXCEPTION  --,SQLWARNING 
		BEGIN 
			SET V_ERROR = SQLCODE ; 
			GET DIAGNOSTICS RETRN_STATUS = RETURN_STATUS ; 
		 
			IF (V_ERROR IS NULL) OR (V_ERROR <> 0 AND V_ERROR <> 466) OR (RETRN_STATUS > 3) 
			THEN 
				SET MSG_VAR = 'PROC: ' || 'RLARP.SB_UD' || ', ' || COALESCE (MSG_VAR, '') || ', SQLCODE: ' || CHAR (V_ERROR) || ', PARAMS: ' ; 
				 --ROLLBACK; 
				 --COMMIT; 
				SET RETRN_STATUS = - 1 ; 
				SIGNAL SQLSTATE '75001' SET MESSAGE_TEXT = MSG_VAR ; 
			ELSE 
				SET V_ERROR = 0 ; 
			END IF ; 
		END ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DELETE FROM RLARP.FFSBGLR1 WHERE PERD = VPERD ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DELETE FROM RLARP.FFSBGLWF ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DELETE FROM RLARP.FFSBGLR1_E ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
	 --																Unkown																				-- 
	 -- some kind of purge entry, not sure of the nature																									-- 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL AS MODULE, 
			DIGITS (DKBTC#) AS BATCH, 
			DIGITS (DKFSYY) || DIGITS (DKFSPR), 
			CHAR (DKTDAT) AS TDATE, 
			CHAR (DKPDAT) AS PDATE, 
			DIGITS (DKACC#) AS ACCT, 
			DKAMT AS AMT, 
			DKPJNM AS PROJ, 
			DKFUT4 AS USRN, 
			DKREV AS REV, 
			UPPER (LTRIM (RTRIM (DKREFD))) AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'VOUCHER' AS CUSKEY1D, 
			'' AS KEY2, 
			'' AS KEY2D, 
			'' AS KEY3, 
			'' AS KEY3D, 
			'' AS KEY4, 
			'' AS KEY4D, 
			LTRIM (RTRIM (SUBSTR (DKADDD, 7, 25))) AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBAP 
		WHERE 
			DKSRCE || DKQUAL = 'AP' AND 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD ; 
	/* 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	|														Unmatched Receipts Accrual																	| 
	|___________________________________________________________________________________________________________________________________________________|				 
	|This is the entry that posts for the unmatched receipts in PORCAP. PORCAP receipts do not trigger any GL activity at creation unless they are 	 	| 
	|inventory related, thus this month-end only entry. Not sure what happens if you post multiple time. This section below leaves as-is given that	 	| 
	|the required information might not exist at time of execution. A later block addresses this.														| 																																				| 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	*/ 
  
		INSERT INTO 
			RLARP.FFSBGLWF	 
		SELECT 
			DKSRCE || DKQUAL AS MODULE, 
			DIGITS (DKBTC#) AS BATCH, 
			DIGITS (DKFSYY) || DIGITS (DKFSPR), 
			CHAR (DKTDAT) AS TDATE, 
			CHAR (DKPDAT) AS PDATE, 
			DIGITS (DKACC#) AS ACCT, 
			DKAMT AS AMT, 
			DKPJNM AS PROJ, 
			DKFUT4 AS USRN, 
			DKREV AS REV, 
			UPPER (DKREFD) AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'ITEM' AS CUSKEY1D, 
			'' AS KEY2, 
			'' AS KEY2D, 
			'' AS KEY3, 
			'' AS KEY3D, 
			'' AS KEY4, 
			'' AS KEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBAP 
		WHERE 
			DKSRCE || DKQUAL = 'APAC' AND 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD ; 
		 
		 
	/* 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	|																	Check Runs																		| 
	|___________________________________________________________________________________________________________________________________________________|				 
	|Check runs post at the run# level only. In the GL inquirey you can press F3 and get a check list, but these records are not actually on the ledger	| 
	|This is not a sufficient level of detail for reporting purposes but does accurately reflect the value												| 
	|The anchor point here is the ledger itself. Other linked components are:																			| 
	| - CHQR - Check details file																														| 
	| - AVTX - Open AP transaction file																													| 
	| - VCHR - Voucher file																																| 
	| - CHQ  - This is a subquery aggreagting check# totals for gross and discounts taken. There *shouldn't* be duplicates but technically the same		| 
	|		   check number could be issued under different bank codes. Since the anchor table is the ledger, we have no way to join on that field and	| 
	|		   so to eliminate chance of duplication, we must first aggregate the target table to the joining fields level								| 
	| - CHE  - Subquery aggregating gross and discounts taken by run number																				|	   
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	*/ 
  
  
		INSERT INTO 
			RLARP.FFSBGLWF	 
		SELECT 
			DKSRCE || DKQUAL AS MODULE, 
			DIGITS (DKBTC#) AS BATCH, 
			DIGITS (DKFSYY) || DIGITS (DKFSPR), 
			CHAR (DKTDAT) AS TDATE, 
			CHAR (DKPDAT) AS PDATE, 
			DIGITS (DKACC#) AS ACCT, 
			ROUND (CASE 
				 --assumption is that there are 3 possible ledger values, gross, discount, or net, all which have ben broked out by check & invoice 
				WHEN ABS (DKAMT) = CHR.GROS - CHR.DISC THEN AVTVAM - AVTDIS	 --break out net on ledger 
				WHEN ABS (DKAMT) = CHR.GROS THEN AVTVAM					 --break out gross on ledger 
				WHEN ABS (DKAMT) = CHR.DISC THEN AVTDIS					 --break out discount on ledger 
				ELSE ABS (DKAMT) * (AVTVAM / CHR.GROS)						 --if not matched to any value apply check level detail prorata 
			END * CASE 
				WHEN DKAMT < 0 THEN - 1 
				ELSE 1 
			END, 2) AS AMT, 
			DKPJNM AS PROJ, 
			DKFUT4 AS USRN, 
			DKREV AS REV, 
			'CHECK RUN' AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'CHECK TRANSACTION' AS CUSKEY1D, 
			IGCHQ# AS KEY2, 
			'CHECK NUMBER' AS CUSKEY2D, 
			AVTVH# AS CUSKEY3,											 
			'VOUCHER' AS CUSKEY3D, 
			IDINV# AS CUSKEY4, 
			'INVOICE' AS CUSKEY4D, 
			IGVEN# AS CUSVEND, 
			'' AS CUSCUST, DKRCID 
		FROM 
			LGDAT.GLSBAP						 --DK (anchor file is AP subledger with limiter on source & fiscal) 
			LEFT OUTER JOIN LGDAT.CHQR ON		 --IG (need check#'s in run for link to AVTX, grab check IGCHQ#, vendor IGVEN#) 
				IGTXR# = DKKEYN AND 
				IGFSYY = DKFSYY AND 
				IGFSPP = DKFSPR 
			LEFT OUTER JOIN LGDAT.AVTX ON		 --AV (need for amount by check, also grab voucher# AVTVH#, gross paid AVTVAM, discount taken AVTDIS) 
				AVTCO# = IGCOM# AND 
				AVTCHQ = IGCHQ# AND 
				AVTCHB = IGBNK# AND AVTTYP IN (' 4', ' 5') 
			LEFT OUTER JOIN LGDAT.VCHR ON		 --ID (need for invoice#) 
				IDCOM# = IGCOM# AND 
				IDBNK# = IGBNK# AND 
				IDVCH# = AVTVH# 
			LEFT OUTER JOIN 
			(
				SELECT 
					IGCOM# AS COMP, IGTXR# AS TXR, IGCHQ# AS CHQN, IGFSYY AS YY, IGFSPP AS PP, SUM (IGGROS) AS GROS, SUM (IGDISC) AS DISC 
				FROM 
					LGDAT.CHQR 
				WHERE 
					 --inner most select is a unique list of check run numbers direct from GL. does NOT key off of indexed fields but still runs really fast 
					IGTXR# IN (SELECT DISTINCT DKKEYN FROM LGDAT.GLSBAP WHERE DKSRCE = 'AP' AND DKQUAL = 'CQ' AND DKFSYR = 20 AND DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD) 
				GROUP BY 
					IGCOM#, IGTXR#, IGCHQ#, IGFSYY, IGFSPP 
			) CHQ ON 
				CHQ.COMP = SUBSTR (DKACC#, 1, 2) AND 
				CHQ.TXR = DKKEYN AND 
				CHQ.YY = DKFSYY AND 
				CHQ.PP = DKFSPR AND 
				CHQN = IGCHQ# 
			LEFT OUTER JOIN 
			(
				SELECT 
					IGCOM# AS COMP, IGTXR# AS TXR, IGFSYY AS YY, IGFSPP AS PP, SUM (IGGROS) AS GROS, SUM (IGDISC) AS DISC 
				FROM 
					LGDAT.CHQR 
				WHERE 
					IGTXR# IN (SELECT DISTINCT DKKEYN FROM LGDAT.GLSBAP WHERE DKSRCE = 'AP' AND DKQUAL = 'CQ' AND DKFSYR = 20 AND DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD) 
				GROUP BY 
					IGCOM#, IGTXR#, IGFSYY, IGFSPP 
			) CHR ON 
				CHR.COMP = SUBSTR (DKACC#, 1, 2) AND 
				CHR.TXR = DKKEYN AND 
				CHR.YY = DKFSYY AND 
				CHR.PP = DKFSPR 
		WHERE 
			DKSRCE = 'AP' AND 
			DKQUAL = 'CQ' AND 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD ; 
	 
	/* 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	|																	Void Checks																		| 
	|___________________________________________________________________________________________________________________________________________________|				 
	|Voided check transactions APVC post to the anchor file GLSBAP with a hook to the check number whihc is used to go back and embed voucher & invoice	| 
	|The data natively exists with the appropriate level of granularity for reporting and is also accurate												| 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	*/ 
  
  
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL AS MODULE, 
			DIGITS (DKBTC#) AS BATCH, DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT) AS TDATE, 
			CHAR (DKPDAT) AS PDATE, 
			DIGITS (DKACC#) AS ACCT, 
			ROUND (CASE 
			WHEN ABS (DKAMT) < IGGROS THEN ABS (DKAMT) / IGGROS 
			ELSE 1 
			END * CASE WHEN DKAMT < 0 THEN - 1 ELSE 1 END * AVTAMT, 2) AS AMT, 
			DKPJNM AS PROJ, 
			DKFUT4 AS USRN, 
			DKREV AS REV, 
			UPPER (LTRIM (RTRIM (SUBSTR (DKREFD, 1, 9)))) AS CUSMOD, 
			IGTXR# AS CUSKEY1, 
			'CHECK TRANSACTION' AS CUSKEY1D, 
			IGCHQ# AS KEY2, 
			'CHECK NUMBER' AS CUSKEY2D, 
			DIGITS (AVTVH#) AS CUSKEY3, 
			'VOUCHER' AS CUSKEY3D, 
			IDINV# AS CUSKEY4, 
			'INVOICE' AS CUSKEY4D, 
			IGVEN# AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBAP 
			LEFT OUTER JOIN LGDAT.AVTX ON 
				AVTCO# = SUBSTR (DKACC#, 1, 2) AND 
				AVTCHQ = DKKEYN AND 
				AVTTYP = 7 AND 
				AVTFIS = DKFSYR || DKFSYY || DIGITS (DKFSPR) 
			LEFT OUTER JOIN LGDAT.CHQR ON 
				IGCOM# = AVTCO# AND 
				IGBNK# = AVTCHB AND 
				IGCHQ# = AVTCHQ 
			LEFT OUTER JOIN LGDAT.VCHR ON 
				IDCOM# = IGCOM# AND 
				IDBNK# = IGBNK# AND 
				IDVCH# = AVTVH# 
			WHERE 
				DKSRCE || DKQUAL = 'APVC' AND 
				DKFSYR = 20 AND 
				DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD ; 
  
	/* 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	|																	Voucher Posting																	| 
	|___________________________________________________________________________________________________________________________________________________|				 
	|Voucher postings are transacted without reference to the 3-way match data																			| 
	|this module currently only gets half way there because of complications around manually changing the accounts or amounts involved in the voucher	| 
	|The PO & description are linked in, but ideally we would have the master receipt key which is the common thread for reporting						| 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	*/ 
	 -----need to look at a new approach where the POMVAR linkage is setup if matching was used, otherwise default to this logic 
	INSERT INTO	 
		RLARP.FFSBGLWF 
	SELECT 
		MODULE, BATCH, PERD, TDATE, PDATE, ACCT, 
		SUM (AMT) AMT, 
		PROJ, USRN, REV, CUSMOD, CUSKEY1, CUSKEY1D, CUSKEY2, CUSKEY2D, CUSKEY3, CUSKEY3D, CUSKEY4, CUSKEY4D, CUSVEND, CUSCUST, RECID 
	FROM 
		(
		SELECT 
			DKSRCE || DKQUAL AS MODULE, 
			DIGITS (DKBTC#) AS BATCH, 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) PERD, 
			CHAR (DKTDAT) AS TDATE, 
			CHAR (DKPDAT) AS PDATE, 
			DIGITS (DKACC#) AS ACCT, 
			CASE WHEN PPV_DET IS NULL 
				THEN DKAMT 
				ELSE ROUND (DKAMT * PPV_DET, 2) 
			END AMT, 
			DKPJNM AS PROJ, 
			DKFUT4 AS USRN, 
			DKREV AS REV, 
			'VOUCHER POSTING' CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'VOUCHER NUMBER' AS CUSKEY1D, 
			IDINV# AS CUSKEY2, 
			'INVOICE' AS CUSKEY2D, 
			CASE WHEN PPV_DET IS NULL THEN IDVDES ELSE DIGITS (LBRKEY) END AS CUSKEY3, 
			CASE WHEN PPV_DET IS NULL THEN 'DESCR' ELSE 'RKEY' END AS CUSKEY3D, 
			LBPT# AS CUSKEY4, 
			CASE WHEN COALESCE (LBPT#, '') = '' THEN '' ELSE 'PART' END AS CUSKEY4D, 
			IDVEN# AS CUSVEND, 
			'' AS CUSCUST, 
			DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBAP 
			LEFT OUTER JOIN LGDAT.VCHR ON 
				IDCOM# = SUBSTR (DKACC#, 1, 2) AND 
				IDVCH# = DKKEYN AND 
				IDFISY = DKFSYY AND 
				IDFISP = DKFSPR 
				 --an assumption is that given a fiscal period all voucher numbers are different, however this could be violated due to bank codes 
				 --not being differentiated on the ledger and the account code may not reflect the bank code granularity and there is no history 
				 --file on the bank master data so it doesn't matter anyways 
			LEFT OUTER JOIN 
			(
				SELECT 
					X.COMP COMP, X.VCHR VCHR, X.ACCT ACCT, X.PPV PPV, X.CNT CNT, X.TOT TOT, LBRKEY, LBPT#, LBEXT, LBCOM# || Y1PRVR PPVACCT, LBPPV, 
					CASE X.PPV 
						WHEN 0 THEN 
							CASE X.TOT 
								WHEN 0 THEN FLOAT (1) / FLOAT (X.CNT) 
								ELSE LBEXT / X.TOT 
							END 
						ELSE LBPPV / X.PPV 
					END PPV_DET 
				FROM	 
					LGDAT.POMVAR 
					LEFT OUTER JOIN LGDAT.STKMM ON 
						AVPART = LBPT# 
					LEFT OUTER JOIN LGDAT.STKMP ON 
						AWPART = LBPT# 
					LEFT OUTER JOIN LGDAT.GLIE ON 
						Y1PLNT = LBPLNT AND 
						Y1GLEC = COALESCE (AVGLED, AWGLED) 
					LEFT OUTER JOIN LGDAT.POI ON 
						KBPO# = LBPO# AND 
						KBITM# = LBPOI# 
					LEFT OUTER JOIN 
					(
						SELECT 
							LBCOM# COMP, LBVCH# VCHR, 
							LBCOM# || COALESCE (Y1PRVR, KBGL#) ACCT,  --if the ppv account is null, then use the expense account from the PO 
							SUM (LBPPV) PPV, COUNT (LBRKEY) CNT, SUM (LBEXT) TOT 
						FROM	 
							LGDAT.POMVAR 
							LEFT OUTER JOIN LGDAT.STKMM ON 
								AVPART = LBPT# 
							LEFT OUTER JOIN LGDAT.STKMP ON 
								AWPART = LBPT# 
							LEFT OUTER JOIN LGDAT.GLIE ON 
								Y1PLNT = LBPLNT AND 
								Y1GLEC = COALESCE (AVGLED, AWGLED) 
							LEFT OUTER JOIN LGDAT.POI ON 
								KBPO# = LBPO# AND 
								KBITM# = LBPOI# 
								 
						WHERE 
							DIGITS (LBFSYY) || DIGITS (LBFSPP) = VPERD 
							 --may need to consider excluding .00001 cost items 
						GROUP BY 
							LBCOM#, LBVCH#, LBCOM# || COALESCE (Y1PRVR, KBGL#) 
					) X ON 
						X.COMP = LBCOM# AND	 
						X.VCHR = LBVCH# AND 
						X.ACCT = LBCOM# || COALESCE (Y1PRVR, KBGL#) 
				WHERE 
					DIGITS (LBFSYY) || DIGITS (LBFSPP) = VPERD 
			) SPLIT ON	 
				SPLIT.COMP = SUBSTR (DKACC#, 1, 2) AND	 
				SPLIT.VCHR = DKKEYN AND 
				SPLIT.ACCT = DKACC# 
		WHERE 
			DKSRCE = 'AP' AND 
			DKQUAL = 'VN' AND 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD 
		) AGG 
	GROUP BY 
		MODULE, BATCH, PERD, TDATE, PDATE, ACCT, 
		PROJ, USRN, REV, CUSMOD, CUSKEY1, CUSKEY1D, CUSKEY2, CUSKEY2D, CUSKEY3, CUSKEY3D, CUSKEY4, CUSKEY4D, CUSVEND, CUSCUST, RECID ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------	 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			BL8SRCE || BL8QUAL, 
			DIGITS (BL8BTC#), 
			BL8FSYY || DIGITS (BL8FSPR), 
			CHAR (BL8TRDAT), 
			CHAR (BL8PDAT), 
			BL8ACC#, 
			BL8AMT, 
			BL8PJNB, 
			BL8USER, 
			BL8REV, 
			CASE DKQUAL 
				WHEN '' THEN UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
				WHEN 'IN' THEN 'CREDIT MEMO' 
				WHEN 'RC' THEN UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
				ELSE 'NOT MAPPED' 
			END CUSMOD, 
			CASE DKQUAL 
				WHEN '' THEN BL8REFB 
				WHEN 'IN' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN SUBSTR (BL8KEYN, 2, 5) ELSE BL8KEYN END 
				WHEN 'RC' THEN 
				CASE UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
					WHEN 'ADJUSTMENT' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN SUBSTR (BL8KEYN, 2, 5) ELSE BL8KEYN END 
					WHEN 'CASH RECEIPINV' THEN CASE SUBSTR (BL8REFD, 16, 1) WHEN 'D' THEN SUBSTR (BL8REFD, 17, 5) ELSE SUBSTR (BL8REFD, 16, 6) END 
					WHEN 'DISCOUNT' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN SUBSTR (BL8KEYN, 2, 5) ELSE BL8KEYN END 
					WHEN 'MISC CASH ENTR' THEN BL8ADDD 
					ELSE '' 
				END 
				ELSE 'NOT MAPPED' 
			END CUSKEY1, 
			CASE DKQUAL 
				WHEN '' THEN 'DESCR1' 
				WHEN 'IN' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN 'DEBIT NOTE-CCRH' ELSE 'INVOICE-OIH' END 
				WHEN 'RC' THEN 
				CASE UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
					WHEN 'ADJUSTMENT' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN 'DEBIT MEMO-X' ELSE 'INVOICE-OIH' END 
					WHEN 'CASH RECEIPINV' THEN CASE SUBSTR (BL8REFD, 16, 1) WHEN 'D' THEN 'DEBIT MEMO-X' ELSE 'INVOICE-OIH' END 
					WHEN 'DISCOUNT' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN 'DEBIT MEMO-X' ELSE 'INVOICE-OIH' END 
					WHEN 'MISC CASH ENTR' THEN 'DESCRIPTION-X' 
					ELSE '' 
				END 
				ELSE 'NOT MAPPED' 
			END CUSKEY1D, 
			CASE DKQUAL 
				WHEN '' THEN BL8ADDD 
				WHEN 'IN' THEN BL8REF 
				WHEN 'RC' THEN 
				CASE UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
					WHEN 'CASH RECEIPINV' THEN BL8KEYN 
					WHEN 'CASH RECEIPT' THEN BL8KEYN 
					ELSE '' 
				END 
				ELSE 'NOT MAPPED' 
			END CUSKEY2, 
			CASE DKQUAL 
				WHEN '' THEN 'DESCR2' 
				WHEN 'IN' THEN 'OFFSET&DESCR' 
				WHEN 'RC' THEN 
				CASE UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
					WHEN 'CASH RECEIPINV' THEN 'CHEQUE-ARTRN' 
					WHEN 'CASH RECEIPT' THEN 'CHEQUE-ARTRN' 
					ELSE '' 
				END 
				ELSE 'NOT MAPPED' 
			END CUSKEY2D, 
			DIGITS (BL8BTCH) AS CUSKEY3, 
			'AR BATCH' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			BL8CUST, '0' RECID 
		FROM 
			LGDAT.AROPT 
			INNER JOIN (SELECT DISTINCT DKACC#, DKFSYY, DKFSPR, DKSRCE, DKQUAL FROM LGDAT.GLSBAR WHERE DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND DKSRCE = 'AR') X ON 
				DKACC# = BL8ACC# AND 
				BL8SRCE = DKSRCE AND 
				BL8QUAL = DKQUAL AND 
				BL8FSYY = DKFSYY AND 
				BL8FSPR = DKFSPR ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), 
			DKFSYY || DIGITS (DKFSPR), 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DKACC#, 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			UPPER (RTRIM (SUBSTR (DKREFD, 1, 15))) CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'ITEM' AS CUSKEY1D, 
			DKADDD AS CUSKEY2, 
			'DESCR' AS CUSKEY2D, 
			'' AS CUSKEY3, 
			'' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'', DKRCID RECID 
		FROM 
			LGDAT.GLSBAR 
		WHERE 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'AR' AND 
			DKQUAL = 'RC' AND 
			DKREFD = 'MISC CASH ENTRY' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF	 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			LTRIM (RTRIM (UPPER (SUBSTR (DKADDD, 1, 4)))) AS CUSMOD, 
			DKPART AS CUSKEY1, 
			'PART' AS CUSKEY1D, 
			LTRIM (RTRIM (SUBSTR (DKADDD, 13, 14))) AS CUSKEY2, 
			'QTY' AS CUSKEY2D, 
			LTRIM (RTRIM (SUBSTR (DKADDD, 28, 2))) AS CUSKEY3, 
			'UOM' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBIV GLSBIV 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'IC' AND 
			DKQUAL = '' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			LTRIM (RTRIM (UPPER (SUBSTR (DKADDD, 1, 14)))) AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'INVOICE' AS CUSKEY1D, 
			DKFUT9 AS CUSKEY2, 
			'INVOICE LINE' AS CUSKEY2D, 
			DHPLNT AS CUSKEY3, 
			'SHIP PLNT' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DHBCS# AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBIV GLSBIV 
			LEFT OUTER JOIN LGDAT.OIH ON 
				DHINV# = DKKEYN 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'IC' AND 
			DKQUAL = 'IN' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			LTRIM (RTRIM (UPPER (SUBSTR (DKADDD, 1, 4)))) AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'BYTRAN' AS CUSKEY1D, 
			BYREAS AS CUSKEY2, 
			'REASON' AS CUSKEY2D, 
			BYDREF AS CUSKEY3, 
			'DESCR' AS CUSKEY3D, 
			BYPART AS CUSKEY4, 
			'PART' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBIV GLSBIV 
			LEFT OUTER JOIN LGDAT.STKT ON 
				BYTRAN = INT (DKKEYN) 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'IC' AND 
			DKQUAL = 'IT' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'GOODS RECEIPT' AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'REC LOG' AS CUSKEY1D, 
			DKPART AS CUSKEY2, 
			'PART' AS CUSTKEY2D, 
			'' AS CUSKEY3, 
			'' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBIV GLSBIV 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD	AND 
			DKSRCE = 'IC' AND 
			DKQUAL = 'RL' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL AS MODULE, 
			DIGITS (DKBTC#) AS BATCH, 
			DIGITS (DKFSYY) || DIGITS (DKFSPR), 
			CHAR (DKTDAT) AS TDATE, 
			CHAR (DKPDAT) AS PDATE, 
			DIGITS (DKACC#) AS ACCT, 
			DKAMT AS AMT, 
			DKPJNM AS PROJ, 
			DKFUT4 AS USRN, 
			DKREV AS REV, 
			SUBSTR (DKADDD, 1, 12), DKKEYN, 
			'RAN DOC NUM AND ITM', 
			INRAN#, 
			'RAN', 
			INCRD# || ' - ' || INITM#, 
			'CREDIT AND ITEM', 
			DIINV#, 
			'CREDIT INVOICE', 
			'', 
			INCUST, 
			DKRCID 
		FROM 
			LGDAT.GLSBIV 
			LEFT OUTER JOIN LGDAT.RANS ON 
				INRNDR = SUBSTR (DKKEYN, 1, LOCATE ('/', DKKEYN) - 1) AND 
				INRNDI = SUBSTR (DKKEYN, LOCATE ('/', DKKEYN) + 1, 1) 
			LEFT OUTER JOIN LGDAT.OID ON 
				DIORD# = INCRD# AND 
				DIITM# = INITM# AND 
				DIGITS (INCRD#) <> '000000000' 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'IC' AND 
			DKQUAL = 'RT' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'GOODS RECEIPT' AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'RETURN TO VENDOR' AS CUSKEY1D, 
			DKPART AS CUSKEY2, 
			'PART' AS CUSKEY2D, 
			'' AS CUSKEY3, 
			'' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBIV GLSBIV 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'IC' AND 
			DKQUAL = 'VR' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			UPPER (LTRIM (RTRIM (SUBSTR (DKREFD, 1, 14)))) AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'INVOICE' AS CUSKEY1D, 
			DKFUT9 AS CUSKEY2, 
			'INVOICE LINE' AS CUSKEY2D, 
			DHPLNT AS CUSKEY3, 
			'INVOICE PLANT' AS CUSKEY3D, 
			DHINCR AS CUSKEY4, 
			'INC/CRD' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DHBCS# AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBAR GLSBAR 
			LEFT OUTER JOIN LGDAT.OIH ON 
				DHINV# = DKKEYN 
		WHERE 
			GLSBAR.DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'OE' AND 
			DKQUAL = 'IN' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			SUM (DKAMT), 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'PRODUCTION REPORTING' AS CUSMOD, 
			'' AS CUSKEY1, 
			'' AS CUSKEY1D, 
			'' AS CUSKEY2, 
			'' AS CUSKEY2D, 
			UPPER (CASE WHEN SUBSTR (DKREFD, 1, 7) IN ('COMPLET', 'CP- PO#', 'WIP ADJ', 'VOID CO', 'REV WIP') THEN SUBSTR (DKREFD, 1, 7) ELSE SUBSTR (DKADDD, 1, 24) END) AS CUSKEY3, 
			'ACTION' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, '0' AS DKRCID 
		FROM 
			LGDAT.GTRAN GLSBIV 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'PD' 
		GROUP BY 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), 
			DIGITS (DKFSYY) || DIGITS (DKFSPR), 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			UPPER (CASE WHEN SUBSTR (DKREFD, 1, 7) IN ('COMPLET', 'CP- PO#', 'WIP ADJ', 'VOID CO', 'REV WIP') THEN SUBSTR (DKREFD, 1, 7) ELSE SUBSTR (DKADDD, 1, 24) END) ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'JOURNAL ENTRY' AS CUSMOD, 
			DKADDD AS CUSKEY1, 
			'BATCH DESCR' AS CUSKEY1D, 
			DKREFD AS CUSKEY2, 
			'LINE DESCR' AS CUSKEY2D, 
			DKKEYN AS CUSKEY3, 
			'BATCH' AS CUSKEY3D, 
			DKREF# AS CUSKEY4, 
			'JOUNAL' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DKBCUS AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GTRAN GTRAN 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE IN ('GJ', 'RJ', 'OS', 'AU') 
  
		UNION ALL 
  
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'JOURNAL ENTRY' AS CUSMOD, 
			DKADDD AS CUSKEY1, 
			'BATCH DESCR' AS CUSKEY1D, 
			DKREFD AS CUSKEY2, 
			'LINE DESCR' AS CUSKEY2D, 
			DKKEYN AS CUSKEY3, 
			'BATCH' AS CUSKEY3D, 
			DKREF# AS CUSKEY4, 
			'JOUNAL' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DKBCUS AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GTLYN GTRAN 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE IN ('GJ', 'RJ', 'OS', 'AU') 
  
		UNION ALL 
  
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'JOURNAL ENTRY' AS CUSMOD, 
			DKADDD AS CUSKEY1, 
			'BATCH DESCR' AS CUSKEY1D, 
			DKREFD AS CUSKEY2, 
			'LINE DESCR' AS CUSKEY2D, 
			DKKEYN AS CUSKEY3, 
			'BATCH' AS CUSKEY3D, 
			DKREF# AS CUSKEY4, 
			'JOUNAL' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DKBCUS AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GNYTR GTRAN 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE IN ('GJ', 'RJ', 'OS', 'AU') ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO RLARP.FFSBGLWF SELECT * FROM RLARP.VW_FFWFACM ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DELETE FROM RLARP.FFSBGLWF WHERE MODULE = 'APAC' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		UPDATE RLARP.FFSBGLWF SET MODULE = 'APAC' WHERE MODULE = 'APMA' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLR1_E 
		SELECT 
			W.MODULE, 
			W.BATCH, 
			W.PERD, 
			W.TDATE, 
			W.PDATE, 
			W.ACCT, 
			SUM (W.AMT) AMT, 
			W.PROJ, 
			W.USRN, 
			W.REV, 
			W.CUSMOD, 
			W.CUSKEY1, 
			W.CUSKEY1D, 
			W.CUSKEY2, 
			W.CUSKEY2D, 
			W.CUSKEY3, 
			W.CUSKEY3D, 
			W.CUSKEY4, 
			W.CUSKEY4D, 
			W.CUSVEND, 
			W.CUSCUST, 
			W.RECID 
		FROM 
			RLARP.FFSBGLWF W 
			EXCEPTION JOIN RLARP.FFSBGLR1 F ON 
				W.PERD = F.PERD AND 
				W.MODULE = F.MODULE AND 
				W.CUSMOD = F.CUSMOD AND 
				W.ACCT = F.ACCT AND 
				W.BATCH = F.BATCH AND 
				W.PDATE = F.PDATE AND 
				W.PROJ = F.PROJ AND 
				W.CUSKEY1 = F.CUSKEY1 AND 
				W.CUSKEY2 = F.CUSKEY2 AND 
				W.CUSKEY3 = F.CUSKEY3 AND 
				W.CUSKEY4 = F.CUSKEY4 AND 
				W.CUSVEND = F.CUSVEND AND 
				W.CUSCUST = F.CUSCUST AND 
				W.RECID = F.RECID 
		GROUP BY 
			W.MODULE, 
			W.BATCH, 
			W.PERD, 
			W.TDATE, 
			W.PDATE, 
			W.ACCT, 
			W.PROJ, 
			W.USRN, 
			W.REV, 
			W.CUSMOD, 
			W.CUSKEY1, 
			W.CUSKEY1D, 
			W.CUSKEY2, 
			W.CUSKEY2D, 
			W.CUSKEY3, 
			W.CUSKEY3D, 
			W.CUSKEY4, 
			W.CUSKEY4D, 
			W.CUSVEND, 
			W.CUSCUST, 
			W.RECID ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLR1 
		SELECT 
			W.MODULE, 
			W.BATCH, 
			W.PERD, 
			W.TDATE, 
			W.PDATE, 
			W.ACCT, 
			SUM (W.AMT) AMT, 
			W.PROJ, 
			W.USRN, 
			W.REV, 
			W.CUSMOD, 
			W.CUSKEY1, 
			W.CUSKEY1D, 
			W.CUSKEY2, 
			W.CUSKEY2D, 
			W.CUSKEY3, 
			W.CUSKEY3D, 
			W.CUSKEY4, 
			W.CUSKEY4D, 
			W.CUSVEND, 
			W.CUSCUST, 
			W.RECID 
		FROM 
			RLARP.FFSBGLWF W 
			EXCEPTION JOIN RLARP.FFSBGLR1 F ON 
				W.PERD = F.PERD AND 
				W.MODULE = F.MODULE AND 
				W.CUSMOD = F.CUSMOD AND 
				W.ACCT = F.ACCT AND 
				W.BATCH = F.BATCH AND 
				W.PDATE = F.PDATE AND 
				W.PROJ = F.PROJ AND 
				W.CUSKEY1 = F.CUSKEY1 AND 
				W.CUSKEY2 = F.CUSKEY2 AND 
				W.CUSKEY3 = F.CUSKEY3 AND 
				W.CUSKEY4 = F.CUSKEY4 AND 
				W.CUSVEND = F.CUSVEND AND 
				W.CUSCUST = F.CUSCUST AND 
				W.RECID = F.RECID 
		GROUP BY 
			W.MODULE, 
			W.BATCH, 
			W.PERD, 
			W.TDATE, 
			W.PDATE, 
			W.ACCT, 
			W.PROJ, 
			W.USRN, 
			W.REV, 
			W.CUSMOD, 
			W.CUSKEY1, 
			W.CUSKEY1D, 
			W.CUSKEY2, 
			W.CUSKEY2D, 
			W.CUSKEY3, 
			W.CUSKEY3D, 
			W.CUSKEY4, 
			W.CUSKEY4D, 
			W.CUSVEND, 
			W.CUSCUST, 
			W.RECID ; 
			 
		OPEN C1 ;	 
		 
	END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.SB_UD_R1 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.SB_UD_R1 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.SB_UD_R2 (
	IN VPERD VARCHAR(4)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.SB_UD_R2 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
	 
------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DECLARE V_ERROR INTEGER ; 
		DECLARE MSG_VAR VARCHAR (255) ; 
		DECLARE RETRN_STATUS INTEGER ; 
		DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR SELECT * FROM TABLE (RLARP.FN_ISB (VPERD)) AS X ; 
		 
		DECLARE EXIT HANDLER FOR SQLEXCEPTION  --,SQLWARNING 
		BEGIN 
			SET V_ERROR = SQLCODE ; 
			GET DIAGNOSTICS RETRN_STATUS = RETURN_STATUS ; 
		 
			IF (V_ERROR IS NULL) OR (V_ERROR <> 0 AND V_ERROR <> 466) OR (RETRN_STATUS > 3) 
			THEN 
				SET MSG_VAR = 'PROC: ' || 'RLARP.SB_UD' || ', ' || COALESCE (MSG_VAR, '') || ', SQLCODE: ' || CHAR (V_ERROR) || ', PARAMS: ' ; 
				 --ROLLBACK; 
				 --COMMIT; 
				SET RETRN_STATUS = - 1 ; 
				SIGNAL SQLSTATE '75001' SET MESSAGE_TEXT = MSG_VAR ; 
			ELSE 
				SET V_ERROR = 0 ; 
			END IF ; 
		END ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DELETE FROM RLARP.FFSBGLR1 WHERE PERD = VPERD ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DELETE FROM RLARP.FFSBGLWF ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DELETE FROM RLARP.FFSBGLR1_E ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
	 --																Unkown																				-- 
	 -- some kind of purge entry, not sure of the nature																									-- 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL AS MODULE, 
			DIGITS (DKBTC#) AS BATCH, 
			DIGITS (DKFSYY) || DIGITS (DKFSPR), 
			CHAR (DKTDAT) AS TDATE, 
			CHAR (DKPDAT) AS PDATE, 
			DIGITS (DKACC#) AS ACCT, 
			DKAMT AS AMT, 
			DKPJNM AS PROJ, 
			DKFUT4 AS USRN, 
			DKREV AS REV, 
			UPPER (LTRIM (RTRIM (DKREFD))) AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'VOUCHER' AS CUSKEY1D, 
			'' AS KEY2, 
			'' AS KEY2D, 
			'' AS KEY3, 
			'' AS KEY3D, 
			'' AS KEY4, 
			'' AS KEY4D, 
			LTRIM (RTRIM (SUBSTR (DKADDD, 7, 25))) AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBAP 
		WHERE 
			DKSRCE || DKQUAL = 'AP' AND 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD ; 
	/* 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	|														Unmatched Receipts Accrual																	| 
	|___________________________________________________________________________________________________________________________________________________|				 
	|This is the entry that posts for the unmatched receipts in PORCAP. PORCAP receipts do not trigger any GL activity at creation unless they are 	 	| 
	|inventory related, thus this month-end only entry. Not sure what happens if you post multiple time. This section below leaves as-is given that	 	| 
	|the required information might not exist at time of execution. A later block addresses this.														| 																																				| 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	*/ 
  
		INSERT INTO 
			RLARP.FFSBGLWF	 
		SELECT 
			DKSRCE || DKQUAL AS MODULE, 
			DIGITS (DKBTC#) AS BATCH, 
			DIGITS (DKFSYY) || DIGITS (DKFSPR), 
			CHAR (DKTDAT) AS TDATE, 
			CHAR (DKPDAT) AS PDATE, 
			DIGITS (DKACC#) AS ACCT, 
			DKAMT AS AMT, 
			DKPJNM AS PROJ, 
			DKFUT4 AS USRN, 
			DKREV AS REV, 
			UPPER (DKREFD) AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'ITEM' AS CUSKEY1D, 
			'' AS KEY2, 
			'' AS KEY2D, 
			'' AS KEY3, 
			'' AS KEY3D, 
			'' AS KEY4, 
			'' AS KEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBAP 
		WHERE 
			DKSRCE || DKQUAL = 'APAC' AND 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD ; 
		 
		 
	/* 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	|																	Check Runs																		| 
	|___________________________________________________________________________________________________________________________________________________|				 
	|Check runs post at the run# level only. In the GL inquirey you can press F3 and get a check list, but these records are not actually on the ledger	| 
	|This is not a sufficient level of detail for reporting purposes but does accurately reflect the value												| 
	|The anchor point here is the ledger itself. Other linked components are:																			| 
	| - CHQR - Check details file																														| 
	| - AVTX - Open AP transaction file																													| 
	| - VCHR - Voucher file																																| 
	| - CHQ  - This is a subquery aggreagting check# totals for gross and discounts taken. There *shouldn't* be duplicates but technically the same		| 
	|		   check number could be issued under different bank codes. Since the anchor table is the ledger, we have no way to join on that field and	| 
	|		   so to eliminate chance of duplication, we must first aggregate the target table to the joining fields level								| 
	| - CHE  - Subquery aggregating gross and discounts taken by run number																				|	   
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	*/ 
  
  
		INSERT INTO 
			RLARP.FFSBGLWF	 
		SELECT 
			DKSRCE || DKQUAL AS MODULE, 
			DIGITS (DKBTC#) AS BATCH, 
			DIGITS (DKFSYY) || DIGITS (DKFSPR), 
			CHAR (DKTDAT) AS TDATE, 
			CHAR (DKPDAT) AS PDATE, 
			DIGITS (DKACC#) AS ACCT, 
			ROUND (CASE 
				 --assumption is that there are 3 possible ledger values, gross, discount, or net, all which have ben broked out by check & invoice 
				WHEN ABS (DKAMT) = CHR.GROS - CHR.DISC THEN AVTVAM - AVTDIS	 --break out net on ledger 
				WHEN ABS (DKAMT) = CHR.GROS THEN AVTVAM					 --break out gross on ledger 
				WHEN ABS (DKAMT) = CHR.DISC THEN AVTDIS					 --break out discount on ledger 
				ELSE ABS (DKAMT) * (AVTVAM / CHR.GROS)						 --if not matched to any value apply check level detail prorata 
			END * CASE 
				WHEN DKAMT < 0 THEN - 1 
				ELSE 1 
			END, 2) AS AMT, 
			DKPJNM AS PROJ, 
			DKFUT4 AS USRN, 
			DKREV AS REV, 
			'CHECK RUN' AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'CHECK TRANSACTION' AS CUSKEY1D, 
			IGCHQ# AS KEY2, 
			'CHECK NUMBER' AS CUSKEY2D, 
			AVTVH# AS CUSKEY3,											 
			'VOUCHER' AS CUSKEY3D, 
			IDINV# AS CUSKEY4, 
			'INVOICE' AS CUSKEY4D, 
			IGVEN# AS CUSVEND, 
			'' AS CUSCUST, DKRCID 
		FROM 
			LGDAT.GLSBAP						 --DK (anchor file is AP subledger with limiter on source & fiscal) 
			LEFT OUTER JOIN LGDAT.CHQR ON		 --IG (need check#'s in run for link to AVTX, grab check IGCHQ#, vendor IGVEN#) 
				IGTXR# = DKKEYN AND 
				IGFSYY = DKFSYY AND 
				IGFSPP = DKFSPR 
			LEFT OUTER JOIN LGDAT.AVTX ON		 --AV (need for amount by check, also grab voucher# AVTVH#, gross paid AVTVAM, discount taken AVTDIS) 
				AVTCO# = IGCOM# AND 
				AVTCHQ = IGCHQ# AND 
				AVTCHB = IGBNK# AND AVTTYP IN (' 4', ' 5') 
			LEFT OUTER JOIN LGDAT.VCHR ON		 --ID (need for invoice#) 
				IDCOM# = IGCOM# AND 
				IDBNK# = IGBNK# AND 
				IDVCH# = AVTVH# 
			LEFT OUTER JOIN 
			(
				SELECT 
					IGCOM# AS COMP, IGTXR# AS TXR, IGCHQ# AS CHQN, IGFSYY AS YY, IGFSPP AS PP, SUM (IGGROS) AS GROS, SUM (IGDISC) AS DISC 
				FROM 
					LGDAT.CHQR 
				WHERE 
					 --inner most select is a unique list of check run numbers direct from GL. does NOT key off of indexed fields but still runs really fast 
					IGTXR# IN (SELECT DISTINCT DKKEYN FROM LGDAT.GLSBAP WHERE DKSRCE = 'AP' AND DKQUAL = 'CQ' AND DKFSYR = 20 AND DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD) 
				GROUP BY 
					IGCOM#, IGTXR#, IGCHQ#, IGFSYY, IGFSPP 
			) CHQ ON 
				CHQ.COMP = SUBSTR (DKACC#, 1, 2) AND 
				CHQ.TXR = DKKEYN AND 
				CHQ.YY = DKFSYY AND 
				CHQ.PP = DKFSPR AND 
				CHQN = IGCHQ# 
			LEFT OUTER JOIN 
			(
				SELECT 
					IGCOM# AS COMP, IGTXR# AS TXR, IGFSYY AS YY, IGFSPP AS PP, SUM (IGGROS) AS GROS, SUM (IGDISC) AS DISC 
				FROM 
					LGDAT.CHQR 
				WHERE 
					IGTXR# IN (SELECT DISTINCT DKKEYN FROM LGDAT.GLSBAP WHERE DKSRCE = 'AP' AND DKQUAL = 'CQ' AND DKFSYR = 20 AND DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD) 
				GROUP BY 
					IGCOM#, IGTXR#, IGFSYY, IGFSPP 
			) CHR ON 
				CHR.COMP = SUBSTR (DKACC#, 1, 2) AND 
				CHR.TXR = DKKEYN AND 
				CHR.YY = DKFSYY AND 
				CHR.PP = DKFSPR 
		WHERE 
			DKSRCE = 'AP' AND 
			DKQUAL = 'CQ' AND 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD ; 
	 
	/* 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	|     								Void Checks									    | 
	|___________________________________________________________________________________________________________________________________________________|				 
	|Voided check transactions APVC post to the anchor file GLSBAP with a hook to the check number whihc is used to go back and embed voucher & invoice | 
	|The data natively exists with the appropriate level of granularity for reporting and is also accurate						    | 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	*/ 
  
  
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL AS MODULE, 
			DIGITS (DKBTC#) AS BATCH, DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT) AS TDATE, 
			CHAR (DKPDAT) AS PDATE, 
			DIGITS (DKACC#) AS ACCT, 
			ROUND (CASE 
			WHEN ABS (DKAMT) < IGGROS THEN ABS (DKAMT) / IGGROS 
			ELSE 1 
			END * CASE WHEN DKAMT < 0 THEN - 1 ELSE 1 END * AVTAMT, 2) AS AMT, 
			DKPJNM AS PROJ, 
			DKFUT4 AS USRN, 
			DKREV AS REV, 
			UPPER (LTRIM (RTRIM (SUBSTR (DKREFD, 1, 9)))) AS CUSMOD, 
			IGTXR# AS CUSKEY1, 
			'CHECK TRANSACTION' AS CUSKEY1D, 
			IGCHQ# AS KEY2, 
			'CHECK NUMBER' AS CUSKEY2D, 
			DIGITS (AVTVH#) AS CUSKEY3, 
			'VOUCHER' AS CUSKEY3D, 
			IDINV# AS CUSKEY4, 
			'INVOICE' AS CUSKEY4D, 
			IGVEN# AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBAP 
			LEFT OUTER JOIN LGDAT.AVTX ON 
				AVTCO# = SUBSTR (DKACC#, 1, 2) AND 
				AVTCHQ = DKKEYN AND 
				AVTTYP = 7 AND 
				AVTFIS = DKFSYR || DKFSYY || DIGITS (DKFSPR) 
			LEFT OUTER JOIN LGDAT.CHQR ON 
				IGCOM# = AVTCO# AND 
				IGBNK# = AVTCHB AND 
				IGCHQ# = AVTCHQ 
			LEFT OUTER JOIN LGDAT.VCHR ON 
				IDCOM# = IGCOM# AND 
				IDBNK# = IGBNK# AND 
				IDVCH# = AVTVH# 
			WHERE 
				DKSRCE || DKQUAL = 'APVC' AND 
				DKFSYR = 20 AND 
				DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD ; 
  
	/* 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	|				Voucher Posting													    | 
	|___________________________________________________________________________________________________________________________________________________|				 
	|Voucher postings are transacted without reference to the 3-way match data									    | 
	|this module currently only gets half way there because of complications around manually changing the accounts or amounts involved in the voucher   | 
	|The PO & description are linked in, but ideally we would have the master receipt key which is the common thread for reporting			    | 
	+---------------------------------------------------------------------------------------------------------------------------------------------------+ 
	*/ 
	 -----need to look at a new approach where the POMVAR linkage is setup if matching was used, otherwise default to this logic 
	INSERT INTO	 
		RLARP.FFSBGLWF 
	SELECT 
		MODULE, BATCH, PERD, TDATE, PDATE, ACCT, 
		SUM (AMT) AMT, 
		PROJ, USRN, REV, CUSMOD, CUSKEY1, CUSKEY1D, CUSKEY2, CUSKEY2D, CUSKEY3, CUSKEY3D, CUSKEY4, CUSKEY4D, CUSVEND, CUSCUST, RECID 
	FROM 
		(
		SELECT 
			DKSRCE || DKQUAL AS MODULE, 
			DIGITS (DKBTC#) AS BATCH, 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) PERD, 
			CHAR (DKTDAT) AS TDATE, 
			CHAR (DKPDAT) AS PDATE, 
			DIGITS (DKACC#) AS ACCT, 
			CASE WHEN PPV_DET IS NULL 
				THEN DKAMT 
				ELSE ROUND (DKAMT * PPV_DET, 2) 
			END AMT, 
			DKPJNM AS PROJ, 
			DKFUT4 AS USRN, 
			DKREV AS REV, 
			'VOUCHER POSTING' CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'VOUCHER NUMBER' AS CUSKEY1D, 
			IDINV# AS CUSKEY2, 
			'INVOICE' AS CUSKEY2D, 
			CASE WHEN PPV_DET IS NULL THEN IDVDES ELSE DIGITS (LBRKEY) END AS CUSKEY3, 
			CASE WHEN PPV_DET IS NULL THEN 'DESCR' ELSE 'RKEY' END AS CUSKEY3D, 
			LBPT# AS CUSKEY4, 
			CASE WHEN COALESCE (LBPT#, '') = '' THEN '' ELSE 'PART' END AS CUSKEY4D, 
			IDVEN# AS CUSVEND, 
			'' AS CUSCUST, 
			DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBAP 
			LEFT OUTER JOIN LGDAT.VCHR ON 
				IDCOM# = SUBSTR (DKACC#, 1, 2) AND 
				IDVCH# = DKKEYN AND 
				IDFISY = DKFSYY AND 
				IDFISP = DKFSPR 
				 --an assumption is that given a fiscal period all voucher numbers are different, however this could be violated due to bank codes 
				 --not being differentiated on the ledger and the account code may not reflect the bank code granularity and there is no history 
				 --file on the bank master data so it doesn't matter anyways 
			LEFT OUTER JOIN 
			(
				SELECT 
					X.COMP COMP, X.VCHR VCHR, X.ACCT ACCT, X.PPV PPV, X.CNT CNT, X.TOT TOT, LBRKEY, LBPT#, LBEXT, LBCOM# || Y1PRVR PPVACCT, LBPPV, 
					CASE X.PPV 
						WHEN 0 THEN 
							CASE X.TOT 
								WHEN 0 THEN FLOAT (1) / FLOAT (X.CNT) 
								ELSE LBEXT / X.TOT 
							END 
						ELSE LBPPV / X.PPV 
					END PPV_DET 
				FROM	 
					LGDAT.POMVAR 
					LEFT OUTER JOIN LGDAT.STKMM ON 
						AVPART = LBPT# 
					LEFT OUTER JOIN LGDAT.STKMP ON 
						AWPART = LBPT# 
					LEFT OUTER JOIN LGDAT.GLIE ON 
						Y1PLNT = LBPLNT AND 
						Y1GLEC = COALESCE (AVGLED, AWGLED) 
					LEFT OUTER JOIN LGDAT.POI ON 
						KBPO# = LBPO# AND 
						KBITM# = LBPOI# 
					LEFT OUTER JOIN 
					(
						SELECT 
							LBCOM# COMP, LBVCH# VCHR, 
							LBCOM# || COALESCE (Y1PRVR, KBGL#) ACCT,  --if the ppv account is null, then use the expense account from the PO 
							SUM (LBPPV) PPV, COUNT (LBRKEY) CNT, SUM (LBEXT) TOT 
						FROM	 
							LGDAT.POMVAR 
							LEFT OUTER JOIN LGDAT.STKMM ON 
								AVPART = LBPT# 
							LEFT OUTER JOIN LGDAT.STKMP ON 
								AWPART = LBPT# 
							LEFT OUTER JOIN LGDAT.GLIE ON 
								Y1PLNT = LBPLNT AND 
								Y1GLEC = COALESCE (AVGLED, AWGLED) 
							LEFT OUTER JOIN LGDAT.POI ON 
								KBPO# = LBPO# AND 
								KBITM# = LBPOI# 
								 
						WHERE 
							DIGITS (LBFSYY) || DIGITS (LBFSPP) = VPERD 
							 --may need to consider excluding .00001 cost items 
						GROUP BY 
							LBCOM#, LBVCH#, LBCOM# || COALESCE (Y1PRVR, KBGL#) 
					) X ON 
						X.COMP = LBCOM# AND	 
						X.VCHR = LBVCH# AND 
						X.ACCT = LBCOM# || COALESCE (Y1PRVR, KBGL#) 
				WHERE 
					DIGITS (LBFSYY) || DIGITS (LBFSPP) = VPERD 
			) SPLIT ON	 
				SPLIT.COMP = SUBSTR (DKACC#, 1, 2) AND	 
				SPLIT.VCHR = DKKEYN AND 
				SPLIT.ACCT = DKACC# 
		WHERE 
			DKSRCE = 'AP' AND 
			DKQUAL = 'VN' AND 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD 
		) AGG 
	GROUP BY 
		MODULE, BATCH, PERD, TDATE, PDATE, ACCT, 
		PROJ, USRN, REV, CUSMOD, CUSKEY1, CUSKEY1D, CUSKEY2, CUSKEY2D, CUSKEY3, CUSKEY3D, CUSKEY4, CUSKEY4D, CUSVEND, CUSCUST, RECID ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------	 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			BL8SRCE || BL8QUAL, 
			DIGITS (BL8BTC#), 
			BL8FSYY || DIGITS (BL8FSPR), 
			CHAR (BL8TRDAT), 
			CHAR (BL8PDAT), 
			BL8ACC#, 
			BL8AMT, 
			BL8PJNB, 
			BL8USER, 
			BL8REV, 
			CASE DKQUAL 
				WHEN '' THEN UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
				WHEN 'IN' THEN 'CREDIT MEMO' 
				WHEN 'RC' THEN UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
				ELSE 'NOT MAPPED' 
			END CUSMOD, 
			CASE DKQUAL 
				WHEN '' THEN BL8REFB 
				WHEN 'IN' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN SUBSTR (BL8KEYN, 2, 5) ELSE BL8KEYN END 
				WHEN 'RC' THEN 
				CASE UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
					WHEN 'ADJUSTMENT' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN SUBSTR (BL8KEYN, 2, 5) ELSE BL8KEYN END 
					WHEN 'CASH RECEIPINV' THEN CASE SUBSTR (BL8REFD, 16, 1) WHEN 'D' THEN SUBSTR (BL8REFD, 17, 5) ELSE SUBSTR (BL8REFD, 16, 6) END 
					WHEN 'DISCOUNT' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN SUBSTR (BL8KEYN, 2, 5) ELSE BL8KEYN END 
					WHEN 'MISC CASH ENTR' THEN BL8ADDD 
					ELSE '' 
				END 
				ELSE 'NOT MAPPED' 
			END CUSKEY1, 
			CASE DKQUAL 
				WHEN '' THEN 'DESCR1' 
				WHEN 'IN' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN 'DEBIT NOTE-CCRH' ELSE 'INVOICE-OIH' END 
				WHEN 'RC' THEN 
				CASE UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
					WHEN 'ADJUSTMENT' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN 'DEBIT MEMO-X' ELSE 'INVOICE-OIH' END 
					WHEN 'CASH RECEIPINV' THEN CASE SUBSTR (BL8REFD, 16, 1) WHEN 'D' THEN 'DEBIT MEMO-X' ELSE 'INVOICE-OIH' END 
					WHEN 'DISCOUNT' THEN CASE SUBSTR (BL8KEYN, 1, 1) WHEN 'D' THEN 'DEBIT MEMO-X' ELSE 'INVOICE-OIH' END 
					WHEN 'MISC CASH ENTR' THEN 'DESCRIPTION-X' 
					ELSE '' 
				END 
				ELSE 'NOT MAPPED' 
			END CUSKEY1D, 
			CASE DKQUAL 
				WHEN '' THEN BL8ADDD 
				WHEN 'IN' THEN BL8REF 
				WHEN 'RC' THEN 
				CASE UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
					WHEN 'CASH RECEIPINV' THEN BL8KEYN 
					WHEN 'CASH RECEIPT' THEN BL8KEYN 
					ELSE '' 
				END 
				ELSE 'NOT MAPPED' 
			END CUSKEY2, 
			CASE DKQUAL 
				WHEN '' THEN 'DESCR2' 
				WHEN 'IN' THEN 'OFFSET&DESCR' 
				WHEN 'RC' THEN 
				CASE UPPER (LTRIM (RTRIM (SUBSTR (BL8REFD, 1, 14)))) 
					WHEN 'CASH RECEIPINV' THEN 'CHEQUE-ARTRN' 
					WHEN 'CASH RECEIPT' THEN 'CHEQUE-ARTRN' 
					ELSE '' 
				END 
				ELSE 'NOT MAPPED' 
			END CUSKEY2D, 
			DIGITS (BL8BTCH) AS CUSKEY3, 
			'AR BATCH' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			BL8CUST, '0' RECID 
		FROM 
			LGDAT.AROPT 
			INNER JOIN (SELECT DISTINCT DKACC#, DKFSYY, DKFSPR, DKSRCE, DKQUAL FROM LGDAT.GLSBAR WHERE DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND DKSRCE = 'AR') X ON 
				DKACC# = BL8ACC# AND 
				BL8SRCE = DKSRCE AND 
				BL8QUAL = DKQUAL AND 
				BL8FSYY = DKFSYY AND 
				BL8FSPR = DKFSPR ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), 
			DKFSYY || DIGITS (DKFSPR), 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DKACC#, 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			UPPER (RTRIM (SUBSTR (DKREFD, 1, 15))) CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'ITEM' AS CUSKEY1D, 
			DKADDD AS CUSKEY2, 
			'DESCR' AS CUSKEY2D, 
			'' AS CUSKEY3, 
			'' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'', DKRCID RECID 
		FROM 
			LGDAT.GLSBAR 
		WHERE 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'AR' AND 
			DKQUAL = 'RC' AND 
			DKREFD = 'MISC CASH ENTRY' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF	 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			LTRIM (RTRIM (UPPER (SUBSTR (DKADDD, 1, 4)))) AS CUSMOD, 
			DKPART AS CUSKEY1, 
			'PART' AS CUSKEY1D, 
			LTRIM (RTRIM (SUBSTR (DKADDD, 13, 14))) AS CUSKEY2, 
			'QTY' AS CUSKEY2D, 
			LTRIM (RTRIM (SUBSTR (DKADDD, 28, 2))) AS CUSKEY3, 
			'UOM' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBIV GLSBIV 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'IC' AND 
			DKQUAL = '' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			LTRIM (RTRIM (UPPER (SUBSTR (DKADDD, 1, 14)))) AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'INVOICE' AS CUSKEY1D, 
			DKFUT9 AS CUSKEY2, 
			'INVOICE LINE' AS CUSKEY2D, 
			DHPLNT AS CUSKEY3, 
			'SHIP PLNT' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DHBCS# AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBIV GLSBIV 
			LEFT OUTER JOIN LGDAT.OIH ON 
				DHINV# = DKKEYN 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'IC' AND 
			DKQUAL = 'IN' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			LTRIM (RTRIM (UPPER (SUBSTR (DKADDD, 1, 4)))) AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'BYTRAN' AS CUSKEY1D, 
			BYREAS AS CUSKEY2, 
			'REASON' AS CUSKEY2D, 
			BYDREF AS CUSKEY3, 
			'DESCR' AS CUSKEY3D, 
			BYPART AS CUSKEY4, 
			'PART' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBIV GLSBIV 
			LEFT OUTER JOIN LGDAT.STKT ON 
				BYTRAN = INT (DKKEYN) 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'IC' AND 
			DKQUAL = 'IT' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'GOODS RECEIPT' AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'REC LOG' AS CUSKEY1D, 
			DKPART AS CUSKEY2, 
			'PART' AS CUSTKEY2D, 
			'' AS CUSKEY3, 
			'' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBIV GLSBIV 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD	AND 
			DKSRCE = 'IC' AND 
			DKQUAL = 'RL' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL AS MODULE, 
			DIGITS (DKBTC#) AS BATCH, 
			DIGITS (DKFSYY) || DIGITS (DKFSPR), 
			CHAR (DKTDAT) AS TDATE, 
			CHAR (DKPDAT) AS PDATE, 
			DIGITS (DKACC#) AS ACCT, 
			DKAMT AS AMT, 
			DKPJNM AS PROJ, 
			DKFUT4 AS USRN, 
			DKREV AS REV, 
			SUBSTR (DKADDD, 1, 12), DKKEYN, 
			'RAN DOC NUM AND ITM', 
			INRAN#, 
			'RAN', 
			INCRD# || ' - ' || INITM#, 
			'CREDIT AND ITEM', 
			DIINV#, 
			'CREDIT INVOICE', 
			'', 
			INCUST, 
			DKRCID 
		FROM 
			LGDAT.GLSBIV 
			LEFT OUTER JOIN LGDAT.RANS ON 
				INRNDR = SUBSTR (DKKEYN, 1, LOCATE ('/', DKKEYN) - 1) AND 
				INRNDI = SUBSTR (DKKEYN, LOCATE ('/', DKKEYN) + 1, 1) 
			LEFT OUTER JOIN LGDAT.OID ON 
				DIORD# = INCRD# AND 
				DIITM# = INITM# AND 
				DIGITS (INCRD#) <> '000000000' 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'IC' AND 
			DKQUAL = 'RT' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'GOODS RECEIPT' AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'RETURN TO VENDOR' AS CUSKEY1D, 
			DKPART AS CUSKEY2, 
			'PART' AS CUSKEY2D, 
			'' AS CUSKEY3, 
			'' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBIV GLSBIV 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'IC' AND 
			DKQUAL = 'VR' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			UPPER (LTRIM (RTRIM (SUBSTR (DKREFD, 1, 14)))) AS CUSMOD, 
			DKKEYN AS CUSKEY1, 
			'INVOICE' AS CUSKEY1D, 
			DKFUT9 AS CUSKEY2, 
			'INVOICE LINE' AS CUSKEY2D, 
			DHPLNT AS CUSKEY3, 
			'INVOICE PLANT' AS CUSKEY3D, 
			DHINCR AS CUSKEY4, 
			'INC/CRD' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DHBCS# AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GLSBAR GLSBAR 
			LEFT OUTER JOIN LGDAT.OIH ON 
				DHINV# = DKKEYN 
		WHERE 
			GLSBAR.DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'OE' AND 
			DKQUAL = 'IN' ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			SUM (DKAMT), 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'PRODUCTION REPORTING' AS CUSMOD, 
			'' AS CUSKEY1, 
			'' AS CUSKEY1D, 
			'' AS CUSKEY2, 
			'' AS CUSKEY2D, 
			UPPER (CASE WHEN SUBSTR (DKREFD, 1, 7) IN ('COMPLET', 'CP- PO#', 'WIP ADJ', 'VOID CO', 'REV WIP') THEN SUBSTR (DKREFD, 1, 7) ELSE SUBSTR (DKADDD, 1, 24) END) AS CUSKEY3, 
			'ACTION' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, '0' AS DKRCID 
		FROM 
			LGDAT.GTRAN GLSBIV 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'PD' 
		GROUP BY 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), 
			DIGITS (DKFSYY) || DIGITS (DKFSPR), 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			UPPER (CASE WHEN SUBSTR (DKREFD, 1, 7) IN ('COMPLET', 'CP- PO#', 'WIP ADJ', 'VOID CO', 'REV WIP') THEN SUBSTR (DKREFD, 1, 7) ELSE SUBSTR (DKADDD, 1, 24) END) ; 
			 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			SUM (DKAMT), 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'PRODUCTION REPORTING' AS CUSMOD, 
			'' AS CUSKEY1, 
			'' AS CUSKEY1D, 
			'' AS CUSKEY2, 
			'' AS CUSKEY2D, 
			UPPER (CASE WHEN SUBSTR (DKREFD, 1, 7) IN ('COMPLET', 'CP- PO#', 'WIP ADJ', 'VOID CO', 'REV WIP') THEN SUBSTR (DKREFD, 1, 7) ELSE SUBSTR (DKADDD, 1, 24) END) AS CUSKEY3, 
			'ACTION' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, '0' AS DKRCID 
		FROM 
			LGDAT.GTLYN GLSBIV 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'PD' 
		GROUP BY 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), 
			DIGITS (DKFSYY) || DIGITS (DKFSPR), 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			UPPER (CASE WHEN SUBSTR (DKREFD, 1, 7) IN ('COMPLET', 'CP- PO#', 'WIP ADJ', 'VOID CO', 'REV WIP') THEN SUBSTR (DKREFD, 1, 7) ELSE SUBSTR (DKADDD, 1, 24) END) ; 
			 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			SUM (DKAMT), 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'PRODUCTION REPORTING' AS CUSMOD, 
			'' AS CUSKEY1, 
			'' AS CUSKEY1D, 
			'' AS CUSKEY2, 
			'' AS CUSKEY2D, 
			UPPER (CASE WHEN SUBSTR (DKREFD, 1, 7) IN ('COMPLET', 'CP- PO#', 'WIP ADJ', 'VOID CO', 'REV WIP') THEN SUBSTR (DKREFD, 1, 7) ELSE SUBSTR (DKADDD, 1, 24) END) AS CUSKEY3, 
			'ACTION' AS CUSKEY3D, 
			'' AS CUSKEY4, 
			'' AS CUSKEY4D, 
			'' AS CUSVEND, 
			'' AS CUSCUST, '0' AS DKRCID 
		FROM 
			LGDAT.GNYTR GLSBIV 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE = 'PD' 
		GROUP BY 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), 
			DIGITS (DKFSYY) || DIGITS (DKFSPR), 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			UPPER (CASE WHEN SUBSTR (DKREFD, 1, 7) IN ('COMPLET', 'CP- PO#', 'WIP ADJ', 'VOID CO', 'REV WIP') THEN SUBSTR (DKREFD, 1, 7) ELSE SUBSTR (DKADDD, 1, 24) END) ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLWF 
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'JOURNAL ENTRY' AS CUSMOD, 
			DKADDD AS CUSKEY1, 
			'BATCH DESCR' AS CUSKEY1D, 
			DKREFD AS CUSKEY2, 
			'LINE DESCR' AS CUSKEY2D, 
			DKKEYN AS CUSKEY3, 
			'BATCH' AS CUSKEY3D, 
			DKREF# AS CUSKEY4, 
			'JOUNAL' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DKBCUS AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GTRAN GTRAN 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE IN ('GJ', 'RJ', 'OS', 'AU') 
  
		UNION ALL 
  
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'JOURNAL ENTRY' AS CUSMOD, 
			DKADDD AS CUSKEY1, 
			'BATCH DESCR' AS CUSKEY1D, 
			DKREFD AS CUSKEY2, 
			'LINE DESCR' AS CUSKEY2D, 
			DKKEYN AS CUSKEY3, 
			'BATCH' AS CUSKEY3D, 
			DKREF# AS CUSKEY4, 
			'JOUNAL' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DKBCUS AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GTLYN GTRAN 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE IN ('GJ', 'RJ', 'OS', 'AU') 
  
		UNION ALL 
  
		SELECT 
			DKSRCE || DKQUAL, 
			DIGITS (DKBTC#), DIGITS (DKFSYY) || DIGITS (DKFSPR) AS PERD, 
			CHAR (DKTDAT), 
			CHAR (DKPDAT), 
			DIGITS (DKACC#), 
			DKAMT, 
			DKPJNM, 
			DKFUT4, 
			DKREV, 
			'JOURNAL ENTRY' AS CUSMOD, 
			DKADDD AS CUSKEY1, 
			'BATCH DESCR' AS CUSKEY1D, 
			DKREFD AS CUSKEY2, 
			'LINE DESCR' AS CUSKEY2D, 
			DKKEYN AS CUSKEY3, 
			'BATCH' AS CUSKEY3D, 
			DKREF# AS CUSKEY4, 
			'JOUNAL' AS CUSKEY4D, 
			'' AS CUSVEND, 
			DKBCUS AS CUSCUST, DIGITS (DKRCID) AS RECID 
		FROM 
			LGDAT.GNYTR GTRAN 
		WHERE 
			DKFSYR = 20 AND 
			DIGITS (DKFSYY) || DIGITS (DKFSPR) = VPERD AND 
			DKSRCE IN ('GJ', 'RJ', 'OS', 'AU') ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO RLARP.FFSBGLWF SELECT * FROM RLARP.VW_FFWFACM ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		DELETE FROM RLARP.FFSBGLWF WHERE MODULE = 'APAC' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		UPDATE RLARP.FFSBGLWF SET MODULE = 'APAC' WHERE MODULE = 'APMA' ; 
  
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLR1_E 
		SELECT 
			W.MODULE, 
			W.BATCH, 
			W.PERD, 
			W.TDATE, 
			W.PDATE, 
			W.ACCT, 
			SUM (W.AMT) AMT, 
			W.PROJ, 
			W.USRN, 
			W.REV, 
			W.CUSMOD, 
			W.CUSKEY1, 
			W.CUSKEY1D, 
			W.CUSKEY2, 
			W.CUSKEY2D, 
			W.CUSKEY3, 
			W.CUSKEY3D, 
			W.CUSKEY4, 
			W.CUSKEY4D, 
			W.CUSVEND, 
			W.CUSCUST, 
			W.RECID 
		FROM 
			RLARP.FFSBGLWF W 
			EXCEPTION JOIN RLARP.FFSBGLR1 F ON 
				W.PERD = F.PERD AND 
				W.MODULE = F.MODULE AND 
				W.CUSMOD = F.CUSMOD AND 
				W.ACCT = F.ACCT AND 
				W.BATCH = F.BATCH AND 
				W.PDATE = F.PDATE AND 
				W.PROJ = F.PROJ AND 
				W.CUSKEY1 = F.CUSKEY1 AND 
				W.CUSKEY2 = F.CUSKEY2 AND 
				W.CUSKEY3 = F.CUSKEY3 AND 
				W.CUSKEY4 = F.CUSKEY4 AND 
				W.CUSVEND = F.CUSVEND AND 
				W.CUSCUST = F.CUSCUST AND 
				W.RECID = F.RECID 
		GROUP BY 
			W.MODULE, 
			W.BATCH, 
			W.PERD, 
			W.TDATE, 
			W.PDATE, 
			W.ACCT, 
			W.PROJ, 
			W.USRN, 
			W.REV, 
			W.CUSMOD, 
			W.CUSKEY1, 
			W.CUSKEY1D, 
			W.CUSKEY2, 
			W.CUSKEY2D, 
			W.CUSKEY3, 
			W.CUSKEY3D, 
			W.CUSKEY4, 
			W.CUSKEY4D, 
			W.CUSVEND, 
			W.CUSCUST, 
			W.RECID ; 
		 
	 ------------------------------------------------------------------------------------------------------------------------------------------------------ 
		INSERT INTO 
			RLARP.FFSBGLR1 
		SELECT 
			W.MODULE, 
			W.BATCH, 
			W.PERD, 
			W.TDATE, 
			W.PDATE, 
			W.ACCT, 
			SUM (W.AMT) AMT, 
			W.PROJ, 
			W.USRN, 
			W.REV, 
			W.CUSMOD, 
			W.CUSKEY1, 
			W.CUSKEY1D, 
			W.CUSKEY2, 
			W.CUSKEY2D, 
			W.CUSKEY3, 
			W.CUSKEY3D, 
			W.CUSKEY4, 
			W.CUSKEY4D, 
			W.CUSVEND, 
			W.CUSCUST, 
			W.RECID 
		FROM 
			RLARP.FFSBGLWF W 
			EXCEPTION JOIN RLARP.FFSBGLR1 F ON 
				W.PERD = F.PERD AND 
				W.MODULE = F.MODULE AND 
				W.CUSMOD = F.CUSMOD AND 
				W.ACCT = F.ACCT AND 
				W.BATCH = F.BATCH AND 
				W.PDATE = F.PDATE AND 
				W.PROJ = F.PROJ AND 
				W.CUSKEY1 = F.CUSKEY1 AND 
				W.CUSKEY2 = F.CUSKEY2 AND 
				W.CUSKEY3 = F.CUSKEY3 AND 
				W.CUSKEY4 = F.CUSKEY4 AND 
				W.CUSVEND = F.CUSVEND AND 
				W.CUSCUST = F.CUSCUST AND 
				W.RECID = F.RECID 
		GROUP BY 
			W.MODULE, 
			W.BATCH, 
			W.PERD, 
			W.TDATE, 
			W.PDATE, 
			W.ACCT, 
			W.PROJ, 
			W.USRN, 
			W.REV, 
			W.CUSMOD, 
			W.CUSKEY1, 
			W.CUSKEY1D, 
			W.CUSKEY2, 
			W.CUSKEY2D, 
			W.CUSKEY3, 
			W.CUSKEY3D, 
			W.CUSKEY4, 
			W.CUSKEY4D, 
			W.CUSVEND, 
			W.CUSCUST, 
			W.RECID ; 
			 
		OPEN C1 ;	 
		 
	END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.SB_UD_R2 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.SB_UD_R2 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.TEST_DS () 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.TEST_DS 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *CHG, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = RLARP, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	P1 : BEGIN 
	 
	DECLARE STM CLOB ; 
	BEGIN 
	SET STM = 'SELECT * FROM RLARP.FFCRET' ; 
EXECUTE IMMEDIATE STM ; 
END ; 
		 
END P1  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.TEST_DS 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.TEST_DS 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.TEST1 () 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.TEST1 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
	 
	 
	DECLARE C INTEGER ; 
	DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR SELECT SUBSTR (A249, 202, C) FROM LGDAT.NAME WHERE A7 = 'C000093' ; 
	SET C = (SELECT A84MAXL + A84FLG1 FROM LGDAT.GLDFT) ; 
	OPEN C1 ; 
END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.TEST1 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.TEST1 
TO PUBLIC ; 
  
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","PTROWBRIDG" ; 
  
CREATE PROCEDURE RLARP.TEST2 (
	IN VCOMP VARCHAR(2)) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC RLARP.TEST2 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD, 
	ALWCPYDTA = *OPTIMIZE, 
	COMMIT = *NONE, 
	DECRESULT = (31, 31, 00), 
	DFTRDBCOL = *NONE, 
	DYNDFTCOL = *NO, 
	DYNUSRPRF = *USER, 
	SRTSEQ = *HEX   
	BEGIN 
	 
	DECLARE C INTEGER ; 
	DECLARE V_ERROR INTEGER ; 
	DECLARE MSG_VAR VARCHAR (255) ; 
	DECLARE RETRN_STATUS INTEGER ; 
  
	DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR SELECT SUBSTR (A249, 202, C) FROM LGDAT.NAME WHERE A7 = 'C0000' || VCOMP ; 
	 
  
	DECLARE EXIT HANDLER FOR SQLEXCEPTION  --,SQLWARNING 
	BEGIN 
	SET V_ERROR = SQLCODE ; 
	GET DIAGNOSTICS RETRN_STATUS = RETURN_STATUS ; 
  
	IF (V_ERROR IS NULL) OR (V_ERROR <> 0 AND V_ERROR <> 466) OR (RETRN_STATUS > 3) 
	THEN 
	SET MSG_VAR = 'PROC: ' || 'v_proc_name' || ', ' || COALESCE (MSG_VAR, '') || ', SQLCODE: ' || CHAR (V_ERROR) || ', PARAMS: ' || 'C0000' || VCOMP ; 
  
	ROLLBACK ; 
	 --INSERT INTO schema.log_t (columns) VALUES (); 
	COMMIT ; 
	SET RETRN_STATUS = - 1 ; 
  
	 -- Return error message to the caller 
	SIGNAL SQLSTATE '75001' SET MESSAGE_TEXT = MSG_VAR ; 
	ELSE 
	SET V_ERROR = 0 ; 
	END IF ; 
	END ; 
  
  
	SET C = 1 / 1 ; 
	SET C = (SELECT A84MAXL + A84FLG1 FROM LGDAT.GLDFT) ; 
	OPEN C1 ; 
	END  ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.TEST2 
TO PTROWBRIDG ; 
  
GRANT ALTER, EXECUTE   
ON SPECIFIC PROCEDURE RLARP.TEST2 
TO PUBLIC ;
